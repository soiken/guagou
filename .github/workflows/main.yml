name: Build project using muddler and upload artifact

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main

      - name: Muddle
        uses: demonnic/build-with-muddler@main
        with:
          muddlerVersion: 0.5
      
      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: Soiken
          path: build/
          
      - name: Download Artifact
        uses: actions/download-artifact@main
        with:
          name: Soiken
          path: downloaded-artifact

      - name: Print Current Directory
        run: pwd

      - name: Print Workspace Directory
        run: echo ${{ github.workspace }}
      
      - name: List Files in Workspace
        run: ls -R ${{ github.workspace }}

      - name: Debug Step
        run: |
          echo "GitHub Workspace: ${{ github.workspace }}"
          echo "Target Folder: $GITHUB_WORKSPACE/build"
          echo "Repository Path: $GITHUB_REPOSITORY"
          echo "Location: $(pwd)"
          ls -R ${{ github.workspace }}/downloaded-artifact
        env:
          MUDDLER_VERSION: 0.5
      
      - name: Move Artifact to Repository Folder
        run: cp -r ${{ github.workspace }}/downloaded-artifact/* $GITHUB_WORKSPACE/build/
        env:
          MUDDLER_VERSION: 0.5

      - name: Generate Release Tag
        id: tag
        run: |
          release_tag="UserBuild_$(date +'%Y.%m.%d_%H-%M')"
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
        continue-on-error: true


      - name: Set up Git for Release
        run: |
          git config --global user.email "neilkan8@gmail.com"
          git config --global user.name "Nekios"
        # Ensure this step is set up for later release-related actions

      - name: Move file to workspace
        run: mv /home/runner/work/guagou/guagou/build/soiken-1.0.0.mpackage soiken.mpackage

      - name: Create and push tag
        run: |
          git tag -a ${{ steps.tag.outputs.release_tag }} -m "Release ${{ steps.tag.outputs.release_tag }}"
          git push origin ${{ steps.tag.outputs.release_tag }}
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: build
        run: make build

      - name: version
        run: |
          version=$(./bin/azblogfilter --version)
          echo "version=$version" >> $GITHUB_OUTPUT

        
      - name: Create Release
        id: create_release
        using: 'node20'
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: |
            soiken.mpackage
          token: ${{ secrets.GH_PAT }}

      - name: Delete Oldest Release
        run: |
          # Fetch the list of releases using GitHub API
          releases=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" "https://api.github.com/repos/${{ github.repository }}/releases")
      
          # Check if there are more than one releases
          if [ "$(echo "$releases" | jq length)" -gt 1 ]; then
            # Find the oldest release by sorting the releases by created_at field
            oldest_release_url=$(echo "$releases" | jq -r 'sort_by(.created_at) | .[0].url')
      
            # Delete the oldest release
            curl -X DELETE -H "Authorization: token ${{ secrets.GH_PAT }}" "$oldest_release_url"
          else
            echo "No releases to delete."
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

