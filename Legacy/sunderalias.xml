<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Sunder</name>
			<script></script>
			<command></command>
			<packageName>Sunder</packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Sunder</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Core</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Help System</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Main Index</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Main index</name>
								<script>cecho("\n&lt;CadetBlue&gt;Sunder Helpfile")
cecho("\n&lt;MediumSeaGreen&gt;---------------")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Welcome to &lt;green&gt;Sunder&lt;ForestGreen&gt;! This helpfile is meant to give you an introduction to different things that &lt;green&gt;Sunder &lt;ForestGreen&gt;can do. It will not cover every option entirely, but it will provide the most often used or asked about items a bit more light to show how or when to use them.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;The first thing you should know is the &lt;DeepSkyBlue&gt;stap &lt;ForestGreen&gt;command. You type &lt;DeepSkyBlue&gt;stap &lt;ForestGreen&gt;and &lt;green&gt;Sunder &lt;ForestGreen&gt;will cease whatever it is currently attempting to do, for the most part. Some items may need to be toggled manually depending on the situation, but by and large &lt;DeepSkyBlue&gt;stap &lt;ForestGreen&gt;will keep you from hitting someone or something, or any other number of items.")
cecho("\n")
cecho("\n&lt;MediumTurquoise&gt;The index for the rest of the helpfiles is as such:")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;Bashing               &lt;ForestGreen&gt;Do you want to go bashing? &lt;green&gt;Sunder&lt;ForestGreen&gt; has you covered!")
cecho("\n&lt;DeepSkyBlue&gt;PK                    &lt;ForestGreen&gt;Playerkilling and you. Please practice safe PvP.")
cecho("\n&lt;DeepSkyBlue&gt;Defenses              &lt;ForestGreen&gt;How to upkeep, turn on/off and customize defenses.")
cecho("\n&lt;DeepSkyBlue&gt;Ylem                  &lt;ForestGreen&gt;Finding minors and other ylem based information.")
cecho("\n&lt;DeepSkyBlue&gt;Utilities             &lt;ForestGreen&gt;Vermin, fishing, shops, questing and more.")
cecho("\n&lt;DeepSkyBlue&gt;War                   &lt;ForestGreen&gt;Helpful aliases for handling war divisions")
cecho("\n&lt;ForestGreen&gt;Each above entry will point you toward more specific items in each section as needed.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Use &lt;DeepSkyBlue&gt;sunder help &lt;subject&gt; &lt;ForestGreen&gt;to navigate through everything else.")
cecho("\n")
raiseEvent("sunder_update_vitals")
</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Ylem helpfile</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;YLEM &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;Hunting after those elusive minors and lessers has never been easier! This will walk you through how to do that with a few easy steps. To start, you will need to make sure you have learned &lt;DeepSkyBlue&gt;LEYLINES &lt;ForestGreen&gt;in &lt;MediumTurquoise&gt;Vision &lt;ForestGreen&gt;(289 lessons) and &lt;DeepSkyBlue&gt;SHACKLING &lt;ForestGreen&gt;in &lt;MediumTurquoise&gt;Refining &lt;ForestGreen&gt;(239 lessons). While &lt;DeepSkyBlue&gt;shackling &lt;ForestGreen&gt;is not necessarily needed for this to work, it will benefit you in the long run and keep you from having to deal with multiple eld at once. In the process of learning &lt;DeepSkyBlue&gt;leylines&lt;ForestGreen&gt;, you will also learn &lt;DeepSkyBlue&gt;DETECTION&lt;ForestGreen&gt;, which will assist you in finding focal points. This is only needed if you do not have any reserves to use &lt;MediumTurquoise&gt;MANIPULATE PYLON FOR NODESENSE&lt;ForestGreen&gt;, which allows you to PATH TRACK MINOR directly to the focal point. For this, you will also need to purchase ylem goggles from the vendor at your pylon. Just PATH TRACK PYLON and ASK &lt;vendor&gt; WARES to BUY GOGGLES FROM &lt;vendor&gt;.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;The &lt;green&gt;Sunder &lt;ForestGreen&gt;ylem finder is simple to use! To start, just type in &lt;DeepSkyBlue&gt;goylem start &lt;ForestGreen&gt;and watch as it does all the work of walking around for you. It has a set path that it follows and is easy to change if you wish to do so or if new areas are added before &lt;green&gt;Sunder &lt;ForestGreen&gt;is updated again. It will continually run until it finds either a minor or a lesser. If it finds a minor, you can either DETECTION ON and walk around to find the focal point (it is highlighted in &lt;green&gt;Sunder&lt;ForestGreen&gt; already, so you won't miss it!) or you can PATH TRACK MINOR if you have ylem goggles and have used MANIPULATE PYLON FOR NODESENSE. The nodesense defense will only last for one hour or ten uses. Once you find the minor and extract it (EXTRACTION is the syntax) fully, you can &lt;DeepSkyBlue&gt;goylem next &lt;ForestGreen&gt;to have &lt;green&gt;Sunder &lt;ForestGreen&gt;continue the set path. If you need to stop at any point, you can &lt;DeepSkyBlue&gt;goylem stop &lt;ForestGreen&gt;and it will take you back to your city and reset the variables to start over if you decide to pick it up again. If you need to stop temporarily, you can just &lt;DeepSkyBlue&gt;stap&lt;ForestGreen&gt; and then &lt;DeepSkyBlue&gt;goylem &lt;ForestGreen&gt;to start back up again where you left off!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;goylem start          &lt;ForestGreen&gt;Start finding foci")
cecho("\n&lt;DeepSkyBlue&gt;goylem next           &lt;ForestGreen&gt;Move to the next area")
cecho("\n&lt;DeepSkyBlue&gt;goylem stop           &lt;ForestGreen&gt;Stop and return to your city")
cecho("\n&lt;DeepSkyBlue&gt;goylem                &lt;ForestGreen&gt;Continue if you had to stop")
cecho("\n&lt;DeepSkyBlue&gt;sh                    &lt;ForestGreen&gt;Shackle an eld in the room to stop it from hitting you!")
cecho("\n")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (Y|y)lem$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Toggles help</name>
								<script>cecho("\n&lt;MediumSeaGreen&gt;*------------------------------------------------------------------------------------------------*")
cecho("\n&lt;MediumSeaGreen&gt;|                                           &lt;CadetBlue&gt;SUNDER TOGGLES                                       &lt;MediumSeaGreen&gt;|")                                                    
cecho("\n&lt;MediumSeaGreen&gt;*------------------------------------------------------------------------------------------------*")
cecho("\n&lt;MediumSeaGreen&gt;| &lt;ansiCyan&gt;TOGGLE NAME &lt;MediumSeaGreen&gt; |                 &lt;ansiCyan&gt;INFOMATION                  &lt;MediumSeaGreen&gt;|             &lt;ansiCyan&gt;TOGGLES               &lt;MediumSeaGreen&gt;|")
cecho("\n&lt;MediumSeaGreen&gt;|------------------------------------------------------------------------------------------------|\n")

local togglecolor = ""

for k, v in pairs(snd.toggle_info) do

if snd.toggles[k] then togglecolor = "DeepSkyBlue" else togglecolor = "SlateGray" end

  cecho("&lt;MediumSeaGreen&gt;|&lt;"..togglecolor.."&gt; "..padRight(k, 13).. "&lt;MediumSeaGreen&gt;|&lt;ForestGreen&gt; "..padRight(tostring(v.info), 44).."&lt;MediumSeaGreen&gt;|&lt;MediumTurquoise&gt; "..padRight(tostring(v.command), 34).."&lt;MediumSeaGreen&gt;|\n")
end

cecho("&lt;MediumSeaGreen&gt;*------------------------------------------------------------------------------------------------*\n")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (T|t)oggles$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Bashing helpfiles</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder bashing</name>
								<script>cecho("&lt;CadetBlue&gt;Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;bashing&lt;CadetBlue&gt; help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;green&gt;Sunder &lt;ForestGreen&gt;has several methods of helping you bash, from hitting things in your room to helping you navigate the landscape of Aetolia and its many areas. You can easily know if &lt;green&gt;Sunder&lt;ForestGreen&gt; recognizes your area by doing a check with the &lt;red&gt;SURVEY&lt;ForestGreen&gt; command. As long as you see mob names, &lt;green&gt;Sunder&lt;ForestGreen&gt; will be able to hit things for you.")
cecho("\n")
cecho("\n&lt;red&gt;Consider this your warning: &lt;ForestGreen&gt;The folks who upkeep Sunder do not, by any means, condone or suggest using Sunder to do things while you are AFK or otherwise unable to attend to your character. From HELP AUTOMATION -&gt; FULLY automating quests and hunting - with movement and all actions included in the triggers - are allowed so long as one is present at the computer, as well as gambling automation. Please do not abuse what is being given to you without regard for the admin stance.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;DeepSkyBlue&gt;aa                    &lt;ForestGreen&gt;Make &lt;green&gt;Sunder &lt;ForestGreen&gt;try to hit everything in the room!")
cecho("\n                     &lt;ForestGreen&gt; If there is nothing left in the room, this will turn off.")
cecho("\n&lt;DeepSkyBlue&gt;ff                    &lt;ForestGreen&gt;Want to walk around manually and have Sunder hit things? Use this.")
cecho("\n                     &lt;ForestGreen&gt; It automatically turns on hitting when it finds a valid target.")
cecho("\n&lt;DeepSkyBlue&gt;grp &lt;person&gt;          &lt;ForestGreen&gt;Inform &lt;green&gt;Sunder&lt;ForestGreen&gt; of your bashing party.")
cecho("\n&lt;DeepSkyBlue&gt;grp queen rook pawn   &lt;ForestGreen&gt;Example of adding more than one person.")
cecho("\n&lt;DeepSkyBlue&gt;orbs                  &lt;ForestGreen&gt;Activate your ylem orbs with one alias!")
cecho("\n&lt;DeepSkyBlue&gt;toggle generic &lt;ForestGreen&gt;Use generic mob type instead of number to bash.")
cecho("\n")
cecho("\n")
cecho("\n&lt;green&gt;Sunder&lt;ForestGreen&gt; has some more advanced features listed in &lt;DeepSkyBlue&gt;sunder help autobashing&lt;ForestGreen&gt;.")


cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (B|b)ashing$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder auto bashing</name>
								<script>cecho("&lt;CadetBlue&gt;Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;autobashing&lt;CadetBlue&gt; help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;green&gt;Sunder &lt;ForestGreen&gt;recognizes a good majority of the areas in the game, including the main bashing areas and most of the ones you might use while gaining levels. The following methods will help you bash these areas, either singular or multiple at a time.")
cecho("\n")
cecho("\n&lt;red&gt;Consider this your warning: &lt;ForestGreen&gt;The folks who upkeep Sunder do not, by any means, condone or suggest using Sunder to do things while you are AFK or otherwise unable to attend to your character. From &lt;red&gt;HELP AUTOMATION -&gt;&lt;ForestGreen&gt; 'FULLY automating quests and hunting - with movement and all actions included in the triggers - are allowed so long as one is present at the computer, as well as gambling automation.' &lt;red&gt;Please do not abuse what is being given to you without regard for the admin stance.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;DeepSkyBlue&gt;goarea               &lt;ForestGreen&gt;Bash the current area you're in and then walk back to your city.")
cecho("\n                     &lt;ForestGreen&gt;Use this for bashing just one area. No need to use the below command.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;bashpath &lt;areas&gt;     &lt;ForestGreen&gt;Define your custom bashing route from valid areas.")
cecho("\n                     &lt;ForestGreen&gt;It will automatically walk you from the last room of area 1 to area 2, etc.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;bashpath tiyen, xaanhal, mamashi &lt;ForestGreen&gt;- for example, would bash those areas and then head home.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;There are some more functions in the scripts for use in your code for creating paths, doing new areas, etc.")
--You would want to look into SND Autopaths-&gt;Creating-&gt;start/add/compile.


cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (A|a)utobashing$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Utility helpfiles</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Questing Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;QUESTING &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;-------------------------------------------")
cecho("\n&lt;ForestGreen&gt;Always ending up with odds and ends in your inventory or kestrels following you around EVERYWHERE because you dared to walk through Three Widows? Well no more! You will now be able to toggle quests on and off so that you only whistle or pick up items when you want!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;------------")
cecho("\n&lt;ForestGreen&gt;As of right now, there is only one toggle to turn it on/off. More may be added in the future! It will not auto-walk areas for you, you will still need to walk around and while you do so &lt;green&gt;Sunder&lt;ForestGreen&gt; will pick up items and turn them in as appropriate. ")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;toggle questing       &lt;ForestGreen&gt;Toggles questing on/off")
cecho("\n&lt;MediumSeaGreen&gt;-------------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (q|Q)uesting$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Who Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;WHO &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------")
cecho("\n&lt;ForestGreen&gt;Tired of looking through the who list trying to figure out who is where and who they are with when looking for that pesky lesser that was just tapped? Well, thanks to &lt;green&gt;Czcibor&lt;ForestGreen&gt;, &lt;green&gt;Sunder &lt;ForestGreen&gt;has built in group checking via the who list!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;Using the alias &lt;DeepSkyBlue&gt;WHO GROUPS &lt;green&gt;Sunder &lt;ForestGreen&gt;will now sift through the who list and capture room locations. Once it is done with that, it will show you the names of the rooms that have more than one person in that location, how many people are there, and then who all is in that location! Note that those with the &lt;red&gt;cloaking&lt;ForestGreen&gt; artifact or in hidden rooms are unable to be tracked in this manner.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;who groups            &lt;ForestGreen&gt;Shows the full WHO list and then the grouped rooms with more than one person")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (w|W)ho$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Vermin Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;VERMIN &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;-----------------------------------------")
cecho("\n&lt;ForestGreen&gt;We get it! Every time you see that daily/weekly/monthly(especially the monthly) milestone for vermin, you just want to run head first into a team of mages collapsing singularities and calamaties! So hopefully these will make your life easier from here on out and save you from death by mages! No guarantees :(")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;First, you will want to make sure you are wielding whatever you need to kill the vermin. After you are ready to start your quest of ridding a city of its vermin, you just &lt;DeepSkyBlue&gt;PATH TRACK &lt;ForestGreen&gt;to any city &lt;LimeGreen&gt;(make sure you are not an enemy!) &lt;ForestGreen&gt;and then type &lt;DeepSkyBlue&gt;toggle vermin &lt;ForestGreen&gt;to start! This will work similar to &lt;DeepSkyBlue&gt;gogo &lt;ForestGreen&gt;in that it will just begin bashing from where you are currently. No matter which city you begin your vermin bashing in, it will end at the vermin mob and will automatically sell your vermin! So no more accidental offerings of vermin to your gods! Should you need to finish early, just type &lt;DeepSkyBlue&gt;toggle vermin &lt;ForestGreen&gt;again and an echo will pop up to remind you to go sell your vermin!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;toggle vermin         &lt;ForestGreen&gt;Toggles the vermin autobasher on/off")
cecho("\n&lt;MediumSeaGreen&gt;-----------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (v|V)ermin$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Fluidcache Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;FLUIDCACHE &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------------")
cecho("\n&lt;ForestGreen&gt;Ever log in and notice you lost a bunch of refills because your vials, bandages, or (gods forbid) rags decayed? Well NO MORE! Or at least, LESS LIKELY! &lt;green&gt;Sunder &lt;ForestGreen&gt;is now equipped with a few more aliases to help alleviate this problem!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;Simply input the alias you want to use and then either let &lt;green&gt;Sunder &lt;ForestGreen&gt;fill your empty vials, bandages, or rags or consume them into your fluidcache. If you are new to Aetolia, make sure you read &lt;green&gt;HELP FLUIDCACHE &lt;ForestGreen&gt;if you have not already!")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Keep in mind that these aliases will not buy anything for you. Please refer to &lt;DeepSkyBlue&gt;sunder help shops &lt;ForestGreen&gt;to see the aliases that will purchase bulk items for you!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;venoms                &lt;ForestGreen&gt;First buy the rags you need for combat and type &lt;DeepSkyBlue&gt;venoms")
cecho("\n                      &lt;ForestGreen&gt;to have &lt;green&gt;Sunder &lt;ForestGreen&gt;fill your rags for you. You can search this")
cecho("\n                      &lt;ForestGreen&gt;alias in your scripts to change which venoms you want it to fill!")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;unvenom               &lt;ForestGreen&gt;Just what it says! Typing &lt;DeepSkyBlue&gt;unvenom &lt;ForestGreen&gt;will fluidcache consume")
cecho("\n                      &lt;ForestGreen&gt;all the venoms from your rags!")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;fillvials             &lt;ForestGreen&gt;This alias will fill the vials in your inventory from your fluidcache.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;unfillvials           &lt;ForestGreen&gt;Like &lt;DeepSkyBlue&gt;unvenom&lt;ForestGreen&gt;, this alias will consume the elixirs")
cecho("\n                      &lt;ForestGreen&gt;in your vials back into your fluidcache.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;fillbandages          &lt;ForestGreen&gt;This will fill the clean bandages in your inventory with the poultices")
cecho("\n                      &lt;ForestGreen&gt;from your fluidcache.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;unfillbandages        &lt;ForestGreen&gt;Again... same as the other 'un' aliases, but for poultices.")
cecho("\n&lt;MediumSeaGreen&gt;---------------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (F|f)luidcache$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Shop Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;SHOPS &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;Purchasing necessary items from shops can be a bit mundane, but NO MORE! Often you will find yourself buying many refills or masses of pills - to help combat this, &lt;green&gt;Sunder &lt;ForestGreen&gt;includes a few aliases to help make that less painful!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;The first thing you need to do is find a shop. You can do this by going to any city (including Esterport!) and using &lt;DeepSkyBlue&gt;PATH TRACK DIRECTORY&lt;ForestGreen&gt;. This will take you to the directory where you can peruse all the shops in that city (think of it like a search engine). From there you can &lt;DeepSkyBlue&gt;DIRECTORY &lt;ForestGreen&gt;'&lt;DeepSkyBlue&gt;item&lt;ForestGreen&gt;' to see which shop is carrying the item(s) you need. If you have MXP turned on, you can click on the vnum for the shop you want or &lt;DeepSkyBlue&gt;PATH TRACK vnum &lt;ForestGreen&gt;to get there.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Once you are in a shop, you will simply need to put in the alias for the items you wish to purchase and let &lt;green&gt;Sunder &lt;ForestGreen&gt;do the rest!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;buypills #            &lt;ForestGreen&gt;Pills! Typing &lt;DeepSkyBlue&gt;buypills &lt;ForestGreen&gt;followed by an amount will buy that amount")
cecho("\n                      &lt;ForestGreen&gt;of every type of pill! EXAMPLE: &lt;DeepSkyBlue&gt;buypills 500 &lt;ForestGreen&gt;will buy &lt;LimeGreen&gt;500 &lt;ForestGreen&gt;of each pill.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;fillcache # type      &lt;ForestGreen&gt;Fluidcache! Just use &lt;DeepSkyBlue&gt;fillcache &lt;ForestGreen&gt;followed by the number of times")
cecho("\n                      &lt;ForestGreen&gt;you want to buy a refill and what type of refill you want to buy.")
cecho("\n                      &lt;ForestGreen&gt;The types are: &lt;DeepSkyBlue&gt;venoms&lt;ForestGreen&gt;, &lt;DeepSkyBlue&gt;poultices&lt;ForestGreen&gt;, and &lt;DeepSkyBlue&gt;elixirs&lt;ForestGreen&gt;. EXAMPLE: &lt;DeepSkyBlue&gt;fillcache") 
cecho("\n                      &lt;DeepSkyBlue&gt;10 elixirs &lt;ForestGreen&gt;will purchase &lt;LimeGreen&gt;10 &lt;ForestGreen&gt;refills of each type of elixir. The purchase")
cecho("\n                      &lt;ForestGreen&gt;line may be gagged, so just check your FC before and after purchasing!")
cecho("\n                      &lt;LimeGreen&gt;**NOTE** &lt;ForestGreen&gt;This will buy the amount of refills, so to fill your cache(&lt;LimeGreen&gt;1500&lt;ForestGreen&gt;)")
cecho("\n                      &lt;ForestGreen&gt;you will only need to purchase &lt;LimeGreen&gt;30 &lt;ForestGreen&gt;refills!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (S|s)hops$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Fishing Help File</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;FISHING &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;ForestGreen&gt;Our &lt;green&gt;Sunder &lt;ForestGreen&gt;fishing system has been put together from several different systems, and will help you with your fishing milestones or just when you want to kick back and relax to earn some gold. The first thing you will want to do is set the amount of max fish you want to catch using &lt;DeepSkyBlue&gt;sunder maxfish # &lt;ForestGreen&gt;and the amount of fish currently in your bucket using &lt;DeepSkyBlue&gt;sunder fishbucket #&lt;ForestGreen&gt;. Once this is done just turn on the autofisher and let &lt;green&gt;Sunder &lt;ForestGreen&gt;do the rest. You will notice that all the spam has been removed, but it is still working and will notify you when it turns off due to reaching the maxfish amount or if the fishing hole is empty.")
cecho("\n")
cecho("\n&lt;red&gt;Consider this your warning: &lt;ForestGreen&gt;The folks who upkeep Sunder do not, by any means, condone or suggest using Sunder to do things while you are AFK or otherwise unable to attend to your character. From HELP AUTOMATION -&gt; FULLY automating quests and hunting - with movement and all actions included in the triggers - are allowed so long as one is present at the computer, as well as gambling automation. Please do not abuse what is being given to you without regard for the admin stance.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n&lt;ForestGreen&gt;1. Put up your wielded items manually and wield your pole.\n")
cecho("&lt;ForestGreen&gt;2. Go to a fishing hole.\n")
cecho("&lt;ForestGreen&gt;3. Do '&lt;DeepSkyBlue&gt;FISHING DISCERN&lt;ForestGreen&gt;' to make sure you see fish. This will\n")
cecho("&lt;ForestGreen&gt;   track the hole type, vnum, and what fish you see automatically\n")
cecho("&lt;ForestGreen&gt;   in a database it creates on the first time you use it.\n")
cecho("&lt;ForestGreen&gt;4. If you can fish there and there are fish, type in '&lt;DeepSkyBlue&gt;afish&lt;ForestGreen&gt;'\n") 
cecho("&lt;ForestGreen&gt;   to turn on the auto-fisher.\n")
cecho("&lt;ForestGreen&gt;5. If you run out of fish in this hole, it will turn off fishing on\n")
cecho("&lt;ForestGreen&gt;   its own. You can also type in '&lt;DeepSkyBlue&gt;afish&lt;ForestGreen&gt;' to turn it off.\n")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;afish                       &lt;ForestGreen&gt; Turns the auto-fisher off/on")
cecho("\n&lt;DeepSkyBlue&gt;sunder maxfish &lt;amount&gt;  &lt;ForestGreen&gt;    Set and check the max amount of fish you want to catch.")
cecho("\n&lt;DeepSkyBlue&gt;sunder fishbucket &lt;amount&gt; &lt;ForestGreen&gt;  Set and check the amount of fish in your bucket.\n                             Using &lt;DeepSkyBlue&gt;sunder fishbucket clear &lt;ForestGreen&gt;will set the amount to '&lt;green&gt;0&lt;ForestGreen&gt;'")
cecho("\n&lt;DeepSkyBlue&gt;fishing search ??        &lt;ForestGreen&gt;    You can search for a water hole type, or fish, from holes you've\n                             discerned.")
cecho("\n&lt;DeepSkyBlue&gt;fishing search full ??       &lt;ForestGreen&gt;If you prepend &lt;DeepSkyBlue&gt;info&lt;ForestGreen&gt; or &lt;DeepSkyBlue&gt;full&lt;ForestGreen&gt; it displays complete info instead of\n                             abridged.")
cecho("\n&lt;DeepSkyBlue&gt;fgo ?? &lt;ForestGreen&gt;                      Search and path to a specific fishing hole. EX: &lt;DeepSkyBlue&gt;fgo vortex&lt;ForestGreen&gt;.")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (F|f)ishing$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Name database help file</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;Name Database &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;-------------------------------------------")
cecho("\n&lt;ForestGreen&gt;The name databse that &lt;green&gt;Sunder&lt;ForestGreen&gt; utilizes will be familiar to many of you who have come from other IRE games, including the utilization and coloring effects. See below for aliases to toggle certain items and general upkeep of the names contained.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;Please note that you do NOT need to utilize the highlighting if you do not want to, but you absolutely do need the name database for other functions of &lt;green&gt;Sunder&lt;ForestGreen&gt;.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;------------")
cecho("\n&lt;ForestGreen&gt;By default, the name database should be installed when you set everything up. You can either make your own database of names as you go, or check on the discord and see if there's an updated list - you'll probably wind up with 1000+ names!")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;sndb settings         &lt;ForestGreen&gt;Shows you current color configuration of everyone.")
cecho("\n&lt;DeepSkyBlue&gt;sndb hl               &lt;ForestGreen&gt;Toggles the highlighting of names on/off.")
cecho("\n&lt;DeepSkyBlue&gt;sndb hl &lt;org&gt; &lt;color&gt; &lt;ForestGreen&gt;Change your custom color config per city.")
cecho("\n&lt;DeepSkyBlue&gt;As a note --          Enemy highlighting isn't functional yet but is being worked on.")
cecho("\n&lt;DeepSkyBlue&gt;qwp                   &lt;ForestGreen&gt;Parse the who list to add new names.")
cecho("\n&lt;DeepSkyBlue&gt;whois &lt;person&gt;        &lt;ForestGreen&gt;Shows basic info like level and class. Currently disabled.")
cecho("\n&lt;tomato&gt;Please don't use this to metagame. Self police.")
cecho("\n&lt;DeepSkyBlue&gt;honors &lt;person&gt;       &lt;ForestGreen&gt;Update one individual person. Not as useful due to API changes.")
cecho("\n&lt;DeepSkyBlue&gt;sndb clearout         &lt;ForestGreen&gt;Remove unranked/people below level 50.")
cecho("\n&lt;DeepSkyBlue&gt;sndb redo             &lt;ForestGreen&gt;Re-check everyone in the database.")
cecho("\n")
cecho("\n&lt;ForestGreen&gt;There are some more functions in the scripts for use in your code for checking city/class/if they exist in the database etc.")

cecho("\n&lt;MediumSeaGreen&gt;-------------------------------------------")

--[[
sndb settings - Shows basic settings information
sndb install - Initial install alias, otherwise unused

sndb hl - Highlight Names
sndb hl (org) (colour) - Change highlighting of a particular city
sndb hlprio (org|enemies) - Change highlight priority between cities/enemies
sndb ehl (i|u|b) - Change format of enemy highlighting (italics/bold/underline)
 -- Enemy highlighting isn't functional yet but is being worked on.

qwp - Parse online people. As a failsafe, it won't print if there's unchecked people. Just use it again once it's checked them.
whois (person) - Prints information pertaining to a person.
honours (person) - Will honours as per usual, but also check them via API.
sndb clearout - Remove unranked/low level people (under 50).
sndb redo - Will re-honours everyone currently in the database.


sndNDB_getColour(person) - Useful for highlighting; will return the colour of the person's city.
sndNDB_Exists(person) - Will tell you if they're tracked by the NDB yet.

sndNDB_getClass(person)
sndNDB_getCitizenship(person) - Both self-explanatory.
sndNDB_isCitizenOf(city, person) - Will return true if they're a citizen of X city.

]]</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (N|n)amedb$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder Utilities Index</name>
								<script>cecho("&lt;CadetBlue&gt;Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;UTILITIES &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;green&gt;Sunder &lt;ForestGreen&gt;has several different utilities that are quite useful! Below is a summarized list that will direct you to the correct files so that you can become familiar with them and reference back to them at any time!")
cecho("\n")
cecho("\n&lt;MediumTurquoise&gt;To view the following &lt;green&gt;Sunder &lt;MediumTurquoise&gt;help files, use &lt;DeepSkyBlue&gt;sunder help &lt;MediumTurquoise&gt;&lt;filename&gt;!")
cecho("\n&lt;DeepSkyBlue&gt;Vermin               &lt;ForestGreen&gt;Explantion on &lt;green&gt;Sunder's &lt;ForestGreen&gt;vermin autobasher!")
cecho("\n&lt;DeepSkyBlue&gt;Fishing              &lt;ForestGreen&gt;Explantion on how to use &lt;green&gt;Sunder's &lt;ForestGreen&gt;fishing utilities!")
cecho("\n&lt;DeepSkyBlue&gt;Shops                &lt;ForestGreen&gt;Quick aliases to make purchasing easier!")
cecho("\n&lt;DeepSkyBlue&gt;Fluidcache           &lt;ForestGreen&gt;Aliases to consume and fill vials/rags/bandages!")
cecho("\n&lt;DeepSkyBlue&gt;Who                  &lt;green&gt;Sunder's &lt;ForestGreen&gt;WHO parsing system and how it works!")
cecho("\n&lt;DeepSkyBlue&gt;Questing             &lt;ForestGreen&gt;Helpful questing aliases (no more pesky kestrels following you around!)")
cecho("\n&lt;DeepSkyBlue&gt;Namedb               &lt;ForestGreen&gt;All the commands for the databse.")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (U|u)tilities$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Offense/defense helpfiles</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder PK helpfile</name>
								<script>cecho("&lt;CadetBlue&gt;Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;PvP&lt;CadetBlue&gt; help file!")
cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n&lt;green&gt;Sunder &lt;ForestGreen&gt;has several built in ways for every class to be, at some level, useful. Even if it is just automatically attacking a target with a bashing attack. &lt;green&gt;Sunder &lt;ForestGreen&gt;is not and will not be updated with the best 1v1 PvP methods, nor will requests for 1v1 specific items be given time. The intent of Sunder has been and always will be the ability for the average player to get into the PvP scene at the lowest level and be able to participate in team scenarios.")
cecho("\n")
cecho("\n&lt;red&gt;Some of the classes have decently fine-tuned aliases (Syssin, Templar) due to the original creator  spending time in those classes. Remember that these were built on the effort of another player and they do not speak to your own skill or development. Using them to beat people at the low or middle tier of skill level does not indicate that you are improving. If you are interested in learning to PvP in the 1v1 arena, your best bet is to examine what is built here and expand or change it as opposed to relying on it without modification. These are public offenses and people can and will abuse their access to them to make it easy to beat you.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;DeepSkyBlue&gt;ls &lt;person&gt;                         &lt;ForestGreen&gt;Choose your target caller(s)")
cecho("\n&lt;DeepSkyBlue&gt;ls stine vaessa bob                 &lt;ForestGreen&gt;Example of listening to more than one person.")
cecho("\n&lt;DeepSkyBlue&gt;loc                                 &lt;ForestGreen&gt;Need help?! Call out your place in the world over web!")
cecho("\n&lt;DeepSkyBlue&gt;acl                                 &lt;ForestGreen&gt;Toggle calling of afflictions over web.")
cecho("\n&lt;DeepSkyBlue&gt;tcl                                 &lt;ForestGreen&gt;Toggle calling of targets over web.")
cecho("\n&lt;DeepSkyBlue&gt;toggles disperse &lt;none/callers/all&gt; &lt;ForestGreen&gt;Automatic dispersing of writhe affs.")
cecho("\n                                    &lt;ForestGreen&gt;Default none. Not always necessary.")
cecho("\n")
cecho("\n&lt;green&gt;Sunder&lt;ForestGreen&gt; target calling - instead of the old rigid lists found within Sunder, we will now utilize the custom, on the fly lists along with our name database to be able to cycle through targets effectively in the room. Please see &lt;DeepSkyBlue&gt;sunder help calling&lt;ForestGreen&gt; for more information on using that.")
cecho("\n")
cecho("\n&lt;green&gt;Sunder&lt;ForestGreen&gt; has the following aliases available for you to use in combat. There may be more aliases included in the settings, but not always!")

if snd.class == "Monk" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Will use mind batter to hit with affs, if enemy prone then wrench.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;head &lt;white&gt;              - Used for damage, does not deviate unless target is proned.")
cecho("\n&lt;goldenrod&gt;Limbs:")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Used to hit different limbs, will change combo depending on parry.")
elseif snd.class == "Shapeshifter" then
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Goes for the head. Each time. Big damage/bleeding if not parried.")
cecho("\n&lt;goldenrod&gt;Limb:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Straight limb breaks into jawlocks.")
cecho("\n &lt;green&gt;insta&lt;white&gt;              - Goes for quarter kills. Check AB QUARTER for more information.")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Utilizes slash to delay limb breaks, good for pushing level 2 breaks.")
elseif snd.class == "Infiltrator" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Basic dstab w/venoms. No hypnosis.")
cecho("\n &lt;green&gt;magic&lt;white&gt;              - More advanced, geared towards magic, uses hypnosis.")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - More advanced, geared towards physical, uses hypnosis.")
cecho("\n &lt;green&gt;kl&lt;white&gt;                 - 1v1 offense. Does not snap for you as that requires timing.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Straight damage.")
elseif snd.class == "Wayfarer" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;legs &lt;white&gt;              - Uses lob to pressure leg breaks, will try to dropstrike if able.")
cecho("\n &lt;green&gt;lock&lt;white&gt;               - Experimental skirmish route to seal locks w/slaughter and muddled.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Sensitivity/sight to support transfix. Boosted halt to keep people in room.")
cecho("\n &lt;green&gt;gaff&lt;white&gt;               - Group affs w/preference toward venom lock. Slaughter if prone w/sensitivity.")
cecho("\n &lt;green&gt;bleed&lt;white&gt;              - Bleed focused to assist Templar w/hemorrhage.")
elseif (snd.class == "Templar" or snd.class == "Revenant") then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ret &lt;white&gt;               - The 1v1 standard. Lock into retribution.")
cecho("\n &lt;green&gt;newb&lt;white&gt;               - Basic venoms, no bladefire empowerments, no vorpal.")
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Use a 2h weapon to zeal/dsw someone and do physical damage.")
cecho("\n &lt;green&gt;bleed&lt;white&gt;              - Bleed focused affs into hemorrhage.")
cecho("\n&lt;goldenrod&gt;Limb:")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Two small bludgeon weapons to deal bruising and limb damage.")
elseif snd.class == "Shaman" or snd.class == "Alchemist" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;ms &lt;white&gt;                - Straight vinelash w/venoms.")
cecho("\n &lt;green&gt;storm&lt;white&gt;              - Works toward stormtouched, then goes for lightning damage.")
cecho("\n &lt;green&gt;supp&lt;white&gt;               - Aff-lock support.")
elseif snd.class == "Sentinel" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;salve&lt;white&gt;              - Works towards frozen w/limb breaks. Need raloth/icewyrm.")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Venom lock into spinecut death sequence.")
cecho("\n &lt;green&gt;group&lt;white&gt;              - Group focused small aff pool into spinecut.")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Just venoms, no dhuriv attacks, perfect for starters.")
elseif snd.class == "Luminary" or snd.class == "Earthcaller" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;git&lt;white&gt;                - Damage kill with aff stacking and overwhelm.")
cecho("\n &lt;green&gt;mana&lt;white&gt;               - Straight mana sap.")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Smite + chasten.")
cecho("\n &lt;green&gt;ms&lt;white&gt;                 - Sight into tfix/overwhelm.")
elseif snd.class == "Ascendril" or snd.class == "Bloodborn" then
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;damage&lt;white&gt;             - Damage kill.")
cecho("\n &lt;green&gt;fire&lt;white&gt;               - Set them ablaze and watch them burn.")
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;affs&lt;white&gt;               - Build affs!")
cecho("\n &lt;green&gt;solo&lt;white&gt;               - Push limb damage/frozen for a shatter!")
elseif snd.class == "Zealot" or snd.class == "Ravager" then
cecho("\n&lt;goldenrod&gt;Damage:")
cecho("\n &lt;green&gt;dmg&lt;white&gt;                - Damage kill.")
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;fire&lt;white&gt;               - Focus on ablaze for Zealot support I guess? idk")
elseif snd.class == "Archivist" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build mental affs and go for unravel")
elseif snd.class == "Carnifex" or snd.class == "Warden" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Overall limb route")
cecho("\n &lt;green&gt;legs&lt;white&gt;               - Specifically for legs!")
elseif snd.class == "Indorani" or snd.class == "Oneiromancer" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs! High Aeon/Hourglass prio.")
elseif snd.class == "Praenomen" or snd.class == "Akkari" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;mez&lt;white&gt;                - Work on siphoning mana for annihilate and mesmerize!")
elseif snd.class == "Teradrim" or snd.class == "Tidesage" then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Overall limb route")
elseif snd.class == "Sciomancer" or snd.class == "Runecarver"  then
cecho("\n&lt;goldenrod&gt;Afflictions:")
cecho("\n &lt;green&gt;dmg &lt;white&gt;               - Damage kill")
cecho("\n &lt;green&gt;aff&lt;white&gt;                - Build affs!")
cecho("\n &lt;green&gt;limbs&lt;white&gt;              - Overall limb route via grip and erupt, adds in transfix/chill")
cecho("\n &lt;green&gt;gdmg &lt;white&gt;               - Damage kill with singularity/morass involved")
cecho("\n &lt;green&gt;gaff&lt;white&gt;                - Build affs with singularity/morass involved!")
cecho("\n &lt;green&gt;sing1&lt;white&gt;                - Make your singularity/morass")
cecho("\n &lt;green&gt;gc&lt;white&gt;                   - Shoot your cannon/mortify at your target nearby")
end

cecho("\n&lt;MediumSeaGreen&gt;------------------------------------------")
cecho("\n")
cecho("\n")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (p|P)(K|k)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder defenses helpfile</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;Defenses &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;Upkeep of defenses can be a tedious task, especially those stripped after a certain amount of time or if you just don't want to worry about it. To that end, Sunder is equipped to be able to help you upkeep defenses in a mildly intelligent manner via checking what skills you have access. The system uses GMCP to automatically check your skills, as well as checking your tattoos and raceskills, to accurately and easily keep track.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;HOW IT WORKS!")
cecho("\n&lt;MediumSeaGreen&gt;-------------")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;defup                 &lt;ForestGreen&gt;Turn on automatic defense upkeep of defenses.")
cecho("\n&lt;DeepSkyBlue&gt;kd &lt;defname&gt;          &lt;ForestGreen&gt;Toggle a specific defense upkeep on/off.")
cecho("\n")
cecho("\n&lt;green&gt;Sunder&lt;ForestGreen&gt; also has the built in capability to utilize the antiquated artifact goggles, making a number of defs instantaneous and without cost.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;toggle goggles        &lt;ForestGreen&gt;Toggle Sunder using goggles or not.")
cecho("\n&lt;DeepSkyBlue&gt;mygoggles #           &lt;ForestGreen&gt;Tell Sunder what level your goggles are set to.")
cecho("\n")
cecho("\n")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (D|d)efenses$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Sunder calling helpfile</name>
								<script>cecho("&lt;CadetBlue&gt; Welcome to the &lt;green&gt;Sunder &lt;DeepSkyBlue&gt;Calling &lt;CadetBlue&gt;help file!")
cecho("\n&lt;MediumSeaGreen&gt;----------------------------------------")
cecho("\n&lt;ForestGreen&gt;In previous iterations of Sunder, we used static calling lists that were susceptible to failure due to not having new people updated, people switching tethers, needing different orders, etc. To that end, we have updated our methodology and you may find all of the ways to manipulate targets below.")
cecho("\n")
cecho("\n&lt;CadetBlue&gt;ALIASES")
cecho("\n&lt;MediumSeaGreen&gt;-------")
cecho("\n&lt;DeepSkyBlue&gt;tcl                   &lt;ForestGreen&gt;Turn on automatic target calling.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;atl [name]&lt;ForestGreen&gt;            Add targets in the priority you specify.")
cecho("\n              &lt;white&gt;        Example &gt; &lt;red&gt;atl ezreal nazeebo meepo")
cecho("\n&lt;DeepSkyBlue&gt;atp [name] [position]&lt;ForestGreen&gt; Add target with/without a # value for priority.")
cecho("\n              &lt;white&gt;        Example &gt; &lt;red&gt;atp tryndamere 1")
cecho("\n&lt;DeepSkyBlue&gt;tlist&lt;ForestGreen&gt;                 List your targets in web for others.")
cecho("\n&lt;DeepSkyBlue&gt;atlc&lt;ForestGreen&gt;                  Clears your targets out to start over.")
cecho("\n&lt;DeepSkyBlue&gt;atr&lt;ForestGreen&gt;                   Remove a singular target from your list.")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;nt&lt;ForestGreen&gt;                    Manually skip to the next target in line.")
cecho("\n")</script>
								<command></command>
								<packageName></packageName>
								<regex>^(S|s)under (H|h)elp (C|c)alling$</regex>
							</Alias>
						</AliasGroup>
						<Alias isActive="yes" isFolder="no">
							<name>^sunder help directory$</name>
							<script>cecho("\n&lt;MediumSeaGreen&gt;Found: &lt;white&gt;"..getMudletHomeDir())</script>
							<command></command>
							<packageName></packageName>
							<regex>^sunder help find my profile$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Vitals</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>setup</name>
							<script>snd.send("config wrapwidth 0")
snd.send("config auto_outc on")
snd.send("config combatmessages on")
snd.send("config affliction_view on")
snd.send("config simple_diag on")
snd.send("config curemsgs default")
snd.send("config fishnumbers on")
snd.send("gathering on")
if not sndNDB.installed then
  sndNDB_Install()
  sndNDB.highlightNames = false
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^\?setup$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>toggles</name>
							<script>cecho("&lt;white&gt;Toggles:")
for tog in pairs(snd.toggles) do
 if snd.toggles[tog] then
  cecho("&lt;green&gt;\n"..string.title(tog))
 else
  cecho("&lt;red&gt;\n"..string.title(tog))
 end
end
send(" ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^togs$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Toggles</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>lighting</name>
							<script>snd.toggle("lighting")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(lgt|toggle lighting|toggle pipes)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>on</name>
							<script>snd.toggles.active = true
cecho("&lt;green&gt;Sunder is ON!")
send(" ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndon$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>off</name>
							<script>snd.toggles.active = false
cecho("&lt;red&gt;Sunder is OFF!")
send(" ")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sndoff$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>calling</name>
							<script>snd.clearTargetList()
snd.toggle("calling")
</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tcl|toggle calling)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>affcalling</name>
							<script>snd.toggle("affcalling")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(acl|toggle affcalling)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>gallop</name>
							<script>snd.toggle("gallop")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tgl|toggle gallop)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>newb basher</name>
							<script>snd.toggle("newbie")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tnewb|toggle newbie)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>parry</name>
							<script>snd.toggle("parrying")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tpry|toggle parry)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>attack echoes</name>
							<script>snd.toggle("atkecho")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tatk|toggle attack echo)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>listening</name>
							<script>if matches[2] == "off" then
  if snd.toggles.listening then
    snd.toggle("listening")
    snd.callers = {}
  end
else
  if not snd.toggles.listening then
    snd.toggle("listening")
  end
  snd.toggles.listening = true
  if snd.offense_loaded then
    snd.callers = {}
    for name in string.gmatch(matches[2], '([^ ]+)') do
      table.insert(snd.callers, string.title(name))
    end
    cecho("&lt;white&gt;Listening to: &lt;green&gt;"..table.concat(snd.callers, "&lt;white&gt;, &lt;green&gt;").."&lt;white&gt;!")
    send(" ")
  else
    cecho("&lt;white&gt;Listening &lt;green&gt;ON&lt;white&gt;!")
    send(" ")
  end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^ls (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>rockharvest</name>
							<script>snd.toggle("rockharvest")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tr|toggle rockharvest)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>lightning</name>
							<script>snd.toggle("lightning")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tlgt|toggle lightning)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>dash</name>
							<script>snd.toggle("dash")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tds|toggle dash)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Chameleon</name>
							<script>snd.toggle("chameleon")</script>
							<command></command>
							<packageName></packageName>
							<regex>^(tcm|toggle chameleon)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Questing</name>
							<script>snd.toggle("questing")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle questing$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Ylem Goggles</name>
							<script>snd.toggle("goggles")
snd.goggle_update()
  
</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle goggles$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Goggle level</name>
							<script>if matches[3] then
  cecho("&lt;red&gt;You have set your ylem goggles level to:&lt;orange_red&gt; "..matches[3].."&lt;red&gt;.")
  snd.toggles.goggle_level = tonumber(matches[3])
  snd.goggle_update()
else
  cecho("&lt;red&gt;You have set your ylem goggles level to:&lt;orange_red&gt; "..snd.toggles.goggle_level.."&lt;red&gt;.")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(mygoggles|mygoggles (\d+))$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Dome auto use</name>
							<script>snd.toggle("dome")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle dome$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Auto check plants</name>
							<script>snd.toggle("plants")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle plants$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Cobra bashing</name>
							<script>snd.toggle("cobra")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle cobra$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Gag non target curing</name>
							<script>snd.toggle("nontargetgags")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle non target gagging$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>auto reject lust</name>
							<script>snd.toggle("auto_reject")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle reject$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Purge/Purify/Panacea</name>
							<script>if snd.class == "Praenomen" or snd.class == "Akkari" then
	snd.toggle("purify")
elseif snd.class == "Carnifex" or snd.class == "Warden" then
	snd.toggle("purge")
elseif snd.class == "Shaman" or snd.class == "Alchemist" then
	snd.toggle("panacea")
else
  cecho("\nYou have no purging ability for your class that needs to be turned on.")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^pon$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Prism Bashing</name>
							<script>if snd.class == "Ascendril" or snd.class == "Bloodborn" then
	snd.toggle("prism")
else
  cecho("\nYou cannot prism bash in this class.")
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^prism$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Enrich Bashing</name>
							<script>if snd.class == "Ascendril" or snd.class == "Bloodborn" then
	snd.toggle("enrich")
else
  cecho("\nYou cannot enrich bash in this class.")
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^prism$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Hidden afflictions diagnose count</name>
							<script>if matches[2] then
  cecho("&lt;red&gt;You will diagnose at &lt;yellow&gt;"..matches[2].."&lt;red&gt; hidden afflictions.")
  snd.toggles.diagaffs = tonumber(matches[2])
else
  cecho("&lt;red&gt;You currently diagnose at&lt;yellow&gt; "..snd.toggles.diagaffs.."&lt;red&gt; hidden afflictions.")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>(?i)^diagaffs(?: (\d+))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Chameleon Targets</name>
							<script>local people = matches[2]:gsub(",", "")
peopleTable = matches[2]:split(" ")
snd.toggles.chameleonPeople = peopleTable
snd.message("Will try to chameleon as one of: "..table.concat(snd.toggles.chameleonPeople, ", "))</script>
							<command></command>
							<packageName></packageName>
							<regex>(?i)^chamtargets (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>target rune for tidesage/teradrim</name>
							<script>snd.toggles.targetrune = not snd.toggles.targetrune
if snd.toggles.targetrune then
  cecho("&lt;red&gt;Will now factor in targeting rune for tidesage/teradrim limb damage.")
else
  cecho("&lt;red&gt;Will no longer factor in targeting rune for tidesage/teradrim limb damage.")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle targetrune$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>^toggle alerts$</name>
							<script>snd.toggles.alerts = not snd.toggles.alerts
if snd.toggles.alerts then
  cecho("&lt;red&gt;Will now display alerts on your prompt.")
else
  cecho("&lt;red&gt;Will no longer display alerts on your prompt.")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle alerts$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>set 200 race</name>
							<script>local ascendantTypes =
{
  "none",
  -- "adherent", split this up into the flavors below
  "seraph",
  "aetherial",
  "titan",
  "glacian",
  "nocturn",
  "sagani",
  "chaos",
  "tiarna",
  "astral",
  
  "instinct",
  "malevolent",
  "strife",
  "corruption",
  "memory",
  "tyranny",
}
if table.contains(ascendantTypes, matches[2]:lower()) then
  snd.toggles.ascendedtype = matches[2]:lower()
  cecho("&lt;red&gt;Ascended race set to: "..matches[2]:lower())
else
  cecho("&lt;red&gt;Invalid ascended race. Options are: "..table.concat(ascendantTypes, ", "))
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle ascendant (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Set your mount</name>
							<script>snd.toggles.mount = matches[2]
cecho("&lt;red&gt;Your mount's ID has been set to: "..snd.toggles.mount)</script>
							<command></command>
							<packageName></packageName>
							<regex>^snd mount (\d+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Toggle predator Laesan bashing</name>
							<script>if matches[2] then
  snd.toggles.laesan = matches[2] == "on"
else
  snd.toggles.laesan = not snd.toggles.laesan
end
cecho("&lt;red&gt;Will use &lt;orange&gt;"..(snd.toggles.laesan and "Laesan" or "Ein-Fasit") .." &lt;red&gt;while bashing!")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle laesan(?: (on|off))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Automount</name>
							<script>snd.toggle("automount")</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle automount$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Misc</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>mount</name>
							<script>snd.mount()</script>
							<command></command>
							<packageName></packageName>
							<regex>^mnt$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>dismount</name>
							<script>snd.dismount()</script>
							<command></command>
							<packageName></packageName>
							<regex>^dm$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>shield tattoo</name>
							<script>if snd.toggles.attacking then
 snd.send("undefend")
end

if snd.toggles.attacking == true then snd.toggle("attacking") end
if snd.toggles.bashing == true then snd.toggle("bashing") end
if snd.toggles.fasthunt == true then snd.toggle("fasthunt") end


if snd.have_aff("paresis") then
 snd.send("firstaid elevate paresis")
end
if snd.class == "Carnifex" then
 snd.send("qeb soul shield")
else
 snd.send("qeb touch shield tattoo")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^ts$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>wield none</name>
							<script>snd.send("wipe left"..snd.sep.."wipe right"..snd.sep.."secure left"..snd.sep.."secure right"..snd.sep.."wear tower"..snd.sep.."wear buckler"..snd.sep.."wear shield")
</script>
							<command></command>
							<packageName></packageName>
							<regex>^wnon$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>directions</name>
							<script>if snd.toggles.calling and not snd.toggles.fasthunt then
 snd.send("qeb get monolith"..snd.sep..matches[2]..snd.sep.."drop monolith")
else
 snd.send("qeb "..matches[2])
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^(n|e|s|w|ne|nw|se|sw|in|up?|out|o|d|down)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>group</name>
							<script>snd.group = {}
if matches[2] ~= "none" then
 for name in string.gmatch(matches[2], '([^ ]+)') do
  table.insert(snd.group, string.title(name))
 end
end
display(snd.group)</script>
							<command></command>
							<packageName></packageName>
							<regex>^grp (.*)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Landmarks w/descriptions</name>
							<script>snd.landmarks_descs =
  {
    {"tear", "The tear of Lleis"},
    {"orrery", "The Celestial Orrery"},
    {
      "Tara, Cosmina, Derryk, Sylvos, Tiber, Gladius, Gloom, Derban, Grothgar, Grollum, Smirnick, Smythe, Helfga, Naggamantex, Glixx, Quelzar, Sisters, Hecuba",
      "Fengard Mobs",
    },
    {"Tellimerius, Broondac, Belmith, Marcello, Axel, Makkali, Mamba, Tolonar", "Milestone mobs"},
    {"hg", "Outside the Hunting Grounds"},
    {"Nighteye, Claw, Shade, Staghelm, Silence, Rose, Ivory, Rowan, HGShrine", "Approximate locations of hunting grounds items."},
    {"herolt", "Herolt's quiz"},
    {"farkle", "The permanent farkle table"},
    {"lineconnect", "The game of Line Connect"},
    {"poker", "The poker table in esterport"},
    {"safari", "Giovelli's Safari"},
    {"boggard", "Boggard in esterport. Takes black ylem."},
    {"staging", "Where your city gathers for combat."},
    {"training", "Your city's training room."},
  }
for _, landmark in ipairs(snd.landmarks_descs) do
  cecho("\n&lt;sandy_brown&gt;" .. string.title(landmark[1]) .. ": &lt;aquamarine&gt;" .. landmark[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^snd landmarks$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>landmarks</name>
							<script>local tmp = getRoomUserData(1, "gotoMapping")
if not tmp or tmp == '' then
  tmp = "[]"
end
local temp, maptable = yajl.to_value(tmp), {}
for k, v in pairs(temp) do
  maptable[k:lower()] = v
end
local destinationRoom = maptable[matches[2]:lower()]
snd.moving_to = (destinationRoom or snd.landmarks[matches[2]] or matches[2])

snd.core()</script>
							<command></command>
							<packageName></packageName>
							<regex>^pt (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>walkarea</name>
							<script>-- Used to quickly walk through an area without touching the mobs, use triggers to define ways to stop as in the Orrery Globe method
snd.toggles.fastwalk = true
snd_walkArea()
snd.move()
</script>
							<command></command>
							<packageName></packageName>
							<regex>^walkarea$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>target</name>
						<script>snd.setTarget(matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^t (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>stop attacking</name>
						<script>snd.stap()</script>
						<command></command>
						<packageName></packageName>
						<regex>^stap$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>target call over web - individual targets</name>
						<script>send("wt Target: "..matches[2])
snd.target = string.title(matches[2])
echo("Target: "..snd.target)
send(" ")
raiseEvent("sunder_enemy_affs_updated")

if snd.target_trigger_id then killTrigger(snd.target_trigger_id) end
snd.target_trigger_id = tempTrigger(snd.target, [[selectString("]] .. snd.target .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.target_trigger_idlow then killTrigger(snd.target_trigger_idlow) end
snd.target_trigger_idlow = tempTrigger(string.lower(snd.target), [[selectString("]] .. string.lower(snd.target) .. [[", 1) fg("DarkOrchid") resetFormat()]])
if snd.offense_loaded then
 snd.reset_target()
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^tc (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>reset sunder</name>
						<script>snd.reset_me()
snd.defenses_loaded = false
snd.crescentable = true
snd.target_aegis = false
snd.growbal = 0
snd.infiltrate = false
</script>
						<command></command>
						<packageName></packageName>
						<regex>^rst$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Bashing</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Autobashing</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>move</name>
							<script>snd.move()</script>
							<command></command>
							<packageName></packageName>
							<regex>^move$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>initiate</name>
							<script>--Set the correct path, whether that is by checking level or using input from the user.
if matches[2] then
  snd.runPath(matches[2])
else
  local level = ""
  for check in string.gmatch(gmcp.Char.Status.level, '[%d]+') do
    if level == "" then
      level = tonumber(check)
    end
  end
  if level &gt; 93 then
    snd.runPath("high")
  else
    snd.runPath("low")
  end
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^gogo(?: (\w+))?$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>start bashing</name>
						<script>if not snd.toggles.bashing then snd.toggle("bashing") end
snd.room_clear = true
snd.defenses.def_vigor.needit = true
snd.send("leading on")</script>
						<command></command>
						<packageName></packageName>
						<regex>^aa$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>stop bashing</name>
						<script>if snd.toggles.bashing then snd.toggle("bashing") end
snd.defenses.def_vigor.needit = false
cecho("&lt;green&gt;Bashing OFF!")
if snd.toggles.fasthunt then
 snd.toggles.fasthunt = false
 echo("\nFasthunt OFF!")
end
snd.send("queue clear")
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^ast$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>fasthunt</name>
						<script>snd.toggle("fasthunt")</script>
						<command></command>
						<packageName></packageName>
						<regex>^ff$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Followbash</name>
						<script>if matches[2] then
  snd.followbashing = matches[2]:lower()
  snd.message("Will attack when "..snd.followbashing:title().." attacks\n")
  if not snd.toggles.followbash then
    snd.toggle("followbash")
  end
else
  if snd.toggles.followbash or snd.followbashing then
    snd.toggle("followbash")
  else
    snd.message("fb &lt;person&gt; to set the person to followbash")
  end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^fba(?: (\w+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>generics</name>
						<script>snd.toggle("generics")

cecho("\n&lt;red&gt;The use of a generic word (ie 'kelki' instead of 'kelki1234' or just '1234') brings with it a certain amount of risk. You risk hitting an NPC that you may not mean to, including quest mobs with the same short name, or boss mobs in the same vein. This is your warning. Please use it when appropriate.")
</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle generic$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>orbs</name>
						<script>snd.send("activate amberorb"..snd.sep.."activate greenorb"..snd.sep.."activate whiteorb"..snd.sep.."activate crimsonorb"..snd.sep.."activate ceruleanorb")
</script>
						<command></command>
						<packageName></packageName>
						<regex>^orbs$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>chocolates</name>
						<script>snd.send("eat mint"..snd.sep.."eat hazelnut"..snd.sep.."eat caramel"..snd.sep.."eat strawberry")</script>
						<command></command>
						<packageName></packageName>
						<regex>^choc$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>See if Sunder has path</name>
						<script>if sunder_areaPaths[gmcp.Room.Info.area] then 
  snd.message("We've got a path here")
else
  snd.message("No path here.")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^check this area$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>single attack</name>
						<script>if snd.bashing.target ~= snd.target then snd.bashing.target = snd.target end
battack = ""
for k,v in pairs(snd.class_list) do
  if snd.class_list[k].class == snd.class then
  if snd[v.class:lower().."_bash_override"] then
    snd[v.class:lower().."_bash_override"]()
  else
    v.func()
  end
  snd.send("qeb stand"..snd.sep..battack)
  end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^f$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Move to next area</name>
						<script>if snd.toggles.fasthunt then

  local area = sunder_areaPaths[gmcp.Room.Info.area]
  local last_room_of_this_area = ""

  for k, v in pairs(area) do
    if v == "ptcity" then
      last_room_of_this_area =  k
    end
  end

  mmp.gotoRoom(bot.path[last_room_of_this_area])

end</script>
						<command></command>
						<packageName></packageName>
						<regex>^move to next area$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Apothecary mode</name>
						<script>if matches[2] then
  snd.apothecaryEnabled = matches[2] == "on"
else
  snd.apothecaryEnabled = not snd.apothecaryEnabled
end

cecho("&lt;green&gt;Apothecary mode: &lt;orange&gt;"..(snd.apothecaryEnabled and "ON!" or "OFF!"))</script>
						<command></command>
						<packageName></packageName>
						<regex>^snd apothecary(?: (on|off))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Healing</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>defense toggle</name>
						<script>local defense = matches[2]:lower()
if not string.find(defense, "def_") then
 defense = "def_"..defense
end
if snd.defenses[defense] then --check for exact match
  if snd.defenses[defense].needit then
   snd.defenses[defense].needit = false
   snd.message("No longer keeping &lt;red&gt;"..defense.."&lt;white&gt;.", "echo")
   send(" ")
  else
   snd.defenses[defense].needit = true
   snd.message("Now keeping &lt;green&gt;"..defense.."&lt;white&gt;.", "echo")
   send(" ")
  end
  return
end
for i in pairs(snd.defenses) do --if no exact match found, search for approx matches
 if string.find(i, defense) then
  if snd.defenses[i].needit then
   snd.defenses[i].needit = false
   snd.message("No longer keeping &lt;red&gt;"..i.."&lt;white&gt;.", "echo")
   send(" ")
  else
   snd.defenses[i].needit = true
   snd.message("Now keeping &lt;green&gt;"..i.."&lt;white&gt;.", "echo")
   send(" ")
  end
  return
 end
end
snd.message("No such defense as &lt;red&gt;"..matches[2].."&lt;white&gt;!", "echo")
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^kd (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>defense options</name>
						<script>local selection = ""
if matches[3] then 
  selection = matches[3] 
else
  if snd.class == "None" and snd.toggles.ascendedtype ~= "none" then
    selection = snd.toggles.ascendedtype
  else
    selection = snd.class:lower()
  end
end

if snd.class == "Ascendril" then send("simultaneity") end
if snd.class == "Bloodborn" then send("prowess") end
if snd.class == "Archivist" then snd.send("incite lens") end
if snd.class == "Sciomancer" then snd.send("channel shadow") end
if snd.class == "Runecarver" then snd.send("straddle line") end
if snd.class == "Teradrim" then snd.send("golem call") end
if snd.class == "Tidesage" then snd.send("synth call") end
if snd.class == "Voidseer" then snd.send("foment longing") end
if snd.toggles.active == false then
  display("Sunder is currently off. Please SNDON to turn it back on! If you wish to remove this behavior, alter it in the 'general deaths' trigger.")
else
  send("def", false)
end

snd.load_def(selection)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(ldd (.*)|defup)$</regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Toggles</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="no" isFolder="no">
							<name>healing</name>
							<script>snd.toggle("healing")</script>
							<command></command>
							<packageName></packageName>
							<regex>^hl$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>defenses</name>
							<script>snd.toggle("defenses")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tdf$</regex>
						</Alias>
						<Alias isActive="no" isFolder="no">
							<name>clotting</name>
							<script>snd.toggle("clotting")</script>
							<command></command>
							<packageName></packageName>
							<regex>^tclt$</regex>
						</Alias>
						<Alias isActive="no" isFolder="no">
							<name>standing</name>
							<script>snd.toggle("standing")</script>
							<command></command>
							<packageName></packageName>
							<regex>^ss$</regex>
						</Alias>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Offense</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>template</name>
						<script>--[[ This is a blank attack template, just the most basic outline of what an offense
 alias should look like. ]]--
if snd.class == "MyClass" then -- set this to the class this alias is for
snd.starting_attack() -- always run this first, it does some important resets
function snd.attack_function() -- defining this function is how we tell sunder what to do
	if not snd.waiting.queue then -- don't want to spam, this will prevent that
		-- declare some important variables, you can add more here if you need
		local string = ""
		local call = ""

		-- attack logic goes here, you need to set string = whatever you want to send
		string = "punch "..snd.target
		call = "wt Afflicting "..snd.target..": DEATH"

		-- check if we need to prepend an affliction call
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Generic</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>my location</name>
							<script>snd.send("wt I'm at ("..gmcp.Room.Info.num..") '"..gmcp.Room.Info.name.."' in "..gmcp.Room.Info.area)</script>
							<command></command>
							<packageName></packageName>
							<regex>^loc$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>eye sigil</name>
							<script>snd.set_queue("quickwield both eyesigil"..snd.sep.."relax grip"..snd.sep.."throw eye at ground"..snd.sep.."qeb secure eyesigil")</script>
							<command></command>
							<packageName></packageName>
							<regex>^eye$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>web tattoo</name>
							<script>if snd.toggles.attacking then snd.toggle("attacking") end
if matches[2] == nil then
 snd.send("qeb touch web "..snd.target)
else
 snd.send("qeb touch web "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^tw(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>brazier</name>
							<script>if matches[2] == nil then
 snd.attack("touch brazier "..snd.target)
else
 snd.attack("touch brazier "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^brz(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>tentacle</name>
							<script>if matches[2] == nil then
 snd.attack("touch tentacle "..snd.target)
else
 snd.attack("touch tentacle "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^tnt(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>orrery</name>
							<script>snd.send("infuse orrery with "..snd.faction)</script>
							<command></command>
							<packageName></packageName>
							<regex>^or$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>breathe fire</name>
							<script>snd.send("qeb breathe fire at icewall")</script>
							<command></command>
							<packageName></packageName>
							<regex>^bf$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>prism</name>
							<script>if matches[2] == nil then
 snd.attack("touch prism "..snd.target)
else
 snd.attack("touch prism "..matches[2])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^prm(?: (.*))?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>shackle</name>
							<script>snd.send("qeb refining shackle eld")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sh$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>tumble</name>
							<script>snd.send("qeb tumble "..matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^tm (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>dummy mode</name>
							<script>snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = "punch "..snd.target
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
</script>
							<command></command>
							<packageName></packageName>
							<regex>^dummy$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>swing up</name>
							<script>if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb swing up")</script>
							<command></command>
							<packageName></packageName>
							<regex>^su$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>swing down</name>
							<script>if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb swing down")</script>
							<command></command>
							<packageName></packageName>
							<regex>^sd$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Quick translocator alias</name>
							<script>if snd.toggles.attacking then snd.toggle("attacking") end
if snd.toggles.bashing then snd.toggle("bashing") end
if snd.toggles.fasthunt then snd.toggle("fasthunt") end
snd.send("qeb use translocator")</script>
							<command></command>
							<packageName></packageName>
							<regex>^ut$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>disperse</name>
							<script>if matches[2] ~= "none" and matches[2]~= "callers" and matches[2]~="all" then 
	send(" ")
	cecho("\n&lt;red&gt;Not a viable choice! &lt;white&gt;Enter either: &lt;red&gt;none &lt;white&gt;| &lt;yellow&gt;callers &lt;white&gt;| &lt;green&gt;all")
	snd.toggles.dispersing = false
else
	snd.disperse = matches[2]
	if snd.disperse == "none" then
		snd.toggles.dispersing = false
		send(" ")
		cecho("\n&lt;red&gt;Dispersing is now off.")
	else
		snd.toggles.dispersing = true
		send(" ")
		cecho("\n&lt;red&gt;Dispersing: &lt;green&gt;"..snd.disperse)
	end
  raiseEvent("sunder_update_toggles")
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^toggle disperse (\w+)$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Neutral</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Monk</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>afflictions</name>
									<script>if snd.class == "Monk" then
snd.giving = {
"paresis",
"stupidity",
"anorexia",
"recklessness",
"dizziness",
"confusion",
"epilepsy",
"hallucinations"
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  if snd.used.shield then
   string = "combo "..snd.target.." sck ucp ucp"
	elseif snd.proned() and not snd.checkAff("writhe_impaled") then
	 if snd.parried_limb == "left leg" then
	  string = "combo "..snd.target.." wrt right leg hfp right hfp right"
	 else
	  string = "combo "..snd.target.." wrt left leg hfp left hfp left"
	 end
  else
	 one = "none"
	 two = "none"
	 three = "none"
   for i in pairs(snd.giving) do
    if not snd.checkAff(snd.giving[i]) then
     if one == "none" then
      one = snd.giving[i]
		 elseif two == "none" then
		  two = snd.giving[i]
		 elseif three == "none" then
		  three = snd.giving[i]
     end
    end
   end
	 if three ~= "none" then
    string = "mind batter "..snd.target.." "..one.." "..two.." "..three
		if snd.toggles.affcalling and not snd.target_gone then
		 string = "wt Battering "..snd.target..": "..one..", "..two..", "..three..snd.sep..string
		end
	 else
    if snd.parried_limb == "head" then
     string = "combo "..snd.target.." sdk hkp hkp"
		else
	   string = "combo "..snd.target.." wwk ucp ucp"
		end
	 end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Monk" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  if snd.used.shield then
   string = "combo "..snd.target.." sck ucp ucp"
	elseif snd.proned() and not snd.checkAff("writhe_impaled") then
	 if snd.parried_limb == "left leg" then
	  string = "combo "..snd.target.." wrt right leg hfp right hfp right"
	 else
	  string = "combo "..snd.target.." wrt left leg hfp left hfp left"
	 end
  elseif snd.parried_limb == "head" or not snd.no_parry() then
	 string = "combo "..snd.target.." sdk hkp hkp"
	else
	 string = "combo "..snd.target.." wwk ucp ucp"
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>head</name>
									<script>if snd.class == "Monk" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
    if snd.used.shield then
      string = "combo "..snd.target.." sck ucp ucp"
    elseif (snd.checkAff("left_leg_crippled") or snd.checkAff("right_leg_crippled")) then
      string = "swk "..snd.target
    elseif snd.checkAff("fallen") and not snd.checkAff("writhe_impaled") then
	    string = "bbt "..snd.target
	  else
	    string = "combo "..snd.target.." wwk ucp ucp"
    end
    
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^head$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limbs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs</name>
									<script>if snd.class == "Monk" then
 
  snd.starting_attack()
 
  function snd.attack_function()
    if not snd.waiting.queue then
 
      local string = "" -- this will populate with our attack
      local call = "" -- call your aff you're pushing
      local kai = tonumber(gmcp.Char.Vitals.kai) 
 
      snd.giving = {"stupidity", "anorexia", "paresis", "recklessness", "confusion", "epilepsy"}      
 
      snd.mindAffliction = "none"
      for i in pairs(snd.giving) do
        if not snd.checkAff(snd.giving[i]) then
          if snd.mindAffliction == "none" then
            snd.mindAffliction = snd.giving[i]
            if snd.mindAffliction == "confusion" then
              snd.mindAffliction = "confuse"
            elseif snd.mindAffliction == "paresis" then
              snd.mindAffliction = "paralyse"
            end
          end
        end
      end
 
      if snd.used.shield then
        tekuraKick = "sck"
      elseif snd.stance ~= "tiger" then
		     tekuraKick = "tgs"
	    elseif (snd.checkAff("writhe_impaled") or snd.checkAff("head_mangled") or snd.limb_dmg["head"] &gt;= 66.66) and snd.checkAff("fallen") then
        tekuraKick = "axk"
      elseif snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"},1) and not snd.checkAff("fallen") then
        tekuraKick = "swk"
      elseif snd.limb_dmg["left leg"] &lt; 33.33 and (snd.no_parry() or snd.parried_limb ~= "left leg") and snd.resto_limb ~= "left leg" then
        tekuraKick = "snk left"
	    elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.no_parry() or snd.parried_limb ~= "right leg") and snd.resto_limb ~= "right leg" then
        tekuraKick = "snk right"
	    else 
        tekuraKick = "wwk"
      end
 
      if snd.parried_limb ~= "left leg" and snd.limb_dmg["left leg"] &lt; 33.33 and snd.resto_limb ~= "left leg" then
        firstPunch = "hfp left"
      elseif snd.parried_limb ~= "right leg" and snd.limb_dmg["right leg"] &lt; 33.33 and snd.resto_limb ~= "right leg" then
        firstPunch = "hfp right"
      else
		    firstPunch = "hkp"
      end
 
      if snd.parried_limb ~= "left leg" and snd.limb_dmg["left leg"] &lt; 33.33 and snd.resto_limb ~= "left leg" then
        secondPunch = "hfp left"
      elseif snd.parried_limb ~= "right leg" and snd.limb_dmg["right leg"] &lt; 33.33 and snd.resto_limb ~= "right leg" then
        secondPunch = "hfp right"
      else
		    secondPunch = "hkp"
      end
 
      if snd.theytumbling then
        string = "slt "..snd.target
      elseif snd.checkAff("fallen") and not snd.checkAff("writhe_impaled") and snd.checksomeAffs({"left_leg_broken", "right_leg_broken", "right_arm_broken", "left_arm_broken"},1) then
        string = "bbt "..snd.target
      elseif kai &gt;= 40 and not snd.enemy_restoration_balance and snd.checksomeAffs({"left_leg_broken", "right_leg_broken", "right_arm_broken", "left_arm_broken"},1) then
			     string = "kai cripple "..snd.target
      else
        string = "combo "..snd.target.." "..tekuraKick.." "..firstPunch.."  "..secondPunch..snd.sep.." mind "..snd.mindAffliction.." "..snd.target
        call = "wt Afflicting "..snd.target..": "..snd.mindAffliction..snd.sep
      end
 
      if snd.toggles.affcalling and not snd.target_gone then
        string = call..string
		  end
 
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
 
    end
 
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Shapeshifter</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not snd.checkAff("writhe_thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not snd.checkAff("necklock") then
		 mangled = limbs[limb]
		elseif not snd.checkAff("writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 end
	end
	if snd.used.shield then
	 string = "touch hammer "..snd.target
	-- check if we can jawlock now!
  elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then
	 if string.find(mangled, "leg") then
	  string = "jawlock thigh of "..snd.target
	 elseif mangled == "head" then
	  string = "jawlock neck of "..snd.target
	 elseif mangled == "torso" or string.find(mangled, "arm") then
	  string = "jawlock armpit of "..snd.target
	 end
	elseif broken ~= "nothing" and not snd.jawlocked then
	 string = "destroy "..broken.." of "..snd.target
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>group quarter</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not snd.checkAff("writhe_thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not snd.checkAff("writhe_necklock") then
		 mangled = limbs[limb]
		elseif not snd.checkAff("writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 end
	end
  
	if snd.used.shield then
	 	string = "pounce "..snd.target
	elseif snd.theyran then
	  string = "neckdrag "..snd.target..snd.neckdragdir
	-- check if we can jawlock now!
	elseif snd.checksomeAffs({"writhe_thighlock", "writhe_necklock", "writhe_armpitlock"}, 1) and not snd.jawlocked then
	 string = "quarter "..snd.target
	elseif broken ~= "nothing" and not snd.jawlocked then
	 string = "destroy "..broken.." of "..snd.target
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^insta$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
	mangled = "nothing"
	broken = "nothing"
	crippled = "nothing"
	for limb in pairs(limbs) do
	 if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  if string.find(limbs[limb], "leg") and not snd.checkAff("writhe_thighlock") then
	   mangled = limbs[limb]
		elseif limbs[limb] == "head" and not snd.checkAff("writhe_necklock") then
		 mangled = limbs[limb]
		elseif not snd.checkAff("writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 mangled = limbs[limb]
		end
	 elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   broken = limbs[limb]
		end
	 elseif snd.checkAff(limbs[limb]:gsub(" ","_").."_crippled") and snd.limb_dmg[limbs[limb]] &lt; 33.33 and crippled == "nothing" then
	  if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
		 crippled = limbs[limb]
		end
	 end
	end
	if snd.used.shield then
	 	string = "pounce "..snd.target
	elseif snd.theyran then
	  string = "neckdrag "..snd.target..snd.neckdragdir
	elseif snd.jawlocked then
	 string = "rupture "..snd.target
	-- check if we can jawlock now!
  elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then
	 if string.find(mangled, "leg") then
	  string = "jawlock thigh of "..snd.target
	 elseif mangled == "head" then
	  string = "jawlock neck of "..snd.target
	 elseif mangled == "torso" or string.find(mangled, "arm") then
	  string = "jawlock armpit of "..snd.target
	 end
	elseif broken ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then
	 string = "mangle "..broken.." of "..snd.target
	elseif crippled ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then
	 string = "destroy "..crippled.." of "..snd.target
	elseif snd.resto_limb ~= "none" and snd.defenses.def_fury.state ~= "deffed" then
	 string = "combo "..snd.target.." hamstring left hamstring right"
	else
	 left = "nothing"
	 right = "nothing"
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 if right == "nothing" then
		  right = limbs[limb]
		 elseif left == "nothing" then
		  left = limbs[limb]
		 end
		end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 string = "combo "..snd.target.." slash "..left.." slash "..right
	 if snd.defenses.def_fury.state == "deffed" then
	  string = "pounce "..snd.target..snd.sep..string
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>More In-Depth Quartering</name>
									<script>--Note, this one is using more than just slashing to do limb damage. So, it's a bit more effective at getting quarters.

if snd.class == "Shapeshifter" then
	snd.starting_attack()
	function snd.attack_function()
 		if not snd.waiting.queue then
  		local function feralityConvert(limb)
    		if string.find(limb, "leg") then
      		return "hamstring "..limb:gsub(" leg", "")
    		elseif string.find(limb, "arm") then
      		return "rend "..limb:gsub(" arm", "")
    		elseif limb == "torso" then
      		return "bodypunch"
    		elseif limb == "head" then
      		return "skullwhack"
    		else
      		return "slash "..limb
    		end
  		end
  -- list what limbs to hit
  		limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
			mangled = "nothing"
      damaged = "nothing"
			broken = "nothing"
  		for limb in pairs(limbs) do
	 			if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then
	  			if string.find(limbs[limb], "leg") and not table.contains(snd.target_has, "writhe_thighlock") then
	   				mangled = limbs[limb]
					elseif limbs[limb] == "head" and not table.contains(snd.target_has, "writhe_necklock") then
		 				mangled = limbs[limb]
					elseif not table.contains(snd.target_has, "writhe_armpitlock") and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
		 				mangled = limbs[limb]
					end
	 			elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then
	  			if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") and snd.parried_limb ~= limbs[limb] then
	   				broken = limbs[limb]
					end
	 			end
  		end  --end of for loop  
  		for _, aff in pairs(snd.target_has) do
      	if string.find(aff, "_crippled") and snd.limb_status[aff:gsub("_crippled ", "")] ~= "crippled" and snd.limb_status[aff:gsub("_crippled", "")] ~= "mangled" and snd.parried_limb ~= aff:gsub("_crippled", "") then
        	damaged = aff:gsub("_crippled", "")
          if damaged == "left_leg" then
            damaged = "left leg"
          elseif damaged == "right_leg" then
            damaged = "right leg"
          elseif damaged == "left_arm" then
            damaged = "left arm"
          elseif damaged == "right_arm" then
            damaged = "right arm"
          end
          break
        end
      end  --end of for loop  
			
			if snd.used.shield then
	 			string = "pounce "..snd.target
				
			elseif snd.checksomeAffs({"writhe_thighlock", "writhe_necklock", "writhe_armpitlock"},1) and not snd.jawlocked then -- check if we can jawlock now!
	 			string = "quarter "..snd.target
  		elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then -- Checking for Jawlock opertunities
				if string.find(mangled, "leg") and not snd.checkAff("groinrip")then
	  			string = "jawlock thigh of "..snd.target
	 			elseif mangled == "head" and not snd.checkAff("throatrip") then
	  			string = "jawlock neck of "..snd.target
	 			elseif mangled == "torso" or string.find(mangled, "arm") and not snd.checkAff("spleenrip") then
	  			string = "jawlock armpit of "..snd.target
				end --end of attempts to get a lock in
	 
			elseif broken ~= "nothing" and not snd.jawlocked then
	 			string = "destroy "..broken.." of "..snd.target
			elseif damaged ~= "nothing" and not snd.jawlocked then
        string = "mangle "..damaged.." of "..snd.target
      else
	 			left = "nothing"
	 			right = "nothing"
	 			for limb in pairs(limbs) do
	  			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		 				if right == "nothing" then
		  				right = feralityConvert(limbs[limb])
		 				elseif left == "nothing" then
		  				left = feralityConvert(limbs[limb])
		 				end
					end
	 			end
	 			if left == "nothing" then -- we only found one limb to hit
	  			left = right -- double up!
	 			end
	 			string = "combo "..snd.target.." "..left.." "..right
			end -- end of primary attacking function setup
				
  		if string ~= snd.last_attack and not snd.waiting.queue then
   			snd.last_attack = string
   			snd.send("qeb "..snd.last_attack)
   			snd.waiting.queue = true
   			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  	end--end the actual attack rolling
 	end --end the main code
end --end the function
--and sending it to the mud
snd.attack_function()   
end -- end the class </script>
									<command></command>
									<packageName></packageName>
									<regex>^quart$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>raw damage</name>
									<script>if snd.class == "Shapeshifter" then
snd.starting_attack()
function snd.attack_function()
  if not snd.waiting.queue then
    if snd.used.shield then
   		string = "pounce "..snd.target
		elseif snd.theyran then
			string = "neckdrag "..snd.target..snd.neckdragdir
		elseif snd.defenses.def_fury.state == "deffed" then
	    string = "pounce "..snd.target..snd.sep.."combo "..snd.target.." jugular jugular"
	  elseif not snd.no_parry() then
	 		string = "combo "..snd.target.." bodypunch jugular"
    elseif not snd.parried_limb == "head" then
      string = "combo "..snd.target.." jugular skullwhack"
		else
	    string = "combo "..snd.target.." jugular jugular"
	  end
    
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>1v1</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Semi 1v1 Route</name>
									<script>if snd.class == "Shapeshifter" then    
	snd.starting_attack()
		
	function snd.attack_function()        
 		if not snd.waiting.queue then                    
  		local function feralityConvert(limb)            
    		if string.find(limb, "leg") then              
    		  return "hamstring "..limb:gsub(" leg", "")
    		elseif string.find(limb, "arm") then
      		return "rend "..limb:gsub(" arm", "")
    		elseif limb == "torso" then
      		return "bodypunch"         
    		elseif limb == "head" then
      		return "skullwhack"
    		else
      		return "slash "..limb
    		end
  		end
	
-- Making the table of limbs and damage
  		limbs = {"left leg", "right leg", "left arm", "right arm", "head", "torso"}
			mangled = "nothing"
			broken = "nothing"
			crippled = "nothing"
			
			for limb in pairs(limbs) do
	 			if snd.limb_status[limbs[limb]] == "mangled" and mangled == "nothing" then -- checking for mangle opertunities
		  		if string.find(limbs[limb], "leg") and not snd.checksomeAffs({"groinrip","writhe_thighlock"},1) then	
				 		mangled = limbs[limb]
					elseif limbs[limb] == "head" and not snd.checksomeAffs({"throatrip","writhe_necklock"},1) then
				 		mangled = limbs[limb]
					elseif not snd.checksomeAffs({"spleenrip","writhe_armpitlock"},1) and (limbs[limb] == "torso" or string.find(limbs[limb], "arm")) then
				 		mangled = limbs[limb]
					end
			 	elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 66.66 and broken == "nothing" then -- Updating the table with current breaks
			  	if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
	   				broken = limbs[limb]
					end
	 			elseif snd.limb_status[limbs[limb]] == "broken" and snd.limb_dmg[limbs[limb]] &lt; 33.33 and crippled == "nothing" then -- Updating the table with current cripples
	  			if string.find(limbs[limb], "leg") or string.find(limbs[limb], "arm") then
				 		crippled = limbs[limb]
					end
	 			end
			end  --end of for loop       
	
	 		if snd.used.shield then           
		 		string = "pounce "..snd.target
			elseif snd.theyran then
			   string = "neckdrag "..snd.target..snd.neckdragdir
		  elseif snd.checksomeAffs({"groinrip", "throatrip", "spleenrip"},2) then --nom nom nom
				string = "devour "..snd.target            
			elseif snd.checkAff("writhe_necklock") and not snd.checkAff("throatrip") then-- Checking for Rip opertunities
				string = "throatrip "..snd.target          
			elseif snd.checkAff("writhe_armpitlock") and not snd.checkAff("spleenrip") then-- Checking for Rip opertunities
				string = "spleenrip "..snd.target
			elseif snd.checkAff("writhe_thighlock") and not snd.checkAff("groinrip") then-- Checking for Rip opertunities
				string = "groinrip "..snd.target
			elseif snd.proned() and mangled ~= "nothing" and not snd.jawlocked then -- Checking for Jawlock opertunities
				if string.find(mangled, "leg") and not snd.checkAff("writhe_thighlock")then
	  			string = "jawlock thigh of "..snd.target
	 			elseif mangled == "head" and not snd.checkAff("writhe_necklock") then
	  			string = "jawlock neck of "..snd.target
	 			elseif mangled == "torso" or string.find(mangled, "arm") and not snd.checkAff("writhe_armpitlock") then
	  			string = "jawlock armpit of "..snd.target
				end
			elseif broken ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then  -- Limb escalation
		 		string = "destroy "..broken.." of "..snd.target   
			elseif crippled ~= "nothing" and not snd.jawlocked and snd.defenses.def_fury.state ~= "deffed" then -- Limb escalation
	 			string = "mangle "..crippled.." of "..snd.target

			else -- build the limb breaks if nothing else major going on
	 			left = "nothing"       
	 			right = "nothing"          
	 			for limb in pairs(limbs) do
	  			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and not table.contains(snd.target_has, limb.."_crippled") then  
		 				if right == "nothing" then  
		  				right = limbs[limb]
		 				elseif left == "nothing" then  
		  				left = limbs[limb]
		 				end
					end
	 			end
	 
--Doubling up the same attack if only one is found
	 			if left == "nothing" then 
	  			left = right 
	 			end
	 
-- using the feraility convert with what we've made so far
	 			string = "combo "..snd.target.." "..feralityConvert(left).." "..feralityConvert(right)  
			end -- end of primary attacking function setup
	
--queuing it so we can keep the attack rolling
  	if string ~= snd.last_attack and not snd.waiting.queue then   
   		snd.last_attack = string 
   		snd.send("qeb "..snd.last_attack)
   		snd.waiting.queue = true
   		tempTimer(snd.delay(), [[snd.waiting.queue = false]])  
  	end--end the actual attack rolling
 	end --end the main code
end --end the function
--and sending it to the mud
snd.attack_function()   
end -- end the class if
</script>
									<command></command>
									<packageName></packageName>
									<regex>^kll$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Syssin</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Infiltrator" then
snd.send("quickwield left whip"..snd.sep.."quickwield right shield")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Infiltrator" then
snd.send("quickwield left dirk"..snd.sep.."quickwield right shield")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield bow</name>
									<script>snd.send("secure left"..snd.sep.."secure right"..snd.sep.."wear buckler"..snd.sep.."bowstance")</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbow$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Assassination</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>yank</name>
									<script>if snd.class == "Infiltrator" then
if matches[2] == "" then
 snd.send("qeb quickwield left whip"..snd.sep.."yank "..snd.target)
else
 snd.send("qeb quickwield left whip"..snd.sep.."yank "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bk(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>backstab</name>
									<script>if snd.class == "Infiltrator" then
if matches[2] == "" then
 snd.send("qeb quickwield left dirk"..snd.sep.."backstab "..snd.target.." curare")
else
 snd.send("qeb quickwield left dirk"..snd.sep.."backstab "..matches[2].." curare")
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bs(.*)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Subterfuge</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>darkflood</name>
									<script>if snd.class == "Infiltrator" then
snd.send("qeb conjure darkflood")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^df$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>abduct</name>
									<script>if snd.class == "Infiltrator" then
if matches[2] == nil then
 snd.send("qeb abduct "..snd.target)
else
 snd.send("qeb abduct "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^at(?: (.*))?$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Vortex</name>
									<script>if snd.class == "Infiltrator" then
  if matches[2] == nil then
    snd.send("qeb worm vortex "..snd.target)
  else
    snd.send("qeb worm vortex "..matches[2])
  end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^vt(?: (.*))?$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Hypnosis</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>hypnotise</name>
									<script>if snd.class == "Infiltrator" then
snd.send("qeb hypnotise "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^hyp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>shadow mark</name>
									<script>if snd.class == "Infiltrator" then
snd.send("qeb shadow mark numbness "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^sm$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>hypnotise stack</name>
									<script>if snd.class == "Infiltrator" then
snd.hypno_stack = {
 "hypochondria",
 "clumsiness",
 "impatience",
 "lethargy",
 "hypochondria",
 "impatience",
 "clumsiness",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy",
 "claustrophobia",
 "impatience",
 "agoraphobia"
}
snd.hyp = 0
snd.last_hypno = 0
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.hypno == "open" or snd.hypno == "none" then
   if snd.hypno == "none" then
    string = "hypnotise "..snd.target..snd.sep
   end
   if #snd.hypno_stack &gt; snd.last_hypno + 1 then
    snd.hyp = snd.last_hypno+1
    string = string.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
   else
    string = "seal "..snd.target.." 3"
   end
  else
   snd.message("Good to go! KILL THEM NOW!")
  end
 end
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^hypno$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>hypnotise magic stack</name>
									<script>if snd.class == "Infiltrator" then
snd.hypno_stack = {
 "hypochondria",
 "clumsiness",
 "impatience",
 "confusion",
 "hypochondria",
 "impatience",
 "clumsiness",
 "confusion",
 "impatience",
 "loneliness",
 "confusion",
 "claustrophobia",
 "impatience",
 "agoraphobia"
}
snd.hyp = 0
snd.last_hypno = 0
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.hypno == "open" or snd.hypno == "none" then
   if snd.hypno == "none" then
    string = "hypnotise "..snd.target..snd.sep
   end
   if #snd.hypno_stack &gt; snd.last_hypno + 1 then
    snd.hyp = snd.last_hypno+1
    string = string.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
   else
    string = "seal "..snd.target.." 3"
   end
  else
   snd.message("Good to go! KILL THEM NOW!")
  end
 end
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^hypm$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>suggest</name>
									<script>if snd.class == "Infiltrator" then
local shorthand = {
["clu"] = "clumsiness",
["imp"] = "impatience"
}
if shorthand[matches[2]] then
 snd.send("qeb suggest "..snd.target.." "..shorthand[matches[2]])
else
 cecho("&lt;red&gt;No such affliction!")
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^sg (\w+)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Infiltrator" then
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"left_leg_crippled",
		"right_leg_crippled",
		"hearing",
		"sensitivity",
		"voyria"
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"clumsiness",
		"asthma",
		"paresis",
		"slickness",
		"stupidity",
		"anorexia",
		"hearing",
		"sensitivity",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		-- let's move on
		elseif (snd.checkAff("anorexia") or snd.checkAff("allergies") or snd.checkAff("vomiting") or snd.checkAff("mental_disruption")) 
					and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if not snd.used.shield and snd.balance.backstab then
				string = "quickwield left dirk"..snd.sep.."backstab "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			elseif snd.used.shield or snd.used.rebounding then
				-- we can use a venom with flay if we're flaying shield
				string = "quickwield left whip"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Infiltrator" then
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")

		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		"left_leg_crippled",
		"right_leg_crippled",
		"left_arm_crippled",
		"right_arm_crippled",
		"stupidity",
		"anorexia",
		"hearing",
		"sensitivity",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",

}
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		-- let's move on
		elseif (snd.checkAff("anorexia") or snd.checkAff("allergies") or snd.checkAff("vomiting") or snd.checkAff("mental_disruption")) 
					and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if not snd.used.shield and snd.balance.backstab then
				string = "quickwield left dirk"..snd.sep.."backstab "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			elseif snd.used.shield or snd.used.rebounding then
				-- we can use a venom with flay if we're flaying shield
				string = "quickwield left whip"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>magic</name>
									<script>if snd.class == "Infiltrator" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "confusion",
 "hypochondria",
 "impatience",
 "vertigo",
 "confusion",
 "impatience",
 "loneliness",
 "confusion"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"left_leg_crippled",
		"right_leg_crippled",
		"hearing",
		"sensitivity",
		"voyria"
		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"weariness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"stupidity", -- not as important, since we're running impatience
		--"vomiting",
		"allergies",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"clumsiness",
		--"dizziness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"weariness",
		"asthma",
		"paresis",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"clumsiness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		elseif not snd.checkAff("numbed_skin") then
			-- they don't have numbness yet
			if snd.used.paste then -- but they have fangbarrier, so we can't give it
				-- we need to flay first
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else -- they don't have fangbarrier - go for it!
				string = "shadow mark numbness "..snd.target
			end
		-- they already have numbness, let's move on
		elseif (snd.checkAff("anorexia") or snd.checkAff("allergies") or snd.checkAff("vomiting") or snd.checkAff("mental_disruption")) 
						and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield or snd.used.rebounding then
				-- we can use a venom with flay if we're flaying shield
				string = "quickwield left whip"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" and table.contains(snd.target_has, "numbed_skin") then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>kill</name>
									<script>if snd.class == "Infiltrator" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "lethargy",
 "hypochondria",
 "impatience",
 "vertigo",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"left_leg_crippled",
		"right_leg_crippled",
		"hearing",
		"sensitivity",
		"voyria"
		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"clumsiness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"stupidity", -- not as important, since we're running impatience
		--"vomiting",
		"allergies",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"clumsiness",
		"asthma",
		"paresis",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		elseif not snd.checkAff("numbed_skin") then
			-- they don't have numbness yet
			if snd.used.paste then -- but they have fangbarrier, so we can't give it
				-- we need to flay first
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else -- they don't have fangbarrier - go for it!
				string = "shadow mark numbness "..snd.target
			end
		-- they already have numbness, let's move on
		elseif (snd.checkAff("anorexia") or snd.checkAff("allergies") or snd.checkAff("vomiting") or snd.checkAff("mental_disruption")) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield or snd.used.rebounding then
				-- we can use a venom with flay if we're flaying shield
				string = "quickwield left whip"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" and table.contains(snd.target_has, "numbed_skin") then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^kl$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>1v1</name>
									<script>if snd.class == "Infiltrator" then
snd.hypno_stack = { -- hypnosis affs, in priority order
 "hypochondria",
 "impatience",
 "loneliness",
 "lethargy",
 "hypochondria",
 "impatience",
 "vertigo",
 "lethargy",
 "impatience",
 "loneliness",
 "lethargy"
}
snd.starting_attack()
function snd.attack_function()
	local string = "" -- this will populate with our attack
	local call = "" -- this will be for affliction calling
	local touse = {} -- this will store the affs we still want to hit with
	local tohit = {} -- this will store the effects from touse
	local extraaff = "delphinium" -- what to use if we used everything else
	-- and how far away we are from a lock
	local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
	if snd.target_locked() then
		snd.giving = {
		"left_leg_crippled",
		"right_leg_crippled",
		"hearing",
		"sensitivity",
		"voyria"
		}
	elseif snd.hypno == "running" then
		snd.giving = { -- the venoms we're going to apply while hypnosis is running, in prioritized order
		--"sight",
		"paresis",
		"clumsiness",
		"asthma",
		"shyness", -- to keep impatience stuck, this buries it
		"slickness",
		"anorexia", -- work harder on the lock than buffer affs, while hypnosis is going
		"stupidity", -- not as important, since we're running impatience
		--"vomiting",
		"allergies",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		"voyria",
		}
	else
		snd.giving = { -- the venoms we're going to apply while hypnosis is building, in prioritized order
		--"sight",
		"clumsiness",
		"asthma",
		"paresis",
		--"squelched",
		"shyness", -- to bury impatience once hypno fires
		--"vomiting", -- stick these two early, to bury scytherus
		"allergies", -- this being the second
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		--"haemophilia",
		--"recklessness",
		"weariness",
		--"dizziness",
		--"voyria",
		}
	end
	if not snd.waiting.queue then -- make sure not to spam
		if not snd.can_arms() then -- this means we have at least one broken arm
			-- so we'll have to bedazzle instead of dstab
			string = "bedazzle "..snd.target
		-- they already have numbness, let's move on
		elseif (snd.checkAff("anorexia") or snd.checkAff("allergies") or snd.checkAff("vomiting") or snd.checkAff("mental_disruption")) and not snd.checkAff("thin_blood") then
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
				snd.flayingfang = true
			else
				-- if they don't yet have scytherus, fangbarrier is down, and they have at least one thing to cover it
				string = "bite "..snd.target.." scytherus"
			end
		elseif snd.target_locked() and snd.checkAff("sensitivity") then
			-- they're locked and ready to be finished off
			if snd.used.paste then
				string = "quickwield left whip"..snd.sep.."flay "..snd.target
			else
				string = "bite "..snd.target.." camus"
			end
		else -- none of the special conditions are met, let's go with a meat-and-potatoes dstab
			-- first and foremost, check if we can lock them with one or two more affs
			if #missing == 1 or (#missing == 2 and not snd.used.shield and not snd.used.rebounding) then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the lists above
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- now we know which venoms we want, let's decide what attack to use
			if snd.used.shield or snd.used.rebounding then
				-- we can use a venom with flay if we're flaying shield
				string = "quickwield left whip"..snd.sep.."wipe left"..snd.sep.."envenom whip with "..tohit[1]..snd.sep.."flay "..snd.target
				call = "wt Afflicting "..snd.target..": "..tohit[1]
			else -- otherwise, we don't need to flay - go full ham!
				string = "quickwield left dirk"..snd.sep.."wipe left"..snd.sep.."dstab "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
			end
		end
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- now let's see if we can append some hypnosis
		if snd.hypno == "open" or snd.hypno == "none" then
			-- 'open' means they're ready for suggestions, 'none' means we haven't started yet
			-- either way, we're going to suggest something now
			if #snd.hypno_stack &gt;= snd.last_hypno + 1 then -- we still have more in the hypno_stack
				snd.hyp = snd.last_hypno+1 -- move on to the next thing
				if snd.hypno == "none" then -- if we haven't hypnotised yet
					string = string..snd.sep.."hypnotise "..snd.target -- do that first
				end
				-- append the suggestion to our attack string
				string = string..snd.sep.."suggest "..snd.target.." "..snd.hypno_stack[snd.hyp]
			elseif snd.hypno == "open" then -- we're at the end of the (hypno) line, and they're not sealed yet
				string = "seal "..snd.target.." 3" -- so seal them up
			end
		elseif snd.hypno == "running" then -- we have an active hypnosis going
			-- just append hypnotise so we don't miss when it ends
			string = string..snd.sep.."hypnotise "..snd.target
		end
	end
	-- anything we can do with shadow balance this round?
	if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
		-- we do have shadow balance and we don't need to hold it for numbness
		if snd.target_locked() and #snd.target_has &gt;= 8 then
			-- the target's locked and affed up, let's hurry the finish along
			string = string..snd.sep.."shadow sleight pall "..snd.target
		elseif not snd.checkAff("void") and snd.hypno ~= "running" then
			-- they aren't under active hypnosis, and not locked - let's void!
			string = string..snd.sep.."shadow sleight void "..snd.target
		else -- they're under hypnosis, but not yet locked, nudge it along with dissipate
			string = string..snd.sep.."shadow sleight dissipate "..snd.target
		end
	end
	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(0.2, [[snd.waiting.queue = false]])
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Infiltrator" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if not snd.used.shield and snd.balance.backstab then
	 string = "quickwield left dirk"..snd.sep.."backstab "..snd.target
  elseif snd.proned() and not snd.used.shield then
   string = "quickwield left whip"..snd.sep.."garrote "..snd.target
  else
	 if snd.used.paste then
	  string = "quickwield left whip"..snd.sep.."flay "..snd.target.." fangbarrier"
	 else
    string = "bite "..snd.target.." camus"
	 end
  end
 if gmcp.Char.Vitals.ability_bal == "1" and gmcp.Char.Vitals.prone == "0" then
	-- we do have shadow balance
  string = string..snd.sep.."shadow sleight pall "..snd.target
 end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Shooting</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>snipe</name>
									<script>if snd.class == "Infiltrator" then
  snd.set_queue("secure dirk"..snd.sep.."secure whip"..snd.sep.."wear buckler"..snd.sep.."bowstance"..snd.sep.."switch normal"..snd.sep.."snipe "..snd.target.." "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^snp (\w+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>meteor</name>
									<script>if snd.class == "Infiltrator" then
  if matches[2] == nil then
    snd.set_queue("secure dirk"..snd.sep.."secure whip"..snd.sep.."wear buckler"..snd.sep.."bowstance"..snd.sep.."switch meteor"..snd.sep.."shoot "..snd.target.." meteor")
  else
    snd.set_queue("secure dirk"..snd.sep.."secure whip"..snd.sep.."wear buckler"..snd.sep.."bowstance"..snd.sep.."switch meteor"..snd.sep.."shoot "..matches[2].." meteor")
  end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^met(?: (.*))?$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>ghost</name>
									<script>if snd.class == "Infiltrator" then
  if matches[2] == nil then
    snd.set_queue("secure dirk"..snd.sep.."secure whip"..snd.sep.."wear buckler"..snd.sep.."bowstance"..snd.sep.."switch ghost"..snd.sep.."shoot "..snd.target)
  else
    snd.set_queue("secure dirk"..snd.sep.."secure whip"..snd.sep.."wear buckler"..snd.sep.."bowstance"..snd.sep.."switch ghost"..snd.sep.."shoot "..matches[2])
  end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gs(?: (.*))?$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Shoot</name>
									<script>if matches[2] == "" then
 snd.send("qeb shoot "..snd.target.." curare")
else
 snd.send("qeb shoot "..matches[2].." curare")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^shoot(.*)$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Wayfarer</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Salve affs priority</name>
									<script>if snd.class == "Wayfarer" then -- Requires dropstrike
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local touse = {}
		local tohit = {}
		local extraaff = "asthma"
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local shatter = false
		local indoors = table.contains(gmcp.Room.Info.details, "indoors")
		local enrage = false
		--local preatk = "qa "..snd.target..snd.sep
    
    if gmcp.Char.Vitals.wield_left == "empty" and gmcp.Char.Vitals.wield_right == "empty" then return end
		
		if tonumber(gmcp.Char.Vitals.fury) &gt;=40 then
			shatter = true -- spam it
		else
			shatter = false
		end

		if tonumber(gmcp.Char.Vitals.fury) &gt;=50 then
			enrage = true
		else
			enrage = false
		end
		
		snd.giving = {
      "left_leg_crippled",
      "right_leg_crippled",
      "left_arm_crippled",
			"right_arm_crippled",
      "anorexia",
      "asthma",
      "slickness",
      "stupidity",
      "paresis",
      "clumsiness",
      "sensitivity",
    }
		if #missing == 2 and not snd.used.shield and not snd.used.rebounding then
			venom = snd.effects[missing[1]]
		elseif #missing == 1 and not snd.used.shield then
			venom = snd.effects[missing[1]]
		end
		
      for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) then
        if not table.contains(touse, snd.giving[i]) then 
          table.insert(touse, snd.giving[i])
                end
          end
      end
        
        for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
        end
		
		while #tohit &lt; 3 do
			table.insert(tohit, extraaff)
		end
		
		if snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		elseif snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		end
		
    
        --Can we do this based on number of affs?
		if snd.aff_count_all() &gt; 8 and not indoors then
			if not snd.used_rebounding and not snd.highjumped then
			string = "highjump"
			elseif snd.highjumped == true then
				string = "axe dropstrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif snd.used_rebounding then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			end
		end

    
        if snd.aff_count_all() &gt; 8 and not indoors and snd.checkAff("sensitivity") and snd.proned() 
    and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) then
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if indoors and snd.checkAff("sensitivity") and snd.proned() and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) then
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if shatter and not snd.checkAff("sensitivity") and not snd.checkAff("weariness") and not snd.enraged then
			string = "fury shatter "..snd.target..snd.sep..string
		end
		
		if enrage == true and not snd.enraged and snd.checkAff("sensitivity") then
			string = "fury enrage "..snd.sep..string
		end
		

		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
		
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wayfarer aff support</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
		local string = ""
		local call = "" 
		local touse = {}
		local tohit = {}

if gmcp.Char.Vitals.wield_left == "empty" and gmcp.Char.Vitals.wield_right == "empty" then return end
		
		local fury_amount = tonumber(gmcp.Char.Vitals.fury)
		local fury = ""

		snd.giving = {
		"asthma",
		"paresis",
    "sensitivity",
		"clumsiness",
		"slickness",
		"left_leg_crippled",
		"right_leg_crippled",
		"anorexia",
		"stupidity",
		"left_leg_crippled",
		"left_arm_crippled",
		"haemophilia",
		"allergies",
		"vomiting",
		"recklessness",
		"sight",
		"shyness",
		"dizziness",
    }
		
--This is a special case to use slaughter to quickly lock someone, with the additional chance 
--of using muddled to seal it long enough for next round. Affs are checked backwards so we can
--use the most necessary first, as they'll be put on top of the stack first.
		
		if snd.checksomeAffs({"slickness","clumsiness", "hypochondria", "weariness", "paresis"}, 2) and snd.checkAff("asthma") then
			if not snd.checkAff("stupidity") then
				if fury_amount &gt;= 60 and tonumber(gmcp.Char.Vitals.ability_bal) then
					fury = "fury shatter "..snd.target.." boost"
				else
					table.insert(snd.giving, 1, "stupidity")
				end
			end

			if not snd.checkAff("anorexia") then
				table.insert(snd.giving, 1, "anorexia")
			end

			if not snd.checkAff("slickness") then
				table.insert(snd.giving, 1, "slickness")
			end
			string = "we gon slaughter this bruh"
		end
-----	
		for i in pairs(snd.giving) do
  		if not snd.checkAff(snd.giving[i]) then
				if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
  		end
  	end
		
		for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
		end
-----
		if snd.used.shield then
			if snd.used.rebounding then
				string = "axe devastate "..snd.target
				call = nil
			else
				string = "axe devastate "..snd.target.." "..tohit[1]
			end
			
		elseif string:find("slaughter") or snd.target_locked() then
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
		
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			
		end
		
		if fury_amount &gt;= 83 and tonumber(gmcp.Char.Vitals.ability_bal) and not snd.checkAff("lethargy") then
			fury = "fury halt "..snd.target
		end

		if fury~= "" then string = fury..snd.sep..string end

-----
		if snd.toggles.affcalling and not snd.target_gone and call ~= nil then
			if string:find("slaughter") then
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			else
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			end
			string = call..string
		end

		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
		
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Limbs w/execute</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()

  if not snd.waiting.queue then
    local string = ""
    local call = ""
		local limb_tohit = ""
    local targ = "nothing"
		local touse = {}
    local tohit = {}
    local execute_check = false
    local fury = tonumber(gmcp.Char.Vitals.fury)
    local distract = false
    if gmcp.Char.Vitals.ability_bal == "1" and fury &gt;=30 then
      distract = true
    end
 
    
	  snd.giving_limbs = {"head", "right leg", "left leg", "left arm", "right arm",}  
    for k, v in pairs(snd.giving_limbs) do
      if snd.limb_status[v] == "healed" and ((snd.parried_limb ~= v and snd.last_struck_limb ~= v) or snd.no_parry() or distract) then
        limb_tohit = v
        break
      end
    end
        
    snd.giving = {
      "left_leg_crippled",
      "right_leg_crippled",
      "left_arm_crippled",
      "right_arm_crippled",
      "anorexia",
      "asthma",
      "slickness",
      "stupidity",
      "paresis",
      "sensitivity",
      "weariness",
      "clumsiness",
    }
    
    for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) then
        if not table.contains(touse, snd.giving[i]) then 
          table.insert(touse, snd.giving[i])
        end
      end
		end
    
    for k, v in pairs(snd.limb_dmg) do
      if k ~= "torso" and k ~= "head" and snd.limb_status[k] ~= "healed" and snd.limb_status["head"] ~= "healed" and snd.checksomeAffs({"fallen", "prone", "frozen"},1) then
        execute_check = true
      end
    end
    
    for i in pairs(touse) do
			table.insert(tohit, snd.effects[touse[i]])
		end
      
    if snd.used.shield and snd.used.rebounding then
      string = "axe devastate "..snd.target
    elseif snd.used.shield or snd.used.rebounding then
      string = "axe devastate "..snd.target.." "..tohit[1]
      call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
    elseif execute_check then
      string = "axe execute "..snd.target
    elseif snd.checksomeAffs({"right_leg_crippled", "left_leg_crippled", "right_leg_broken", "left_leg_broken"}, 1) and not snd.checkAff("fallen") then
      string = "axe sweep "..snd.target
    else
      string = "axe chop "..snd.target.." "..limb_tohit.." "..tohit[1]
      call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
    end
    
    if distract then
      string = "fury distract "..snd.target..snd.sep..string
    end

		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
  
  	if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
  
  end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>sensi + tfix support</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
    
	if not snd.waiting.queue then
	
		local string = ""
		local call = ""
		local touse = {}
		local tohit = {}
		local extraaff = "asthma"
		local boosthalt = false
		if tonumber(gmcp.Char.Vitals.fury) &gt;=50 then
			boosthalt = true -- spam it
		else
			boosthalt = false
		end
    
    if gmcp.Char.Vitals.wield_left == "empty" and gmcp.Char.Vitals.wield_right == "empty" then return end
		
		snd.giving = {
		"hearing",
		"sight",
		"paresis",
    "sensitivity",
		"asthma",
		"vomiting",
		"allergies",
		"slickness",
		"left_leg_crippled",
		"right_leg_crippled",
		"anorexia",
		"stupidity",
    }
		
      for i in pairs(snd.giving) do
      if not snd.checkAff(snd.giving[i]) then
        if not table.contains(touse, snd.giving[i]) then 
          table.insert(touse, snd.giving[i])
                end
          end
      end
        
        for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
        end
		
		while #tohit &lt; 3 do
			table.insert(tohit, extraaff)
		end
		
		if snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
		elseif snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		else
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
		end
		
		if boosthalt and not snd.enraged then
			string = "fury halt "..snd.target.." boost"..snd.sep..string
		end
		
		if snd.proned() and boosthalt and not snd.enraged and snd.checkAff("sensitivity") and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) then
			string = "fury enrage"..snd.sep..string
		end

		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Lacerate (Bleed) focused</name>
									<script>if snd.class == "Wayfarer" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local touse = {}
		local tohit = {}
    local fury = ""
    local current_fury = tonumber(gmcp.Char.Vitals.fury)
		local indoors = table.contains(gmcp.Room.Info.details, "indoors")		

		if current_fury &gt;=20 and not snd.checkAff("hearing") and not snd.checksomeAffs({"ringing_ears", "sensitivity"},2) then
      fury = "fury warcry " .. snd.target
        if current_fury &gt;= 40 and not snd.checksomeAffs({"ringing_ears", "hearing"},2) then
          fury = fury .. " boost"
        end
		elseif current_fury &gt;= 30 and not snd.checkAff("exhausted") then
      fury = "fury exhaust " .. snd.target    
    end
    
		-- set the affs we want to use
		snd.giving = {
    "sensitivity",
		"clumsiness",
		"allergies",
		"vomiting",
		"recklessness",
		"paresis",
		"asthma",
    "weariness",
    }
    
		-- pick affs from the list above
  	for i in pairs(snd.giving) do
  		-- make sure not to double up paresis and paralysis
  		if not snd.checkAff(snd.giving[i]) then
  			-- and don't add an aff we've already got one higher in the list!
				if not table.contains(touse, snd.giving[i]) then 
				table.insert(touse, snd.giving[i])
				end
  		end
  	end
		
		for i in pairs(touse) do
        table.insert(tohit, snd.effects[touse[i]])
		end
		
		while #tohit &lt; 3 do
			table.insert(tohit, "delphinium")
		end
		
		-- now to decide what attack to use!
    if snd.used.shield and snd.used.rebounding then
			string = "axe devastate "..snd.target
		
    elseif snd.used.shield then
			string = "axe devastate "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]
      
    elseif not snd.checkAff("haemophilia") and not snd.used.rebounding then
      string = "axe lacerate " .. snd.target
      
    elseif snd.proned() and snd.checkAff("sensitivity") and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) then
			string = "axe slaughter "..snd.target.." "..tohit[2].." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]
      
		else
			string = "axe lob "..snd.target.." "..tohit[1]
			call = "wt Afflicting "..snd.target..": "..tohit[1]
		end
				
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call .. snd.sep .. string
		end
    
    if fury ~= "" then string = string..snd.sep..fury end
		
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bleed$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Bard</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Team Afflictions</name>
								<script>if snd.class == "Bard" then -- We're a super awesome badass bard, obv

snd.starting_attack() -- always run this first, it does some important resets

function snd.attack_function() -- defining this function is how we tell sunder what to do

    if not snd.waiting.queue then -- don't want to spam, this will prevent that
 
 
 -- if i'm in a rhythm combo, i can't use sword affs.
 
 if snd.rhythm then
    snd.giving = {
    "perplexed",
    "self_loathing",
    "berserking",
    "dazed",
    
     }    

-- Feel free to uncomment this. I have not been able to test it entirely, so ymmv. :)
--  if snd.rhythm
--  and snd.checkAff("fallen")
--  and snd.checkAff("dizziness")
--  and hasSkill("Sock", "Performance")
--  and (string.find((gmcp.Char.Vitals.wield_left), "empty") or  string.find((gmcp.Char.Vitals.wield_right), "empty")) then
--    table.insert(snd.giving, 1, "dazed")
--  end    
    
    
    else
  
  
  -- My affs normally when not in a rhythm combo.
  
    snd.giving = {
--  "misery",
  "paresis",
  "clumsiness",
  "asthma",
  "slickness",
  "anorexia",
--  "misery",
  "perplexed",
  "shyness",
  "dizziness",
  "weariness",
  "sensitivity",
  "haemophilia",
  "vomiting",
  "allergies",
  "recklessness",
  --"voyria",
  }
  
    
 end
  
		-- declare some important variables, you can add more here if you need
    local canWeave = false
    local canSing = false
    local canPlay = false
    local myinstrument = "saxophone69420" -- put your own instrument's id# here.
    local needInstrument = false
		local string = ""
		local call = ""
    local nextaff = "none"
    local tempoaff = "none"
    -- 1 affliction from snd.giving
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and nextaff == "none"
      and snd.giving[i] ~= snd.needle
    then
      nextaff = snd.giving[i]
    end
  end
  
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and tempoaff == "none"
      and snd.giving[i] ~= snd.needle
      and table.contains(snd.venom_affs, snd.giving[i])
        then
          tempoaff = snd.giving[i]
        end
    end  
   
 
 -- Let's run a check for weaving. If I need to modify this in some way (i.e a support route), I will there. 
  
  if tonumber(gmcp.Char.Vitals.dithering) &lt; 1
  and (string.find((gmcp.Char.Vitals.wield_left), "empty") or  string.find((gmcp.Char.Vitals.wield_right), "empty")) then
			canWeave = true -- Hell yeah brother
  end     
  
  -- Let's run a check for singing. I don't want to sing if it's not cheap. Ymmv on this decision - I will modify it in the support route example.
    
  if not snd.singing
  and snd.halfbeat then
			canSing = true -- I'm an idol
  end    


-- Let's run a check for playing. I will really not be using it in this route,  but it's nice to write and use later.

  if not snd.playing
  and (string.find((gmcp.Char.Vitals.wield_left), myinstrument) or  string.find((gmcp.Char.Vitals.wield_right), myinstrument)) then
			canPlay = true -- Jam out!!
  end 




      
    -- Only cowards and losers spam shield or rebounding &gt;:(
  if snd.used.shield then
      string = "pierce "..snd.target  
  elseif snd.used.rebounding then
      string = "pierce "..snd.target

    -- K, Tempo if you got some big dmg for it.    
  elseif not snd.rhythm
    and snd.checksomeAffs({"paresis", "shyness"}, 2) then
      string = "tempo "..snd.target..snd.effects[tempoaff]
      call = "wt Afflicting "..snd.target..": "..snd.effects[nextaff]
    
    -- Addiction check.
  elseif canSing 
    and hasSkill("Decadence", "Songcalling")
    and not snd.checkAff("addiction") then
      string = "sing song of decadence"
  
    -- Sorrow pushing logic.
  elseif canSing
    and hasSkill("Sorrow", "Songcalling")
    and not snd.checksomeAffs({"migraine", "squelched"}, 1) then
      string = "sing song of sorrow" 
      
    -- Let's still efficiently use sing in teams if we can.    
  elseif canSing
    and hasSkill("Youth", "Songcalling") then
      string = "sing song of youth"
        
    -- Dithering Block. 
    -- 
    -- Let's check for globes first. If we don't have destiny up, we need to do that here.
    -- If we do have destiny, we can do it as part of our string later.
    
  elseif canWeave
   and hasSkill("Runeband", "Weaving")
   and not snd.checkAff("runeband") then
        string = "weave runeband "..snd.target
       
        
  elseif canWeave
    and not snd.checkAff("besilence")
    and hasSkill("Headstitch", "Weaving")
    and snd.checkAff("asthma") then
        string = "weave headstitch "..snd.target    
            
     
  elseif canWeave
    and not snd.checkAff("bladestorm")
    and hasSkill("Bladestorm", "Weaving")
    and snd.checkAff("runeband") then
        string = "weave bladestorm "..snd.target
    
    -- Anelace Check 
      
 --     elseif not snd.checkAff("ringing_ears") then
 --       string = "weave soundblast"
        
    --- Balance Block
          
  elseif snd.aff_count_all() &gt; 2
    and not snd.checkAff("magnanimity") then
      string = "ridicule "..snd.target
  
  elseif table.contains(snd.performance_affs, nextaff) then
      string = snd.performance_attacks[nextaff].." "..snd.target
  else    
		  string = "tempo "..snd.target.." "..snd.effects[nextaff]
	 	  call = "wt Afflicting "..snd.target..": "..snd.effects[nextaff]
    end
  
  if snd.balance.inspire
    and hasSkill("Inspire", "Songcalling") then
      string = "inspire"..snd.sep..string
    end

		-- check if we need to prepend an affliction call
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^affs$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Team Damage</name>
								<script>if snd.class == "Bard" then -- We're a super awesome badass bard, obv

snd.starting_attack() -- always run this first, it does some important resets

function snd.attack_function() -- defining this function is how we tell sunder what to do

    if not snd.waiting.queue then -- don't want to spam, this will prevent that
 
 
 -- if i'm in a rhythm combo, i can't use sword affs.
 
 if snd.rhythm then
    snd.giving = {
    "perplexed",
    "self_loathing",
    "berserking",
    "dazed",
    
     }    
    
    
    else
  
  
  -- My affs normally when not in a rhythm combo.
  
    snd.giving = {
  "paresis",
  "clumsiness",
  "sensitivity",
  "asthma",
  "shyness",
  "haemophilia",
  "vomiting",
  "allergies",
  "slickness",
  "anorexia",
  "weariness",
  "misery",
  "perplexed",
  "dizziness",
  "recklessness",
  --"voyria",
  }
  
    if not snd.rhythm
    and snd.checkAff("fallen")
    and snd.checkAff("dizziness")
    and hasSkill("Sock", "Performance")
    and (string.find((gmcp.Char.Vitals.wield_left), "empty") or  string.find((gmcp.Char.Vitals.wield_right), "empty")) then
      table.insert(snd.giving, 1, "dazed")
    end   
  
    
    
 end
  
		-- declare some important variables, you can add more here if you need
    local canWeave = false
    local canSing = false
    local canPlay = false
    local myinstrument = "saxophone69420" -- put your own instrument's id# here.
    local needInstrument = false
		local string = ""
		local call = ""
    local nextaff = "none"
    local tempoaff = "none"
    -- 1 affliction from snd.giving
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and nextaff == "none"
      and snd.giving[i] ~= snd.needle
    then
      nextaff = snd.giving[i]
    end
  end
  
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and tempoaff == "none"
      and snd.giving[i] ~= snd.needle
      and table.contains(snd.venom_affs, snd.giving[i])
        then
          tempoaff = snd.giving[i]
        end
    end  
   
 
 -- Let's run a check for weaving. If I need to modify this in some way (i.e a support route), I will there. 
  
  if tonumber(gmcp.Char.Vitals.dithering) &lt; 1
  and (string.find((gmcp.Char.Vitals.wield_left), "empty") or  string.find((gmcp.Char.Vitals.wield_right), "empty")) then
			canWeave = true -- Hell yeah brother
  end     
  
  -- Let's run a check for singing. I don't want to sing if it's not cheap. Ymmv on this decision - I will modify it in the support route example.
    
  if not snd.singing
  and snd.halfbeat then
			canSing = true -- I'm an idol
  end    


-- Let's run a check for playing. I will really not be using it in this route,  but it's nice to write and use later.

  if not snd.playing
  and (string.find((gmcp.Char.Vitals.wield_left), myinstrument) or  string.find((gmcp.Char.Vitals.wield_right), myinstrument)) then
			canPlay = true -- Jam out!!
  end 




      
    -- Only cowards and losers spam shield or rebounding &gt;:(
  if snd.used.shield then
      string = "pierce "..snd.target  
  elseif snd.used.rebounding then
      string = "pierce "..snd.target

    -- K, Tempo if you got some big dmg for it.    
  elseif not snd.rhythm
    and snd.checksomeAffs({"paresis", "shyness"}, 2) then
      string = "tempo "..snd.target.." "..snd.effects[tempoaff]
      call = "wt Afflicting "..snd.target..": "..snd.effects[nextaff]
  
    -- Ringing_ears check.    
  elseif not snd.checkAff("ringing_ears")
    and hasSkill("Soundblast", "Weaving")
    and canWeave then
      string = "weave soundblast"


    -- Unheard Song Check. This is just DMG.
  elseif canSing
    and hasSkill("Unheard", "Songcalling")
    and snd.checkAff("hearing") then
      string = "sing song of the unheard" 
      
    -- Let's still efficiently use sing in teams if we can.    
  elseif canSing
    and hasSkill("Youth", "Songcalling") then
      string = "sing song of youth"
        
    -- Dithering Block. 
    -- 
    -- Let's check for globes first. If we don't have destiny up, we need to do that here.
    -- If we do have destiny, we can do it as part of our string later.


   elseif canWeave
    and hasSkill("Tearing", "Weaving") then
        string = "weave tearing "..snd.target
        
    --- Balance Block
          

  elseif table.contains(snd.performance_affs, nextaff) then
      string = snd.performance_attacks[nextaff].." "..snd.target
  else    
		  string = "tempo "..snd.target.." "..snd.effects[nextaff]
	 	  call = "wt Afflicting "..snd.target..": "..snd.effects[nextaff]
    end
      

  if snd.balance.inspire
  and hasSkill("Inspire", "Songcalling") then
      string = "inspire"..snd.sep..string
    end

		-- check if we need to prepend an affliction call
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^tdmg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Support Audience/Allies</name>
								<script>if snd.class == "Bard" then -- We're a super awesome badass bard, obv

snd.starting_attack() -- always run this first, it does some important resets

function snd.attack_function() -- defining this function is how we tell sunder what to do

    if not snd.waiting.queue then -- don't want to spam, this will prevent that
 
 -- if i'm in a rhythm combo, i can't use sword affs.
 
 if snd.rhythm then
    snd.giving = {
    "perplexed",
    "self_loathing",
    "berserking",
    "dazed",
    
     }    

    else
  
  -- My affs normally when not in a rhythm combo.
  
    snd.giving = {
  "misery",
  "paresis",
  "clumsiness",
  "asthma",
  "slickness",
  "anorexia",
  "perplexed",
  "shyness",
  "dizziness",
  "weariness",
  "sensitivity",
  "haemophilia",
  "vomiting",
  "allergies",
  "recklessness",
  --"voyria",
  }
    
 end
  
		-- declare some important variables, you can add more here if you need
    local canWeave = false
    local canSing = false
    local canPlay = false
    local myinstrument = "ocarina449359" -- put your own instrument's id# here.
    local needInstrument = false
		local string = ""
		local call = ""
    local nextaff = "none"
    local tempoaff = "none"
    -- 1 affliction from snd.giving
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and nextaff == "none"
      and snd.giving[i] ~= snd.needle
    then
      nextaff = snd.giving[i]
    end
  end
  
  for i in pairs(snd.giving) do
    if
      not snd.checkAff(snd.giving[i]) 
      and tempoaff == "none"
      and snd.giving[i] ~= snd.needle
      and table.contains(snd.venom_affs, snd.giving[i])
        then
          tempoaff = snd.giving[i]
        end
    end  
   
 
 -- Let's run a check for weaving. If I need to modify this in some way (i.e a support route), I will there. 
  
  if tonumber(gmcp.Char.Vitals.dithering) &lt; 1
  and (string.find((gmcp.Char.Vitals.wield_left), "empty") or  string.find((gmcp.Char.Vitals.wield_right), "empty")) then
			canWeave = true -- Hell yeah brother
  end     
  
  -- Let's run a check for singing. I don't want to sing if it's not cheap. Ymmv on this decision - I will modify it in the support route example.
    
  if not snd.singing then
			canSing = true -- I'm an idol
  end    


-- Let's run a check for playing. I will really not be using it in this route,  but it's nice to write and use later.

  if not snd.playing
  and (string.find((gmcp.Char.Vitals.wield_left), myinstrument) or  string.find((gmcp.Char.Vitals.wield_right), myinstrument)) then
			canPlay = true -- Jam out!!
  end 




      
    -- Only cowards and losers spam shield or rebounding &gt;:(
  if canPlay
    and hasSkill("Youth", "Songcalling") then
      string = "play song of youth"
      
    -- Let's still efficiently use sing in teams if we can.    
  elseif canSing
    and hasSkill("Youth", "Songcalling") then
      string = "sing song of youth"
        
    -- Dithering Block. 
    -- 
    -- Let's check for globes first. If we don't have destiny up, we need to do that here.
    -- If we do have destiny, we can do it as part of our string later.
    
-- There is no dithering in this route.
-- ... yet.


    --- Balance Block
    
  elseif snd.used.shield then
      string = "pierce "..snd.target  
  elseif snd.used.rebounding then
      string = "pierce "..snd.target
          
  elseif snd.aff_count_all() &gt; 2
    and not snd.checkAff("magnanimity") then
      string = "ridicule "..snd.target
  
  elseif table.contains(snd.performance_affs, nextaff) then
      string = snd.performance_attacks[nextaff].." "..snd.target
  else    
		  string = "tempo "..snd.target.." "..snd.effects[nextaff]
	 	  call = "wt Afflicting "..snd.target..": "..snd.effects[nextaff]
    end
  
  if snd.balance.inspire
    and hasSkill("Inspire", "Songcalling") then
      string = "inspire"..snd.sep..string
    end

		-- check if we need to prepend an affliction call
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..snd.sep..string
		end
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^supp$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Spirit</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Akkari</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Akkari Attack Template</name>
								<script> if snd.class == "Akkari" then -- set this to the class this alias is for
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		-- declare some important variables
 local string = ""
 local touse = {}
 local gashaff = {}
 local call = ""
 local fcall = ""
 local scall = ""
 local paff = "none"
 local saff_one = "none"
 local saff_two = "none"
 local pattack = ""
 local sattack = ""
 local extraaff = "amnesia"
 

 snd.primary_aff = {
    --"effused_blood",

		}

snd.secondary_aff = {
    "remorse",
    "contrition",
    }

snd.akkari_host()
snd.akkari_attend()

  for i in pairs(snd.primary_aff) do
    if not snd.checkAff(snd.primary_aff[i]) 
 --   and not (snd.used.rebounding and table.isMember(snd.censure_affs, snd.primary_aff[i]))

    and not (snd.primary_aff[i] == "paresis" and snd.checkAff("paralysis")) 
    then
					if not table.contains(gashaff, snd.primary_aff[i]) then
						table.insert(gashaff, snd.primary_aff[i])
					end
    end
  end

  if table.isMember(snd.censure_affs, gashaff[1]) then
      if gashaff[1] == "sight" then
     	pattack = "wipe left"..snd.sep.."censure "..snd.target.." lenient "..snd.effects[gashaff[1]]..snd.sep
      else
    	pattack = "wipe left"..snd.sep.."censure "..snd.target.." "..snd.effects[gashaff[1]]..snd.sep
      end
      fcall = "Afflicting "..snd.target..": "..snd.effects[gashaff[1]].." "
  elseif table.isMember(snd.akkari_bal_affs, gashaff[1]) then
      if gashaff[1] == "black_bile" then
      pattack = "denounce "..snd.target.." corruption"..snd.sep
      fcall = ""
      else
      pattack = snd.akkari_bal_attacks[gashaff[1]].." "..snd.target..snd.sep
      end
  elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
      pattack = snd.akkari_eq_attacks[gashaff[1]].." "..snd.target..snd.sep
  else
      pattack = "denounce "..snd.target..snd.sep
	end
  
    	for i in pairs(snd.secondary_aff) do
				if not (snd.checkAff(snd.secondary_aff[i]) or snd.secondary_aff[i] == gashaff[1] or (gashaff[1] == "sight" and snd.secondary_aff[1] == "hearing")) then
					if not table.contains(touse, snd.secondary_aff[i]) then
						table.insert(touse, snd.secondary_aff[i])
					end
				end
			end
      
      if touse[2] == "sight" then
        table.remove(touse, table.index_of(touse, "sight"))
      end
      
      if touse[2] == "hearing" then
        table.remove(touse, table.index_of(touse, "hearing"))
      end
      
			while #touse &lt; 3 do
				table.insert(touse, extraaff)
			end
  
  
  if gashaff[1] == "sight" then
    if touse[1] == "sight" then
      table.remove(touse, table.index_of(touse, "sight"))
    end
    if touse[1] == "hearing" then
      table.remove(touse, table.index_of(touse, "hearing"))
    end
    sattack = "dictate "..touse[1].." "..snd.target..snd.sep
    if touse[1] == "remorse" or touse[1] == "contrition" then
    else
    scall = "Whispering "..snd.target..": "..touse[1]
    end
  elseif touse[1] == "sight" then
    sattack = "spirit attend "..snd.target..snd.sep
  elseif touse[1] == "hearing" then
    sattack = "spirit attend "..snd.target..snd.sep
  elseif touse[1] == "blood_poison" then
    sattack = "spirit bane "..snd.target..snd.sep
  else
    if (touse[2] == "hearing" or touse[2] == "sight") then
      if snd.can_proclaim then
        sattack = "proclaim "..touse[1].." "..touse[3]..snd.sep
      else
        sattack = "dictate "..touse[1].." "..touse[3].." "..snd.target..snd.sep
      end
        if touse[1] == "remorse" or touse[1] == "contrition" then
        else
        scall = "Whispering: "..touse[1].." "..touse[3]
        end
    else
      if snd.can_proclaim then
        sattack = "proclaim "..touse[1].." "..touse[2]..snd.sep
      else    
        sattack = "dictate "..touse[1].." "..touse[2].." "..snd.target..snd.sep
      end
      if touse[1] == "remorse" or touse[1] == "contrition" then
      else
      scall = "Whispering "..snd.target..": "..touse[1].." "..touse[2]
      end
    end


  end


    if snd.used.shield and snd.used.rebounding then
      string = "denounce "..snd.target..snd.sep.."spirit provoke "..snd.target
      fcall = ""
      scall = ""
    elseif snd.used.shield then
      string = "denounce "..snd.target..snd.sep..sattack
      fcall = ""
    elseif snd.mana_percent &lt; 35 then
      string = "dumavai "..snd.target
      fcall = ""
      scall = ""
    elseif snd.mana_percent &lt; 44 and snd.checkAff("blood_rune") then
      string = "spirit vilify"..snd.sep.."dumavai "..snd.target
      fcall = ""
      scall = ""
    elseif snd.checkAff("writhe_transfix") and not snd.checkAff("feast") and gmcp.Char.Status.spec == "Dosan" then
      string = "spirit exorcise "..snd.target
      fcall = ""
      scall = ""
    elseif snd.can_deliver() then
      string = "deliver "..snd.target..snd.sep..sattack
      fcall = ""
    elseif snd.used.rebounding and table.isMember(snd.censure_affs, gashaff[1]) then
        string = "denounce "..snd.target.." corruption"..snd.sep..sattack
        fcall = ""
        --fcall = "Afflicting "..snd.target..": black_bile"
    elseif snd.checkAff("impatience") and snd.checksomeAffs({"sadness", "confusion",}, 2) 
    and gmcp.Char.Status.spec == "Naarak" and not snd.checkAff("blood_curse") then
      string = "spirit anathema "..snd.target
      fcall = ""
      scall = ""
    elseif gmcp.Char.Status.spec == "Naarak" and snd.can_inquisition and 
    ((snd.aff_count_mental() == 12 or (snd.checkAff("blood_curse") and snd.aff_count_mental() == 10))
    or
    (snd.checkAff("blood_rune") and (snd.aff_count_mental() == 9 or (snd.checkAff("blood_curse") and snd.aff_count_mental() == 7))))
    then
      string = "spirit inquisition "..snd.target
      fcall = ""
      scall = ""
    elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
      string = pattack
      fcall = ""
      scall = ""
    else
      string = pattack..snd.sep..sattack
    end
    
    
    if not snd.loyalsattacking then
    string = "order loyals attack "..snd.target..snd.sep..string
    end
    
    string  = "contemplate "..snd.target..snd.sep..string..snd.sep
 
    if fcall ~= "" then
      call = "wt "..fcall
    end
    
    if scall ~= "" then
      if call ~= "" then
      call = call..snd.sep.."wt "..scall
      else
      call = "wt "..scall
      end
    end
 
    
		-- check if we need to prepend an affliction call
	  if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
		string = call..snd.sep..string
    end
	
  
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
							</Alias>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Akkari" then
snd.starting_attack()
function snd.attack_function()
  local string = ""
  local corpus = "none"
  local touse = {}

	snd.giving_whisper = {
			"impatience",
			"lovers",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",
	}
	snd.akkari_lovers(snd.giving_whisper)
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
      
    if not snd.loyalsattacking then
      string = "order loyals kill "..snd.target..snd.sep 
    end
	
	if not snd.waiting.queue then
	 	if snd.theytumbling then
			string = string.."penitence "..snd.target..snd.sep.."qeb deliver "..snd.target
		elseif snd.theyran then
			string = string.."DEJEMASHAI "..snd.target
  	elseif not snd.checkAff("writhe_transfix") then
 			string = string.."Exhort "..snd.target
		else
			string = string.."denounce "..snd.target..snd.sep.."dictate "..touse[1].." "..touse[2].." "..snd.target
    end
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   	snd.last_attack = string
   	snd.attack(snd.last_attack)
   	snd.waiting.queue = true
   	tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end

end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Mes feast</name>
									<script>if snd.class == "Akkari" then
snd.starting_attack()
function snd.attack_function()

  local string = ""
  local corpus = "none"
  local touse = {}
	
	
	snd.giving_whisper = {
			"impatience",
			"lovers",
			"berserking",
			"stupidity",
			"confusion",
			"recklessness",
			"masochism",
			"anorexia",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"paranoia",
	}
  snd.akkari_lovers(snd.giving_whisper)
    if not snd.loyalsattacking then
      string = "order loyals kill "..snd.target..snd.sep 
    end

	
  if not snd.waiting.queue then
	 	if snd.theytumbling then
			string = string.."penitence "..snd.target..snd.sep.."qeb deliver "..snd.target
		elseif snd.theyran then
			string = string.."DEJEMASHAI "..snd.target
  	elseif not snd.checkAff("writhe_transfix") then
 			string = string.."exhort "..snd.target
		elseif not snd.checkAff("feast") then
			string = string.."spirit exorcise "..snd.target
		else
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
		
			string = string.."deliver "..snd.target..snd.sep.."dictate "..touse[1].." "..touse[2].." "..snd.target
		end
	end
 
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^feast$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Praenomen Group Dmg</name>
									<script>if snd.class == "Akkari" then
  snd.giving_whisper =
    {
      "lovers",
      "impatience",
      "stupidity",
      "recklessness",
      "epilepsy",
      "anorexia",
      "confusion",
      "dementia",
      "berserking",
      "masochism",
      "peace",
      "vertigo",
      "indifference",
      "agoraphobia",
    }
  snd.akkari_lovers(snd.giving_whisper)
  snd.starting_attack()

  function snd.attack_function()
    local string = ""
    local corpus = "none"
    local touse = {}
    local call = ""
    if snd.theytumbling then
      string = "penitence " .. snd.target .. snd.sep .. "qeb deliver " .. snd.target
    elseif snd.theyran then
      string = "DEJEMASHAI " .. snd.target
    elseif snd.mana_percent &lt; 35 and not snd.used.shield then
      --Checking if we could annihilate the last time we contemplated, and trying if we can. Need to add logic to announce mana calls
      string = "dumavai " .. snd.target
    else
      for i in pairs(snd.giving_whisper) do
        if not snd.checkAff(snd.giving_whisper[i]) then
          if not table.contains(touse, snd.giving_whisper[i]) then
            table.insert(touse, snd.giving_whisper[i])
          end
        end
      end
      string =
        "denounce " ..
        snd.target ..
        snd.sep ..
        "dictate " ..
        touse[1] ..
        " " ..
        touse[2] ..
        " " ..
        snd.target
    end
    string =
      "contemplate " ..
      snd.target ..
      snd.sep ..
      "order loyals attack " ..
      snd.target ..
      snd.sep ..
      string
    --Contemplate target and order loyal to attack it before attacking
    call = "wt Afflicting " .. touse[1] .. " " .. touse[2]
    if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
      string =
        call ..
        snd.sep ..
        "contemplate " ..
        snd.target ..
        snd.sep ..
        "order loyals attack " ..
        snd.target ..
        snd.sep ..
        string
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gdmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Afflictions</name>
									<script>if snd.class == "Akkari" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local touse = {}
 snd.giving_whisper = {
			"impatience",
			"lovers",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",

	}
  snd.akkari_lovers(snd.giving_whisper)
			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
			
	if not snd.waiting.queue then
		if snd.theytumbling then
			string = "penitence "..snd.target..snd.sep.."qeb deliver "..snd.target
		elseif snd.theyran then
			string = "DEJEMASHAI "..snd.target
		else
			string = "denounce "..snd.target..snd.sep.."dictate "..touse[1].." "..touse[2].." "..snd.target
		end
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Annhilate and Mesmerize</name>
									<script>if snd.class == "Akkari" then
  snd.starting_attack()

  function snd.attack_function()
    local string = "contemplate " .. snd.target .. snd.sep
    local corpus = "none"
    local touse = {}
    local physcount = 0
    for aff in pairs(snd.physical_affs) do
      if table.contains(snd.target_has, snd.physical_affs[aff]) then
        physcount = physcount + 1
      end
    end
    local mentcount = 0
    for aff in pairs(snd.mental_affs) do
      if table.contains(snd.target_has, snd.mental_affs[aff]) then
        mentcount = mentcount + 1
      end
    end
    snd.giving_whisper =
      {
        "impatience",
        "lovers",
        "stupidity",
        "anorexia",
        "confusion",
        "recklessness",
        "agoraphobia",
        "vertigo",
        "indifference",
        "peace",
        "masochism",
        "paranoia",
      }
    snd.akkari_lovers(snd.giving_whisper)
    if not snd.loyalsattacking then
      string = string .. "order loyals kill " .. snd.target .. snd.sep
    end
    if not snd.waiting.queue then
      if snd.theytumbling then
        string = "penitence " .. snd.target .. snd.sep .. "qeb deliver " .. snd.target
      elseif snd.theyran then
        string = "DEJEMASHAI " .. snd.target
      elseif snd.mana_percent &lt; 35 and not snd.used.shield then
        string = string .. "dumavai " .. snd.target
      elseif snd.proned() then
        string = string .. "tithe " .. snd.target
      elseif not snd.checkAff("writhe_transfix") then
        string = string .. "exhort " .. snd.target
      else
        for i in pairs(snd.giving_whisper) do
          if not snd.checkAff(snd.giving_whisper[i]) then
            if not table.contains(touse, snd.giving_whisper[i]) then
              table.insert(touse, snd.giving_whisper[i])
            end
          end
        end
        string =
          "denounce " ..
          snd.target ..
          snd.sep ..
          "dictate " ..
          touse[1] ..
          " " ..
          touse[2] ..
          " " ..
          snd.target
      end
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mez$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>akkari Group Affs</name>
									<script>if snd.class == "Akkari" then
snd.starting_attack()

function snd.attack_function()
 local string = ""
 local touse = {}
 local gashaff = {}
 local call = ""
 
 snd.giving_whisper = {
 		"lovers",
		"impatience",
 		"recklessness",
		"stupidity", 
 		"masochism",
		"agoraphobia",
 		"confusion",
		"epilepsy",
 		"anorexia",
		"berserking",
 		"vertigo",
 		"dementia",
 		"peace",
		"paranoia",
 		"indifference",

		}
	snd.akkari_lovers(snd.giving_whisper)

snd.scythe_gash = {
		"paresis",
		"asthma",
		"slickness",
		"anorexia",
		"clumsiness",
		"dizziness",
		"stupidity",
		"weariness",
		
	    }
		

			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end

			for i in pairs(snd.scythe_gash) do
				if not snd.checkAff(snd.scythe_gash[i]) then
					if not table.contains(gashaff, snd.scythe_gash[i]) then
						table.insert(gashaff, snd.scythe_gash[i])
					end
				end
			end

        if snd.mana_percent &lt; 35 and not snd.used.shield then 
            string = "dumavai "..snd.target
        else
		       if snd.used.shield or snd.used.rebounding then
              string = "denounce "..snd.target..snd.sep.."dictate "..touse[1].." "..touse[2].." "..snd.target
              call = "wt Afflicting "..snd.target..": "..touse[1]..snd.sep..", "..touse[2]		   
           else
			        string = "wipe weapon"..snd.sep.."censure "..snd.target.." "..snd.effects[gashaff[1]].." lenient"..snd.sep.."dictate "..touse[1].." "..touse[2].." "..snd.target..snd.sep
			        call = "wt Afflicting "..snd.target..": " ..snd.effects[gashaff[1]]..". Whispering: "..touse[1]..", "..touse[2]
			     end
        end

	if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
		string = call..snd.sep.."contemplate "..snd.target..snd.sep.."order loyals attack "..snd.target..snd.sep..string
	end

    if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end
    snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Lock</name>
									<script>snd.current_offense = "glo"
if snd.class == "Akkari" then
  -- set this to the class this alias is for
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      -- declare some important variables
      local string = ""
      local touse = {}
      local gashaff = {}
      local call = ""
      local fcall = ""
      local scall = ""
      local paff = "none"
      local saff_one = "none"
      local saff_two = "none"
      local pattack = ""
      local sattack = ""
      local extraaff = "amnesia"
      if snd.target_locked() then
        snd.primary_aff =
          {
            "sight",
            "writhe_transfix",
            "paresis",
            "stupidity",
            "anorexia",
            "asthma",
            "slickness",
            "no_paste",
            "blood_curse",
            "black_bile",
          }
      else
        --  "effused_blood",
        -- "blood_rune",
        snd.primary_aff =
          {
            "paresis",
            "stupidity",
            "anorexia",
            "asthma",
            "slickness",
            "no_paste",
            "blood_curse",
            "black_bile",
          }
      end
      if snd.target_locked() then
        snd.secondary_aff =
          {
            "impatience",
            "confusion",
            "indifference",
            "stupidity",
            "confusion",
            "epilepsy",
            "berserking",
            "sight",
            "lovers",
            "peace",
            "recklessness",
            "dementia",
            "paranoia",
            "anorexia",
            "vertigo",
            "masochism",
            "agoraphobia",
            "amnesia",
          }
      else
        if
          snd.cureset == "archivist" or
          snd.cureset == "shaman" or
          snd.cureset == "ascendril" or
          snd.cureset == "Sciomancer"
        then
          snd.secondary_aff =
            {
              "stupidity",
              "impatience",
              "confusion",
              "epilepsy",
              "berserking",
              "sight",
              "lovers",
              "peace",
              "recklessness",
              "dementia",
              "paranoia",
              "anorexia",
              "vertigo",
              "masochism",
              "agoraphobia",
              "indifference",
              "amnesia",
            }
        else
          snd.secondary_aff =
            {
              "stupidity",
              "impatience",
              "epilepsy",
              "berserking",
              "sight",
              "lovers",
              "confusion",
              "peace",
              "recklessness",
              "dementia",
              "paranoia",
              "anorexia",
              "vertigo",
              "masochism",
              "agoraphobia",
              "indifference",
              "amnesia",
            }
        end
      end
      snd.akkari_lovers(snd.secondary_aff)
      snd.akkari_host()
      snd.akkari_attend()
      for i in pairs(snd.primary_aff) do
        --   and not (snd.used.rebounding and table.isMember(snd.censure_affs, snd.primary_aff[i]))
        if
          not snd.checkAff(snd.primary_aff[i]) and
          not (snd.primary_aff[i] == "paresis" and snd.checkAff("paralysis"))
        then
          if not table.contains(gashaff, snd.primary_aff[i]) then
            table.insert(gashaff, snd.primary_aff[i])
          end
        end
      end
      if table.isMember(snd.censure_affs, gashaff[1]) then
        if gashaff[1] == "sight" then
          pattack =
            "wipe left" ..
            snd.sep ..
            "censure " ..
            snd.target ..
            " lenient " ..
            snd.effects[gashaff[1]] ..
            snd.sep
        else
          pattack =
            "wipe left" ..
            snd.sep ..
            "censure " ..
            snd.target ..
            " " ..
            snd.effects[gashaff[1]] ..
            snd.sep
        end
        fcall = "Afflicting " .. snd.target .. ": " .. snd.effects[gashaff[1]] .. " "
      elseif table.isMember(snd.akkari_bal_affs, gashaff[1]) then
        if gashaff[1] == "black_bile" then
          pattack = "denounce " .. snd.target .. " corruption" .. snd.sep
        else
          pattack = snd.akkari_bal_attacks[gashaff[1]] .. " " .. snd.target .. snd.sep
        end
      elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
        pattack = snd.akkari_eq_attacks[gashaff[1]] .. " " .. snd.target .. snd.sep
      else
        pattack = "denounce " .. snd.target .. snd.sep
      end
      for i in pairs(snd.secondary_aff) do
        if
          not (
            snd.checkAff(snd.secondary_aff[i]) or
            snd.secondary_aff[i] == gashaff[1] or
            (gashaff[1] == "sight" and snd.secondary_aff[1] == "hearing")
          )
        then
          if not table.contains(touse, snd.secondary_aff[i]) then
            table.insert(touse, snd.secondary_aff[i])
          end
        end
      end
      if touse[2] == "sight" then
        table.remove(touse, table.index_of(touse, "sight"))
      end
      if touse[2] == "hearing" then
        table.remove(touse, table.index_of(touse, "hearing"))
      end
      while #touse &lt; 3 do
        table.insert(touse, extraaff)
      end
      if gashaff[1] == "sight" then
        if touse[1] == "sight" then
          table.remove(touse, table.index_of(touse, "sight"))
        end
        if touse[1] == "hearing" then
          table.remove(touse, table.index_of(touse, "hearing"))
        end
        sattack = "dictate " .. touse[1] .. " " .. snd.target .. snd.sep
        if touse[1] == "remorse" or touse[1] == "contrition" then
        else
          scall = "Whispering " .. snd.target .. ": " .. touse[1]
        end
      elseif touse[1] == "sight" then
        sattack = "spirit attend " .. snd.target .. snd.sep
      elseif touse[1] == "hearing" then
        sattack = "spirit attend " .. snd.target .. snd.sep
      elseif touse[1] == "blood_poison" then
        sattack = "spirit bane " .. snd.target .. snd.sep
      else
        if (touse[2] == "hearing" or touse[2] == "sight") then
          if snd.can_proclaim then
            sattack = "proclaim " .. touse[1] .. " " .. touse[3] .. snd.sep
          else
            sattack = "dictate " .. touse[1] .. " " .. touse[3] .. " " .. snd.target .. snd.sep
          end
          if touse[1] == "remorse" or touse[1] == "contrition" then
          else
            scall = "Whispering: " .. touse[1] .. " " .. touse[3]
          end
        else
          if snd.can_proclaim then
            sattack = "proclaim " .. touse[1] .. " " .. touse[2] .. snd.sep
          else
            sattack = "dictate " .. touse[1] .. " " .. touse[2] .. " " .. snd.target .. snd.sep
          end
          if touse[1] == "remorse" or touse[1] == "contrition" then
          else
            scall = "Whispering " .. snd.target .. ": " .. touse[1] .. " " .. touse[2]
          end
        end
      end
      if snd.used.shield and snd.used.rebounding then
        string = "denounce " .. snd.target .. snd.sep .. "spirit provoke " .. snd.target
        fcall = ""
        scall = ""
      elseif snd.used.shield then
        string = "denounce " .. snd.target .. snd.sep .. sattack
        fcall = ""
      elseif snd.mana_percent &lt; 35 then
        string = "dumavai " .. snd.target
      elseif snd.mana_percent &lt; 44 and snd.checkAff("blood_rune") then
        string = "spirit vilify" .. snd.sep .. "dumavai " .. snd.target
        fcall = ""
        scall = ""
      elseif snd.used.rebounding and table.isMember(snd.censure_affs, gashaff[1]) then
        string = "denounce " .. snd.target .. " corruption" .. snd.sep .. sattack
        fcall = ""
      elseif
        snd.checkAff("impatience") and
        snd.checksomeAffs({"sadness", "confusion"}, 2) and
        gmcp.Char.Status.spec == "Naarak" and
        not snd.checkAff("blood_curse")
      then
        string = "spirit anathema " .. snd.target
        fcall = ""
        scall = ""
      elseif
        gmcp.Char.Status.spec == "Naarak" and
        snd.can_inquisition and
        (
          (
            snd.aff_count_mental() == 12 or
            (snd.checkAff("blood_curse") and snd.aff_count_mental() == 10)
          ) or
          (
            snd.checkAff("blood_rune") and
            (
              snd.aff_count_mental() == 9 or
              (snd.checkAff("blood_curse") and snd.aff_count_mental() == 7)
            )
          )
        )
      then
        string = "spirit inquisition " .. snd.target
        fcall = ""
        scall = ""
      elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
        string = pattack
        fcall = ""
        scall = ""
      else
        string = pattack .. snd.sep .. sattack
        if table.isMember(snd.censure_affs, gashaff[1]) then
        end
      end
      if not snd.loyalsattacking then
        string = "order loyals attack " .. snd.target .. snd.sep .. string
      end
      string = "contemplate " .. snd.target .. snd.sep .. string .. snd.sep
      if fcall ~= "" then
        call = "wt " .. fcall
      end
      if scall ~= "" then
        if call ~= "" then
          call = call .. snd.sep .. "wt " .. scall
        else
          call = "wt " .. scall
        end
      end
      -- check if we need to prepend an affliction call
      if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
        string = call .. snd.sep .. string
      end
      -- we don't want to resend our existing attack, so check against that
      if string ~= snd.last_attack and not snd.waiting.queue then
        -- if we've got a new attack now,
        snd.last_attack = string
        cecho("\n&lt;white&gt;" .. string)
        snd.attack(snd.last_attack)
        -- manage the anti-spam check below
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
  -- make sure to actually send the attack once on use!
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^glo$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Akkari" then
  snd.send("quickwield both mantha")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Misc</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Lure</name>
									<script>if snd.class == "Akkari" then
  snd.send("qeb DEJEMASHAI "..matches[2])
elseif snd.class == "Praenomen" then
  snd.send("qeb lure "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lure (\w+)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>1v1</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Naarak Host Route</name>
									<script>if snd.class == "Akkari" then
snd.starting_attack()
function snd.attack_function()
  local string = "contemplate "..snd.target..snd.sep
  local corpus = "none"
  local touse = {}
  local tohit = {}
  local whis = {}
 
  snd.giving_whisper = {
            "impatience",
            "lovers",
            "peace",
            "stupidity",
            "confusion",
            "anorexia",
            "berserking",
            "recklessness",
            "agoraphobia",
            "vertigo",
            "indifference",
            "masochism",
            "paranoia",
 
  }
  snd.akkari_lovers(snd.giving_whisper)

  snd.giving = {
        "asthma",
        "paresis",
        "clumsiness",
        "weariness",
  }
      for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end

      for j in pairs(snd.giving_whisper) do
        if not snd.checkAff(snd.giving_whisper[j]) then
          if not table.contains(whis, snd.giving_whisper[j]) then
            table.insert(whis, snd.giving_whisper[j])
          end
        end
      end
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end
      
    if not snd.loyalsattacking then
      string = string.."order loyals kill "..snd.target..snd.sep 
    end
    
    local seizeMana = 0
    local mAffBump = 4.00
    seizeMana = tonumber((10.98) + (mentcount*mAffBump))
    
    if snd.checkAff("blood_curse") then
      seizeMana = seizeMana+((seizeMana/10)*1.5)
    end
   
  if not snd.waiting.queue then
  
	 	  if snd.theytumbling then
			   string = string.."penitence "..snd.target..snd.sep.."qeb deliver "..snd.target
		  elseif snd.theyran then
			   string = string.."DEJEMASHAI "..snd.target
      elseif snd.used.shield then
        string = string.."denounce "..snd.target.." upset"..snd.sep.."dictate "..whis[1].." "..whis[2].." "..snd.target
      elseif snd.used.rebounding then
         string = string..snd.target..snd.sep.."bloodlet " ..snd.target..snd.sep.. "dictate "..whis[1].." "..whis[2].." "..snd.target
      elseif not snd.checkAff("rend") then
        string = string.."bloodlet " ..snd.target..snd.sep.. "dictate "..whis[1].." "..whis[2].." "..snd.target
      elseif not snd.checkAff("blood_rune") and not snd.runeused then
        string = string.."spirit pariah " ..snd.target
      elseif ((snd.mana_percent - seizeMana) &lt;= 37 and snd.checkAff("blood_rune")) or ((snd.mana_percent - seizeMana) &lt;= 32) and snd.balance.seize  then
        string = string.."spirit inquisition " ..snd.target
      elseif snd.mana_percent &lt;= 37 and not snd.balance.seize and snd.runeused and snd.checkAff("blood_rune") then
        string = string.."spirit vilify"
      elseif snd.mana_percent &lt; 35 or (snd.mana_percent &lt; 44 and snd.checkAff("blood_rune")) then
 			  string = string .. "dumavai "..snd.target
  	  elseif mentcount &gt;= 3 and not snd.checkAff("blood_curse") then
        string = string.."spirit anathema " ..snd.target
      else
        string = string.."wipe weapon"..snd.sep.."censure "..snd.target.." "..tohit[1].." lenient"..snd.sep.."dictate "..whis[1].." "..whis[2].." "..snd.target..snd.sep
      end
    end
   
   
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(d), [[snd.waiting.queue = false]])
  end
 end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^narrak$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limbs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Limbs</name>
									<script>snd.current_offense = "gli"
if snd.class == "Akkari" then -- set this to the class this alias is for
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		-- declare some important variables
 local string = ""
 local touse = {}
 local gashaff = {}
 local call = ""
 local fcall = ""
 local scall = ""
 local paff = "none"
 local saff_one = "none"
 local saff_two = "none"
 local pattack = ""
 local sattack = ""
 local extraaff = "amnesia"
 

 snd.primary_aff = {
    --"effused_blood",
    "blood_rune",
    "left_leg_crippled",
    "right_leg_crippled",
    "left_arm_crippled",
    "right_arm_crippled",
    "paresis",
    "stupidity",
    "anorexia",
    "asthma",
    "slickness",
    "sight",    
    "blood_curse",
    "black_bile",
		}

snd.secondary_aff = {
    "stupidity",
    "impatience",
    "epilepsy",
    "berserking",
    "loneliness",
    "confusion",
    "peace",
    "recklessness",
    "dementia",
    "paranoia",
    "anorexia",
    "vertigo",
    "masochism",
    "agoraphobia",
    "indifference",
    "amnesia",
    }
	snd.akkari_lovers(snd.secondary_aff)

snd.akkari_host()
snd.akkari_attend()

  for i in pairs(snd.primary_aff) do
    if not snd.checkAff(snd.primary_aff[i]) 
    and not (snd.primary_aff[i] == "paresis" and snd.checkAff("paralysis")) 
    then
					if not table.contains(gashaff, snd.primary_aff[i]) then
						table.insert(gashaff, snd.primary_aff[i])
					end
    end
  end

  if table.isMember(snd.censure_affs, gashaff[1]) then
      if gashaff[1] == "sight" then
     	pattack = "wipe left"..snd.sep.."censure "..snd.target.." lenient "..snd.effects[gashaff[1]]..snd.sep
      else
    	pattack = "wipe left"..snd.sep.."censure "..snd.target.." "..snd.effects[gashaff[1]]..snd.sep
      end
      fcall = "Afflicting "..snd.target..": "..gashaff[1].." "
  elseif table.isMember(snd.akkari_bal_affs, gashaff[1]) then
      if gashaff[1] == "black_bile" then
      pattack = "denounce "..snd.target.." corruption"..snd.sep
      else
      pattack = snd.akkari_bal_attacks[gashaff[1]].." "..snd.target..snd.sep
      end
  elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
      pattack = snd.akkari_eq_attacks[gashaff[1]].." "..snd.target..snd.sep
  else
      pattack = "denounce "..snd.target..snd.sep
      fcall = ""
	end
  
    	for i in pairs(snd.secondary_aff) do
				if not (snd.checkAff(snd.secondary_aff[i]) or snd.secondary_aff[i] == gashaff[1] or (gashaff[1] == "sight" and snd.secondary_aff[1] == "hearing")) then
					if not table.contains(touse, snd.secondary_aff[i]) then
						table.insert(touse, snd.secondary_aff[i])
					end
				end
			end
      
      if touse[2] == "sight" then
        table.remove(touse, table.index_of(touse, "sight"))
      end
      
      if touse[2] == "hearing" then
        table.remove(touse, table.index_of(touse, "hearing"))
      end
      
			while #touse &lt; 3 do
				table.insert(touse, extraaff)
			end
  
  
  if gashaff[1] == "sight" then
    if touse[1] == "sight" then
      table.remove(touse, table.index_of(touse, "sight"))
    end
    if touse[1] == "hearing" then
      table.remove(touse, table.index_of(touse, "hearing"))
    end
    sattack = "dictate "..touse[1].." "..snd.target..snd.sep
    if touse[1] == "remorse" or touse[1] == "contrition" then
    else
    scall = "Whispering "..snd.target..": "..touse[1]
    end
  elseif touse[1] == "sight" then
    sattack = "spirit attend "..snd.target..snd.sep
  elseif touse[1] == "hearing" then
    sattack = "spirit attend "..snd.target..snd.sep
  elseif touse[1] == "blood_poison" then
    sattack = "spirit bane "..snd.target..snd.sep
  else
    if (touse[2] == "hearing" or touse[2] == "sight") then
      if snd.can_proclaim then
        sattack = "proclaim "..touse[1].." "..touse[3]..snd.sep
      else
        sattack = "dictate "..touse[1].." "..touse[3].." "..snd.target..snd.sep
      end
        scall = "Whispering: "..touse[1].." "..touse[3]
    else
      if snd.can_proclaim then
        sattack = "proclaim "..touse[1].." "..touse[2]..snd.sep
      else    
        sattack = "dictate "..touse[1].." "..touse[2].." "..snd.target..snd.sep
      end
      if touse[1] == "remorse" or touse[1] == "contrition" then
      else
      scall = "Whispering "..snd.target..": "..touse[1].." "..touse[2]
      end
    end


  end


    if snd.used.shield and snd.used.rebounding then
      string = "denounce "..snd.target..snd.sep.."spirit provoke "..snd.target
      fcall = ""
      scall = ""
    elseif snd.used.shield then
      string = "denounce "..snd.target..snd.sep..sattack
      fcall = ""
    elseif snd.mana_percent &lt; 35 then
      string = "dumavai "..snd.target
      fcall = ""
      scall = ""
    elseif snd.mana_percent &lt; 44 and snd.checkAff("blood_rune") then
      string = "spirit vilify"..snd.sep.."dumavai "..snd.target
      fcall = ""
      scall = ""
    elseif snd.used.rebounding and table.isMember(snd.censure_affs, gashaff[1]) then
        string = "denounce "..snd.target.." corruption"..snd.sep..sattack
        fcall = ""
    elseif snd.checkAff("impatience") and snd.checksomeAffs({"sadness", "confusion",}, 2) 
    and gmcp.Char.Status.spec == "Naarak" and not snd.checkAff("blood_curse") then
      string = "spirit anathema "..snd.target
      fcall = ""
      scall = ""
    elseif gmcp.Char.Status.spec == "Naarak" and snd.can_inquisition and 
    ((snd.aff_count_mental() == 12 or (snd.checkAff("blood_curse") and snd.aff_count_mental() == 10))
    or
    (snd.checkAff("blood_rune") and (snd.aff_count_mental() == 9 or (snd.checkAff("blood_curse") and snd.aff_count_mental() == 7))))
    then
      string = "spirit inquisition "..snd.target
      fcall = ""
      scall = ""
    elseif table.isMember(snd.akkari_eq_affs, gashaff[1]) then
      string = pattack
      fcall = ""
      scall = ""
    else
      string = pattack..snd.sep..sattack
    end
    
    
    if not snd.loyalsattacking then
    string = "order loyals attack "..snd.target..snd.sep..string
    end
    
    string  = "contemplate "..snd.target..snd.sep..string
    
    
    if fcall ~= "" then
      call = "wt "..fcall
    end
    
    if scall ~= "" then
      if call ~= "" then
      call = call..snd.sep.."wt "..scall
      else
      call = "wt "..scall
      end
    end
    
    
		-- check if we need to prepend an affliction call
	  if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
		string = call..snd.sep..string
    end
	
  
		-- we don't want to resend our existing attack, so check against that
		if string ~= snd.last_attack and not snd.waiting.queue then
			-- if we've got a new attack now, 
			snd.last_attack = string
      cecho("\n&lt;white&gt;"..string)
			snd.attack(snd.last_attack)
			-- manage the anti-spam check below
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function() -- make sure to actually send the attack once on use!
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gli$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Ascendril</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offense</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
			
	if snd.glimpse == "none" and snd.checkAff("stormtouched") and not snd.glimpsing then
		string = "fulcrum glimpse air"
	elseif snd.glimpse == "none" and not snd.checkAff("stormtouched") then
		string = "fulcrum glimpse fire"
	end

	if snd.checkAff("stormtouched") and not snd.used.shield then
		string = string..snd.sep.."cast lightning "..snd.target
  elseif snd.used.shield or snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) or (snd.limb_status["left leg"] ~= "healed" or snd.limb_status["right leg"] ~= "healed") and not snd.proned() then
				string = "cast windlance " .. snd.target
	else
  	if snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
  	
  		if gmcp.Char.Vitals.ability_bal == "1" then
  			string = "fulcrum flare "..snd.target
  		end
  		
  		if gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "water" then
  			string = string..snd.sep.."fulcrum enrich fire"
  		end
  
  		if gmcp.Char.Vitals.resonance == "fire" then
  			string = string..snd.sep.."cast windlance "..snd.target
  		end
  
  		if gmcp.Char.Vitals.resonance == "air" then
  			string = string..snd.sep.."cast fireball "..snd.target
  		end
	end
end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^damage$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>ablaze</name>
									<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local limbs = {"head", "left leg", "torso", "right leg", "left arm", "right arm"}
		local targ = "nothing"
		
		for limb in pairs(limbs) do
			-- ignore last parried, last hit, and any limbs being resto'd
			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and limbs[limb] ~= snd.resto_limb then
				if targ == "nothing" then
					targ = limbs[limb]
				end
			end
		end
			
	if snd.used.shield then
		string = string..snd.sep.."cast windlance "..snd.target
	end
			
	if snd.glimpse == "none" and not snd.glimpsing then
		string = "fulcrum glimpse fire"
	end

	if snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
	
		if gmcp.Char.Vitals.ability_bal == "1" then
			string = "fulcrum flare "..snd.target
		end
		
		if gmcp.Char.Vitals.resonance ~= "fire" then
			string = string..snd.sep.."fulcrum enrich fire"
		end
		
		if gmcp.Char.Vitals.resonance == "fire" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				string = string..snd.sep.."fulcrum stall 3 firelash "..snd.target.." "..targ
			else
				string = string..snd.sep.."cast firelash "..snd.target.." "..targ
			end
		end

	end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
	
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fire$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Utility Aliases</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Manually reset glimpse</name>
									<script>if matches[2] == "none" then
  snd.glimpse = "none"
  snd.glimpsing = false
else
  snd.glimpse = matches[2]
  snd.glimpsing = true
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^glimpse (\w+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>order loyals aggro</name>
									<script>send("order efreeti kill "..snd.target)</script>
									<command></command>
									<packageName></packageName>
									<regex>^olk$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>order loyals stop aggro</name>
									<script>send("order loyals passive")</script>
									<command></command>
									<packageName></packageName>
									<regex>^olp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Trace Clarity</name>
									<script>send("outc topazdust"..snd.sep.."outc diamonddust"..snd.sep.."trace clarity")</script>
									<command></command>
									<packageName></packageName>
									<regex>^crune$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Prop Aegis</name>
									<script>send("cast ensorcell aegis")</script>
									<command></command>
									<packageName></packageName>
									<regex>^prop$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Soar</name>
									<script>send("qeb cast soar "..matches[2])</script>
									<command></command>
									<packageName></packageName>
									<regex>^soar (\w+)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Remote Aliases</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>fireball</name>
									<script>send("qeb cast prism fireball "..snd.target..""..snd.sep.."cast fireball "..snd.target)</script>
									<command></command>
									<packageName></packageName>
									<regex>^fb$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>affs</name>
									<script>if snd.class == "Ascendril" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}

		local extraaff = ""
		
			snd.giving = {
			"clumsiness",
			"paresis",
			"haemophilia",
			"asthma",
			"slickness",
			"anorexia",
			"stupidity",
			}
			
	for i in pairs(snd.giving) do
		-- make sure not to double up paresis and paralysis
		if not snd.checkAff(snd.giving[i]) then
			-- and don't add an aff we've already got in the list!
			if not table.contains(touse, snd.giving[i]) then
				table.insert(touse, snd.giving[i])
			end
		end
	end
	-- now let's convert affs to venoms/empowerments
	for aff in pairs(touse) do
		table.insert(tohit, snd.effects[touse[aff]])
	end
	-- if we didn't find enough stuff to hit with, stick in our filler
	while #tohit &lt; 3 do
		table.insert(tohit, extraaff)
	end
			
	if snd.glimpse == "none" and not snd.checkAff("thunderbrand") and not snd.glimpsing then
		string = "fulcrum glimpse air"
	elseif snd.glimpse == "none" and snd.checkAff("thunderbrand") then
		string = "fulcrum catalyst "..snd.target.." air"
	end

	if snd.checkAff("stormtouched") then
		string = string..snd.sep.."cast lightning "..snd.target
	elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
	
		if snd.checkAff("vertigo") then
			string = "fulcrum flare"
		end
		
		if gmcp.Char.Vitals.resonance == "" or gmcp.Char.Vitals.resonance == "none" or gmcp.Char.Vitals.resonance == "fire" then
			string = "fulcrum enrich air"
		end

		if gmcp.Char.Vitals.resonance == "water" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				string = string..snd.sep.."fulcrum stall 3 pressurize "..snd.target
			elseif snd.defenses.def_stalled.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."cast windlance "..snd.target
				else
					if snd.checksomeAffs({"dizziness", "stupidity"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast lightning "..snd.target
					end
				end
			end

		elseif gmcp.Char.Vitals.resonance == "air" then
			if snd.defenses.def_stalled.state ~= "deffed" then
				if snd.checksomeAffs({"dizziness", "stupidity"},2) and not snd.proned then
					string = string..snd.sep.."fulcrum stall 3 frostblade "..snd.target.." "..tohit[2]
				else
					string = string..snd.sep.."fulcrum stall 3 thunder "..snd.target
				end
			elseif snd.defenses.def_stalled.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."cast windlance "..snd.target
				elseif snd.proned then
					if snd.checksomeAffs({"lethargy", "confusion"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast hailstorm "..snd.target
					end
				elseif not snd.proned then
					if snd.checksomeAffs({"masochism", "stupidity"},2) then
						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."cast coldsnap "..snd.target
					end
				end
			end
		end

end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^affs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>group affs (stine)</name>
									<script>if snd.class == "Ascendril" then
  snd.starting_attack()
  function snd.attack_function()
    if not snd.waiting.queue then
  		local string = ""
  		local call = "" 
      local can_we_stall = false; if snd.defenses.def_stalled.state ~= "deffed" then can_we_stall = true end
  		local can_we_flare = false; if gmcp.Char.Vitals.ability_bal ==  "1" then can_we_flare = true end
      local resonance = gmcp.Char.Vitals.resonance
      local random_limb = {"right leg", "right arm", "left leg", "left arm", "head", "torso"}
  		local touse = {}
  		local tohit = {}
      
  		local extraaff = "epseth"
  		
  		snd.giving = {                                             
  			"asthma",
  			"slickness",
  			"anorexia",
  			"stupidity",
        "weariness",
        "dizziness",
        "vomiting",
        "recklessness",
        }
  			
    	for i in pairs(snd.giving) do
    		if not snd.checkAff(snd.giving[i]) then
    			if not table.contains(touse, snd.giving[i]) then
    				table.insert(touse, snd.giving[i])
    			end
    		end
    	end
     
    	for aff in pairs(touse) do
    		table.insert(tohit, snd.effects[touse[aff]])
    	end
     
    	while #tohit &lt; 3 do
    		table.insert(tohit, extraaff)
    	end
    			
    	if snd.glimpse == "none" and not snd.glimpsing then
    		--string = "fulcrum glimpse air"
    	end
    
    	if snd.glimpse == "none" then
    	
    		if can_we_flare and snd.checkAff("vertigo") and not snd.checkAff("muddled") then
    			string = "fulcrum flare"
    		end
  
    		if (resonance == "" or resonance == "none" or resonance == "fire") and snd.balance.enrich then
    			string = "fulcrum enrich air"
    		 end
        
        if snd.used.shield then
    			string = string..snd.sep.."cast windlance "..snd.target
          
    		elseif resonance == "water" then
    			if can_we_stall then
            string = string..snd.sep.."fulcrum stall 3 "
            if not snd.checksomeAffs({"vertigo", "confusion"}, 1) and not snd.checkAff("weariness") then
    				  string = string.." pressurize "..snd.target
            elseif not snd.checksomeAffs({"dizziness", "stupidity"}, 2) then
              string = string.."thunder "..snd.target
            else  
              string = string.."firelash  "..snd.target..random_limb[math.random(#random_limb)]
            end 
    			else
  					if not snd.checksomeAffs({"dizziness", "stupidity"},2) then
            	string = string..snd.sep.."cast lightning "..snd.target
  					else
  						string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
  					end
    			end
    
    		elseif resonance == "air" then
    			if can_we_stall then
            string = string..snd.sep.."fulcrum stall 3 "
    				if not snd.checksomeAffs({"stupidity, masochism"}, 2) then
              string = string.."coldsnap "..snd.target
    				elseif not snd.checkAff("lethargy") then
    					string = string.."hailstorm "..snd.target
            else
    					string = string.."firelash  "..snd.target..random_limb[math.random(#random_limb)]
    				end
    			else            
    				if not snd.checksomeAffs({"lethargy", "confusion"},2) and snd.proned and snd.stalled_skill ~= "hailstorm" then
    					string = string..snd.sep.."cast hailstorm "..snd.target
    				elseif not snd.checksomeAffs({"masochism", "stupidity"},2) and snd.stalled_skill ~= "coldsnap" then
    					string = string..snd.sep.."cast coldsnap "..snd.target
            else
              string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
    				end
          end
  			elseif resonance ==  "fire" then
    			if can_we_stall then
            string = string..snd.sep.."fulcrum stall 3 "
    				if not snd.checksomeAffs({"vertigo", "confusion"},2) and not snd.checkAff("clumsiness") then
    					string = string.."pressurize "..snd.target
    				elseif not snd.checksomeAffs({"stupidity, recklessness"}, 2) then
              string = string.."coldsnap "..snd.target
            else
    					string = string.."firelash  "..snd.target..random_limb[math.random(#random_limb)]
    				end
    			else            
    				if snd.timer_check("restoration", .5) and not snd.checksomeAffs({"anorexia", "indifference"}, 2) then
    					string = string..snd.sep.."cast gorge "..snd.target
    				elseif not snd.checksomeAffs({"masochism", "stupidity"},2) and snd.stalled_skill ~= "coldsnap" then
    					string = string..snd.sep.."cast coldsnap "..snd.target
            else
              string = string..snd.sep.."cast frostblade "..snd.target.." "..tohit[1]
    				end
          end
    		end
      end
  
    	if string ~= snd.last_attack and not snd.waiting.queue then
    		snd.last_attack = string
    		snd.attack(snd.last_attack)
    		snd.waiting.queue = true
    		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    	end
      end
    end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limbs / Salves</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>solo shatter</name>
									<script>if snd.class == "Ascendril" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      local limbs = {"left leg", "right leg", "left arm", "right arm"}
      local targ = "nothing"
      local stalled = false
      if snd.defenses.def_stalled.state == "deffed" then
        stalled = true
      end
      for limb in pairs(limbs) do
        -- ignore last parried, last hit, and any limbs being resto'd
        if
          limbs[limb] ~= snd.parried_limb and
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == "nothing" then
            targ = limbs[limb]
          end
        end
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("frostbrand") then
        string = "fulcrum glimpse water"
      elseif snd.glimpse == "none" and snd.checkAff("frostbrand") then
        string = "fulcrum catalyst " .. snd.target .. " frost"
      elseif snd.used.shield == true then
        string = "cast windlance " .. snd.target
      elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "fulcrum flare " .. snd.target
        end
        if gmcp.Char.Vitals.resonance == "water" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.resonance == "fire" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.resonance == "air" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " " .. targ
            end
          elseif stalled then
            --not snd.direfrost and not snd.checkAff("frostbrand") then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("direfrost") and
              not snd.checkAff("frostbrand")
            then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast firelash " .. snd.target .. " " .. targ
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^solo$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>frozen</name>
									<script>if snd.class == "Ascendril" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      -- next, the afflictions we want to give
      local touse = {}
      local tohit = {}
      local stalled = false
      if snd.defenses.def_stalled.state == "deffed" then
        stalled = true
      end

      local extraaff = ""
      snd.giving = {"anorexia"}
      for i in pairs(snd.giving) do
        -- make sure not to double up paresis and paralysis
        if not snd.checkAff(snd.giving[i]) then
          -- and don't add an aff we've already got in the list!
          if not table.contains(touse, snd.giving[i]) then
            table.insert(touse, snd.giving[i])
          end
        end
      end
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end
      -- if we didn't find enough stuff to hit with, stick in our filler
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("frostbrand") then
        string = "fulcrum glimpse water"
      elseif snd.glimpse == "none" and snd.checkAff("frostbrand") then
        string = "fulcrum catalyst " .. snd.target .. " frost"
      elseif snd.used.shield or 
			(snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"},1) or snd.limb_status["left leg"] ~= "healed" or snd.limb_status["right leg"] ~= "healed") and not snd.proned() then
				string = "cast windlance " .. snd.target
      elseif snd.glimpse == "water" or snd.glimpse == "fire" or snd.glimpse == "air" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "fulcrum flare " .. snd.target
        end
        if gmcp.Char.Vitals.resonance == "water" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "fulcrum stall 3 mistral " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            else
              string = string .. snd.sep .. "cast mistral " .. snd.target
						end
          end
        elseif gmcp.Char.Vitals.resonance == "fire" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "fulcrum stall 3 coldsnap " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "cast gorge " .. snd.target .. " euphoriant"
						else
							string = string .. snd.sep .. "cast hailstorm " .. snd.target
            end
          end
        elseif gmcp.Char.Vitals.resonance == "air" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "fulcrum stall 3 firelash " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "fulcrum stall 3 hailstorm " .. snd.target
            end
          elseif stalled then
           if snd.checkAff("shivering") and not snd.checkAff("direfrost") and not snd.checkAff("frostbrand") then
              string = string .. snd.sep .. "cast direfrost " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "cast icicle " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "cast gorge " .. snd.target .. " euphoriant"
						elseif not snd.checkAff("masochism") then
							string = string .. snd.sep .. "cast coldsnap " ..snd.target
						else
							string = string .. snd.sep .. "cast hailstorm " ..snd.target
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^freeze$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Luminary</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Spirituality</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>beckon</name>
									<script>if snd.class == "Luminary" then
if matches[2] == "" then
 snd.send("qeb angel beckon "..snd.target)
elseif matches[2] == "all" then
 snd.send("qeb angel beckon")
else
 snd.send("qeb angel beckon "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bk(.*)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Devotion</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>force stop</name>
									<script>if snd.class == "Luminary" then
 if snd.toggles.attacking then snd.toggle("attacking") end
 if matches[2] == "" then
  snd.send("qeb perform force "..snd.target.." stop")
 else
  snd.send("qeb perform force "..matches[2].." stop")
 end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fs(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>resurrection</name>
									<script>if snd.class == "Luminary" then
if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb perform resurrection "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Luminary" then
snd.giving_shield = {
"sight",
"paresis",
"weariness",
"asthma",
}
snd.giving_battle = {
"impatience",
"sensitivity",
"stupidity",
"vertigo",
"self_pity",
"migraine",
}
snd.giving_chasten = {
"loneliness",
"hypochondria",
"stupidity",
"lethargy",
"dementia",
"recklessness",
"masochism",
"paranoia"
}
snd.starting_attack()
function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
 local shield = "none"
 local battle = "none"
 local chasten = "none"
 if snd.mana_percent &lt; 40 and not snd.used.shield then
  string = "angel absolve "..snd.target
 elseif snd.proned() then
  string = "shield overwhelm "..snd.target
 elseif table.contains(snd.target_has, "sight") then
  string = "evoke transfixion "..snd.target
 else
  if snd.balance.battle then
   for i in pairs(snd.giving_battle) do
	  if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
	   battle = snd.giving_battle[i]
	  end
	 end
  end
  if snd.used.shield then
   shield = "shield raze"
  else
   for i in pairs(snd.giving_shield) do
    if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
	   shield = snd.spirituality_attacks[snd.giving_shield[i]]
	  end
   end
  end
  if shield == "none" then
   shield = "shield strike"
  end
  if snd.used.rebounding and shield ~= "facesmash" then
   shield = "shield raze"
  end
  for i in pairs(snd.giving_chasten) do
   if not snd.checkAff(snd.giving_chasten[i]) and chasten == "none" and snd.giving_chasten[i] ~= battle then
	  chasten = snd.giving_chasten[i]
	 end
  end
  if battle ~= "none" then
   if snd.toggles.affcalling and not snd.target_gone then
	  string = "wt Battle "..snd.target..": "..battle..snd.sep
	 end
   string = string.."angel battle "..battle.." "..snd.target..snd.sep
  end
  string = string..shield.." "..snd.target..snd.sep
  if shield ~= "slam" and shield ~= "overwhelm" then
   if chasten == "none" then
    string = string.."chasten "..snd.target
   else
	  if snd.toggles.affcalling and not snd.target_gone then
	   string = string.."wt Chasten "..snd.target..": "..chasten..snd.sep
	  end
    string = string.."chasten "..snd.target.." "..chasten
	 end
  end
 end
 
 if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then 
 	string = string..snd.sep.."quickwield left tower"
 end

 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Affs - Used to lock someone in place</name>
									<script>-- The purpose of this is to lock someone down with disrupt so they cannot use lock-breakers to escape.
if snd.class == "Luminary" then
  snd.giving_shield = {"sight", "paresis", "weariness", "confusion", "writhe_transfix", "asthma", "misery"}
  snd.giving_battle = {"impatience", "stupidity", "sensitivity", "self_pity", "vertigo"}
  snd.giving_chasten = {"hypochondria", "stupidity", "recklessness", "lethargy", "masochism", "dementia", "paranoia", "anorexia",}
  snd.starting_attack()

  function snd.attack_function()
    local total_aff_count = snd.aff_count_all()
    local mental_aff_count = snd.aff_count_mental()
  
    local string = "contemplate " .. snd.target .. snd.sep
    if not string.find(gmcp.Char.Vitals.wield_right, "mace") then
      string = string .. "quickwield right mace" .. snd.sep
    end
    if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then
      string = string .. "quickwield left buckler" .. snd.sep
    end
    local shield = "none"
    local battle = "none"
    local chasten = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
    else
      --battle aff pick
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end
      --If they have shield we can do nothing
      if snd.used.shield then
        shield = "shield raze"
        --If they are prone/psuedo prone and have 5 affs, smack them
      elseif total_aff_count &gt;= 5 and snd.proned() then
        shield = "shield overwhelm " .. snd.target
        --We need to build up disrupt/affs.
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.spirituality_attacks[snd.giving_shield[i]]
          end
        end
        --If they have 2 mental affs and confusion is one of them, disrupt ASAP to lock them in place.
        if
          mental_aff_count &gt;= 2 and
          snd.checkAff("confusion") and
          not snd.checkAff("disrupted") and
          total_aff_count &lt; 7
        then
          shield = "shield crash"
        end
      end
      --Dazzle can hit through rebounding, check if they have confusion first and a few affs
      if snd.used.rebounding then
        if snd.checkAff("confusion") or total_aff_count &lt; 3 then
          shield = "shield raze"
        else
          shield = "perform dazzle"
        end
      end
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      --Start building our attack - battle first
      if battle ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep
        end
        string = string .. "angel battle " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/evoke/perform attacks
      string = string .. shield .. " " .. snd.target .. snd.sep
      --Add chasten choice
      if not (shield:find("slam") or shield:find("transfix") or shield:find("dazzle") or shield:find("crash") or shield:find("facesmash")) then
        if chasten == "none" then
          string = string .. "chasten " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .. "chasten " .. snd.target .. " " .. chasten
        end
      end
    end
    --Are we gonna smack them with overwhelm? Let's make it hurt.
    if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then
      string = string..snd.sep.."quickwield left tower"
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mana drain</name>
									<script>if snd.class == "Luminary" then
  snd.giving_battle = {"stupidity", "vertigo", "self_pity", "migraine", "sensitivity", "impatience"}
  snd.giving_chasten =
    {
      "lethargy",
      "loneliness",
      "stupidity",
      "hypochondria",
      "dementia",
      "recklessness",
      "masochism",
      "paranoia",
    }
  snd.starting_attack()

  function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local battle = "none"
    local chasten = "none"
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
    elseif snd.mana_percent &lt; 40 and snd.used.shield then
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      string = "shield raze " .. snd.target .. snd.sep
      if snd.toggles.affcalling and not snd.target_gone then
        string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
      end
      string = string .. "chasten " .. snd.target .. " " .. chasten
    else
      string = string.."angel sap " .. snd.target
    end
		
    if snd.balance.battle then
      for i in pairs(snd.giving_battle) do
        if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
          battle = snd.giving_battle[i]
        end
      end
    end
    string = "angel battle " .. battle .. " " .. snd.target .. snd.sep .. string
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep .. string
    end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mana$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Impale/Tfix</name>
									<script>--This is for quick kills with sensitivity/transfix/impale/overwhelm/disembowel.
--May have tougher time on hardier opponents.
--May vary in usefulness depending on damage output.
if snd.class == "Luminary" then
  snd.giving_shield = {"paresis", "weariness", "sight", "asthma"}
  snd.giving_battle = {"impatience", "sensitivity", "self_pity", "stupidity", "vertigo"}
  snd.giving_chasten =
    {
      "hypochondria",
      "loneliness",
      "recklessness",
      "stupidity",
      "lethargy",
      "masochism",
      "dementia",
      "paranoia",
      "anorexia",
    }
  snd.starting_attack()

  function snd.attack_function()
    local total_aff_count = snd.aff_count_all()
    local mental_aff_count = snd.aff_count_mental()
  
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local shield = "none"
    local battle = "none"
    local chasten = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "angel absolve " .. snd.target
      --They've hit our aff count limit, let's lock them down/kill them.
    elseif total_aff_count &gt;= 4 and snd.checkAff("sight") and not snd.used.shield then
      if not snd.checkAff("writhe_transfix") then
        string = "evoke transfixion " .. snd.target
      else
        string = "shield overwhelm " .. snd.target
        if snd.checkAff("hearing") and not snd.checkAff("sensitivity") then
          string = "angel battle " .. snd.target .. " sensitivity" .. snd.sep .. string
        end
      end
      --Need to pile a few affs on still. Aiming for at least 4 before overwhelm so by the time
      --we get to overwhelm, they're in the overwhelm aff/damage scaling range.	
    else
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end
      if snd.used.shield then
        shield = "shield raze"
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.spirituality_attacks[snd.giving_shield[i]]
          end
        end
      end
      if shield == "none" then
        shield = "shield strike"
      end
      if snd.used.rebounding and shield ~= "facesmash" then
        shield = "shield raze"
      end
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if
          not snd.checkAff(snd.giving_chasten[i]) and
          chasten == "none" and
          snd.giving_chasten[i] ~= battle
        then
          chasten = snd.giving_chasten[i]
        end
      end
      --Start building our attack - battle first
      if battle ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep
        end
        string = string .. "angel battle " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/evoke/perform attacks
      string = string .. shield .. " " .. snd.target .. snd.sep
      --Add chasten choice
      if shield ~= "slam" then
        if chasten == "none" then
          string = string .. "chasten " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .. "chasten " .. snd.target .. " " .. chasten
        end
      end
    end
    --Are we gonna smack them with overwhelm? Let's make it hurt.
    if string.find(string, "overwhelm") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then
      string = "quickwield left tower"..string..snd.sep
    end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^git$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Lumi damage</name>
									<script>if snd.class == "Luminary" then
  snd.giving_battle = {"impatience", "sensitivity","vertigo", "stupidity", "self_pity", "berserking", "migraine", "anorexia"}
  snd.giving_chasten =
    {
      "hypochondria",
      "self_loathing",
      "agony",
      "lethargy",
      "recklessness",
      "masochism",
	    "dementia",
	    "stupidity",
	    "anorexia",
      "paranoia",
      "lethargy",
    }
  snd.starting_attack()

  function snd.attack_function()
  local string = "contemplate "..snd.target..snd.sep
     if not string.find(gmcp.Char.Vitals.wield_right, "mace") then string = string.."quickwield right mace"..snd.sep end
    if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
  
  local battle = "none"
  local chasten = "none"
    
  if snd.balance.battle then
    for i in pairs(snd.giving_battle) do
      if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
        battle = snd.giving_battle[i]
      end
    end
  end
  
  for i in pairs(snd.giving_chasten) do
    if not snd.checkAff(snd.giving_chasten[i]) and chasten == "none" and snd.giving_chasten[i] ~= battle then
      chasten = snd.giving_chasten[i]
    end
  end  
  
  if snd.balance.battle then
    string = string..snd.sep.."angel battle "..battle.." "..snd.target..snd.sep
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt Battle " .. snd.target .. ": " .. battle .. snd.sep .. string
    end
  end

  if snd.used.shield then
  	string = string.."shield raze " .. snd.target .. snd.sep
  elseif snd.mana_percent &lt; 40 then
      string = string.."angel absolve " .. snd.target
  elseif snd.proned() then
    string = string.."quickwield left tower"..snd.sep.."shield overwhelm "..snd.target..snd.sep
  elseif snd.used.rebounding then
  	string = string.."shield raze " .. snd.target .. snd.sep
  else
    string = string.."smite " .. snd.target .." secret"..snd.sep.."angel power"..snd.sep
  end

  if snd.toggles.affcalling and not snd.target_gone then
    string = string .. "wt Chasten " .. snd.target .. ": " .. chasten .. snd.sep
  end
  string = string .. " chasten " .. snd.target .. " " .. chasten
        
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Oneiromancer</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Oneiromancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "touch hammer "..snd.target
  else
   	string = "starlight "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Deform Damage</name>
									<script>-- Note: this alias was placed as an example and haw flaws - parts may not work. Toy with at your discrection.

if snd.class == "Oneiromancer" then
 
	snd.giving = {
		"asthma",
		"aeon",
		"impatience",
		"clumsiness",
		"perplexed",
		"weariness",
		"stupidity",
		"anorexia",
		"epilepsy",
		"sensitivity",
		"vomiting",
		"lethargy",
		"confusion",
		"recklessness",	
		"superstition",
		"berserking",
		"hypersomnia",
	}
 
	snd.starting_attack()
 
	function snd.attack_function() 
		local string = ""
		local raw_affs_to_fling = {}
		local cards = {one = {affliction = "", card = ""}, two = {affliction = "", card = ""}}
 
		if not snd.waiting.queue then
 
			if snd.used.shield then
				string = "order cerberus attack "..snd.target..snd.sep
			elseif snd.theytumbling then
				string ="unfurl hourglass and favor at "..snd.target..snd.sep
			elseif snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled", "leeched_aura"}, 5) then
				string = "vanquish "..snd.target
			elseif not snd.need_deform then
				string = "starlight "..snd.target..snd.sep  
			elseif snd.checksomeAffs({"anorexia", "asthma"}, 2) and not snd.checkAff("slickness") then
				string = "impel athame at "..snd.target.." gecko"..snd.sep
			else -- No special attacks, time to run through our aff list defined above and see what we want to give most.
				for i in pairs(snd.giving) do
					if not snd.checkAff(snd.giving[i]) then
						if snd.giving[i] == "aeon" then
							if snd.balance.aeon then
								if snd.checkAff("clumsiness") or snd.checkAff("weariness") then
									table.insert(raw_affs_to_fling, snd.giving[i])
								end
							end
						elseif not table.contains(raw_affs_to_fling, snd.giving[i]) then
							table.insert(raw_affs_to_fling, snd.giving[i]) -- insert into a raw aff list that they don't have, based on priority chosen above
						end
					end
				end
 
				for k, v in ipairs(raw_affs_to_fling) do -- run through the raw affs
					if cards.one.affliction == "" then -- fill in card one, could start with card two if you want to work around dodge CD
						if snd.cardshapes.oneiromancer[v].card == "diamond" then
							if not snd.adder_attached then-- Make sure that if we're picking an adder venom, we haven't already thrown adder
								cards.one.affliction = v
								cards.one.card = snd.cardshapes.oneiromancer[v].card
							end
						else
							cards.one.affliction = v
							cards.one.card = snd.cardshapes.oneiromancer[v].card
						end
					elseif cards.one.card ~= snd.cardshapes.oneiromancer[v].card and cards.two.affliction == "" then -- if card types are different and haven't already set card two
						if snd.cardshapes.oneiromancer[v].card == "diamond" then
							if not snd.adder_attached then -- Make sure that if we're picking an adder venom, we haven't already thrown adder
								cards.one.affliction = v
								cards.one.card = snd.cardshapes.oneiromancer[v].card
							end
						else
							cards.two.affliction = v
							cards.two.card = snd.cardshapes.oneiromancer[v].card
						end
					end
				end
 
				-- If the card is an adder venom affliction, convert the affliction to the venom.
				if cards.one.card == "diamond" then cards.one.affliction = snd.effects[cards.one.affliction] end
				if cards.two.card == "diamond" then cards.two.affliction = snd.effects[cards.two.affliction] end
 
			end
 
			if not snd.loyalsattacking then
				string = "order loyals kill "..snd.target..snd.sep..string
			end
 
			if snd.need_leech_aura then
				string = "unspool "..snd.target
			end
 
			if snd.balance.soulmaster and not snd.checkAff("slickness") then
				string = "order "..snd.target.." apply epidermal to head"..snd.sep
			end
 
			if snd.balance.envelop then
				if not snd.checksomeAffs({"anorexia", "slickness", "asthma"}, 1) then
					string = "order blob envelop"..snd.sep
				end
			end
 
			if not snd.need_deform then
				string = string..snd.sep.."order quetzal wingbeat "..snd.target..snd.sep
			end
 
			if snd.need_deform then
				if snd.aff_count_all() &gt; 11 then
					string = "disjunct "..snd.target..snd.sep
				end
			end
 
			if snd.adder_ready then
				string = string..snd.sep.."activate diamond "..snd.target..snd.sep
			end
 
			string = string..snd.sep.."unfurl "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
 
			if snd.toggles.affcalling and not snd.target_gone then
				call = "wt Afflicting "..snd.target..": "..cards.one.affliction..", "..cards.two.affliction..snd.sep
				string = call..snd.sep..string
			end
 
 
			if string ~= snd.last_attack and not snd.waiting.queue then
				snd.last_attack = string
				snd.attack(snd.last_attack)
				snd.waiting.queue = true
				tempTimer(snd.delay(), [[snd.waiting.queue = false]])
			end
		end
	end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg2$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Affliction</name>
									<script>if snd.class == "Oneiromancer" then
  snd.giving =
    {
      "asthma",
      "aeon",
      "perplexed",
      "impatience",
      "clumsiness",
      "weariness",
      "stupidity",
      "anorexia",
      "epilepsy",
      "sensitivity",
      "vomiting",
      "lethargy",
      "confusion",
      "recklessness",
      "superstition",
      "hypersomnia",
    }
  snd.starting_attack()

  function snd.attack_function()
    local string = ""
    local raw_affs_to_fling = {}
    local cards = {one = {affliction = "", card = ""}, two = {affliction = "", card = ""}}
    if not snd.waiting.queue then
      -- all instakill conditions(deform/vivi) or other add ons should go here as elseif.
      if snd.used.shield then
        string = "touch hammer " .. snd.target
        -- vivi/deform checks would prolly go here
      elseif snd.theytumbling then
        string = "impel athame at "..snd.target.." prefarar"..snd.sep    
      elseif snd.aff_count_all() &gt; 10 then
        string = "starlight " .. snd.target
      else

        for i in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[i]) then
            if snd.giving[i] == "aeon" then
              if snd.balance.aeon then
                table.insert(raw_affs_to_fling, snd.giving[i])
              end
            elseif not table.contains(raw_affs_to_fling, snd.giving[i]) then
              table.insert(raw_affs_to_fling, snd.giving[i])
              -- insert into a raw aff list that they don't have, based on priority chosen above
            end
          end
        end
        for k, v in ipairs(raw_affs_to_fling) do
          -- run through the raw affs
          if cards.one.affliction == "" then
            -- fill in card one, could start with card two if you want to work around dodge CD
            if snd.cardshapes.oneiromancer[v].card == "diamond" then
              if not snd.adder_attached then
                -- Make sure that if we're picking an adder venom, we haven't already thrown adder
                cards.one.affliction = v
                cards.one.card = snd.cardshapes.oneiromancer[v].card
              end
            else
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.oneiromancer[v].card
            end
          elseif
            cards.one.card ~= snd.cardshapes.oneiromancer[v].card and cards.two.affliction == ""
          then
            -- if card types are different and haven't already set card two
            if snd.cardshapes.oneiromancer[v].card == "diamond" then
              if not snd.adder_attached then
                -- Make sure that if we're picking an adder venom, we haven't already thrown adder
                cards.one.affliction = v
                cards.one.card = snd.cardshapes.oneiromancer[v].card
              end
            else
              cards.two.affliction = v
              cards.two.card = snd.cardshapes.oneiromancer[v].card
            end
          end
        end
        -- If the card is an adder venom affliction, convert the affliction to the venom.
        if cards.one.card == "diamond" then
          cards.one.affliction = snd.effects[cards.one.affliction]
        end
        if cards.two.card == "diamond" then
          cards.two.affliction = snd.effects[cards.two.affliction]
        end
        if snd.need_leech_aura then
          string = "unspool " .. snd.target
        end
        if snd.adder_ready then
          string = string .. snd.sep .. "activate diamond " .. snd.target
        end
        -- Syntax should be the same unless you have arti deck/regular deck, change next line as necessary
        -- Similarly, if you're using config auto_outc, feel free to remove outcping paper
        string = string..snd.sep.."outc sheet as "..cards.one.card..snd.sep.."outc sheet as "..cards.two.card
        string = string..snd.sep.."unfurl "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
        if snd.toggles.affcalling and not snd.target_gone then
          call = "wt Afflicting "..snd.target..": "..cards.one.affliction ..", "..cards.two.affliction..snd.sep
          string = call .. string
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Oneiromancer" then

  snd.giving = {"left_leg_crippled", "right_leg_crippled","left_arm_crippled", "right_arm_crippled",}
  
  snd.starting_attack()
  
  function snd.attack_function()
    local string = ""
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer "..snd.target
      elseif snd.theytumbling then
        string = "impel athame at "..snd.target.." prefarar"..snd.sep    
      elseif snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled", "leeched_aura"}, 5) then
        string = "vanquish "..snd.target
      elseif not snd.checksomeAffs(snd.giving, 4) then
        for v in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[v])  then
            string = "misfortune "..snd.target.." "..snd.giving[v]:gsub("_", " "):gsub("crippled", "")
            break
          end
        end
      else
        string = "starlight "..snd.target
      end
      
      if snd.need_leech_aura then
        string = "unspool "..snd.target..snd.sep..string
      end 

      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
  
    end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limb$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Vivi 2.0</name>
									<script>if snd.class == "Oneiromancer" then

  snd.giving = {"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled",}
  
  snd.starting_attack()
  
  function snd.attack_function()
  
  local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
  local string = ""
  if not snd.waiting.queue then
    if hp &lt;= 40 and snd.balance.crystal then
      string = "touch crystal"
    elseif snd.used.shield then
  		string = "touch hammer "..snd.target
    elseif snd.theytumbling then
        string = "impel athame at "..snd.target.." prefarar"..snd.sep    
    elseif hp &lt;= 75 then
      string = "unfurl flower at me"
    elseif snd.aff_tally() &gt; 3 and snd.balance.fool then
      string = "unfurl fire at me"
    elseif snd.used.shield then
      string = "touch hammer "..snd.target
    elseif snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled", "leeched_aura"}, 5) then
      string = "vanquish "..snd.target
    elseif not snd.checksomeAffs(snd.giving, 4) then
      for v in pairs(snd.giving) do
        if not snd.checkAff(snd.giving[v])  then
          string = "misfortune "..snd.target.." "..snd.giving[v]:gsub("_", " "):gsub("crippled", "")
          break
        end
      end
    elseif snd.aff_count_all() &gt; 10 then
      string = "disjunct "..snd.target    
    else
      string = "chill "..snd.target
    end
      
      if snd.need_leech_aura then
        string = "unspool "..snd.target..snd.sep..string
      end 

      if snd.balance.chimera then
          string = "order quetzal croon"..snd.sep..string
      end

      if snd.balance.envelop and snd.balance.soulmaster and string.find(string, "anorexia") then
        string = "order blob envelop"..snd.sep..string..snd.sep.."order "..snd.target.." apply restoration to arms"
      end

    if not snd.loyalsattacking then
        string = "order loyals kill "..snd.target..snd.sep..string
       end
      

      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
  
    end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^vivi$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Runecarver</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Afflictions</name>
									<script>if snd.class == "Runecarver" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."hex imperil "..snd.target
  elseif not snd.checkAff("gloom") then
		if hasSkill("Malady") then
			if gmcp.Char.Vitals.spiritpact &lt; "2" then
				string = string.."spiritpact despair "..snd.target..snd.sep.."hex malady "..snd.target
			else
				string = string.."hex despair "..snd.target
			end
		else
			if gmcp.Char.Vitals.spiritpact &lt; "2" then
				string = string.."shadowprice despair "..snd.target
			else
				string = string.."spiritpact despair "..snd.target
			end
		end
	elseif not snd.checksomeAffs({"clumsiness", "weariness", "lethargy", "paresis"}, 1) then
		if gmcp.Char.Vitals.spiritpact &lt; "2" then
			string = string.."spiritpact enervate "..snd.target
		else
			string = string.."hex enervate "..snd.target
		end
  elseif snd.checkAff("sight") and not snd.checkAff("mystified") then
		string = string.."hex mystify " ..snd.target..snd.sep
	elseif not snd.checksomeAffs({"vomiting", "haemophilia"}, 1) and hasSkill("Malady") then
		string = string.."hex malady "..snd.target
  else
   	string = string.."hex jinx "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Aff</name>
									<script>if snd.class == "Runecarver" then
  snd.starting_attack()
    function snd.attack_function()
     if not snd.waiting.queue then
      local string = ""
      local gstring = ""
      local call = ""
      local astring = ""
      local paystring = ""
    	local health = 100*(gmcp.Char.Vitals.maxhp)
      
      cecho("&lt;red&gt;\n"..snd.gravity.." " ..tonumber(gmcp.Char.Vitals.spiritpact))
    		
    	if not snd.checksomeAffs({"fungal_invasion","inoculated"}, 2) and not snd.used.shield then 
        gstring = "spore inoculate " ..snd.target..snd.sep.."spore infect " ..snd.target..snd.sep 
      else 
        gstring = "" 
      end
      if snd.repay  &lt; 2 and tonumber(gmcp.Char.Vitals.spiritpact) &gt;= 3 and not snd.checkAff("gloom") then 
        paystring = "hex obeisance"..snd.sep 
      elseif snd.repay &lt;1 and tonumber(gmcp.Char.Vitals.spiritpact) == 4 then
        paystring = "hex obeisance"..snd.sep
      else 
        paystring = "" 
      end
    
    	if snd.used.shield then
        if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
          astring = astring.."spiritpact imperil "..snd.target..snd.sep
          else
       	astring = astring.."hex imperil "..snd.target..snd.sep
        end
    	elseif not snd.checkAff("voidgaze") and tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
          astring = astring.."spiritpact mystify "..snd.target..snd.sep
      elseif not snd.checksomeAffs({"nyctophobia","haemophilia"},2) then
          astring = astring.."hex anathemise " ..snd.target..snd.sep     
      elseif not snd.checksomeAffs({"vomiting","haemophilia"},1) then
        if not snd.checkAff("gloom") and tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
          astring = astring.."spiritpact despair " ..snd.target..snd.sep.."hex malady " ..snd.target..snd.sep
        else
          astring = astring.."hex malady " ..snd.target..snd.sep
        end
      elseif not snd.checksomeAffs({"clumsiness","weariness","lethargy","paresis"},2) then
        if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 3 and not snd.checkAff("gloom") then
          astring = astring.."spiritpact despair " ..snd.target..snd.sep.."spiritpact enervate " ..snd.target..snd.sep
        elseif tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
          astring = astring.."spiritpact enervate " ..snd.target..snd.sep
        else
          astring = astring.."hex enervate " ..snd.target..snd.sep
        end
       else
        if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
          astring = astring.."spiritpact anathemise " ..snd.target..snd.sep
          else
          string = astring.."hex anathemise " ..snd.target..snd.sep
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
      string = paystring..gstring..astring
       snd.last_attack = string
       snd.attack(snd.last_attack)
       snd.waiting.queue = true
       tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
     end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic Damage</name>
									<script>if snd.class == "Runecarver" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."hex imperil "..snd.target
  elseif snd.checkAff("writhe_transfix") then
		if not snd.checkAff("gloom") then
			if hasSkill("Malady") then
				if gmcp.Char.Vitals.spiritpact &lt; "2" then
					string = string.."spiritpact despair "..snd.target..snd.sep.."hex malady "..snd.target
				else
					string = string.."hex despair "..snd.target
				end
			else
				if gmcp.Char.Vitals.spiritpact &lt; "2" then
					string = string.."spiritpact despair "..snd.target
				else
					string = string.."hex despair "..snd.target
				end
			end
		end
  else
   		if hasSkill("Bewitch") and snd.balance.sorcery_transfix then
				string = string.."runecarve bewitch "..snd.target
			elseif not snd.checkAff("rot_benign") then
				string = string.."hex revile "..snd.target
			end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Dmg</name>
									<script>if snd.class == "Runecarver" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local gstring = ""
  local call = ""
  local astring = ""
  local paystring = ""
	local health = 100*(gmcp.Char.Vitals.maxhp)
  
  	cecho("&lt;red&gt;\n"..snd.gravity.." " ..tonumber(gmcp.Char.Vitals.spiritpact))
		
--			if not snd.checksomeAffs({"fungal_invasion","inoculated"}, 2) and not snd.used.shield then gstring = "spore inoculate " ..snd.target..snd.sep.."spore infect " ..snd.target..snd.sep else gstring = "" end
      if snd.repay  &lt; 2 and tonumber(gmcp.Char.Vitals.spiritpact) &gt;= 3 and not snd.checkAff("gloom") then paystring = "hex obeisance"..snd.sep elseif snd.repay&lt;1 and tonumber(gmcp.Char.Vitals.spiritpact) == 4 then paystring = "hex obeisance"..snd.sep else paystring = "" end

	if snd.used.shield then
    if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
      astring = astring.."spiritpact imperil "..snd.target..snd.sep
      else
   	astring = astring.."hex imperil "..snd.target..snd.sep
    end
	elseif not snd.checkAff("voidgaze") and tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
      astring = astring.."spiritpact mystify "..snd.target..snd.sep
  elseif not snd.checksomeAffs({"nyctophobia","haemophilia"},2) then
      astring = astring.."hex anathemise " ..snd.target..snd.sep     
  elseif not snd.checksomeAffs({"vomiting","haemophilia"},1) then
    if not snd.checkAff("gloom") and tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
      astring = astring.."spiritpact despair " ..snd.target..snd.sep.."hex malady " ..snd.target..snd.sep
    else
      astring = astring.."hex malady " ..snd.target..snd.sep
    end
  elseif not snd.checksomeAffs({"clumsiness","weariness","lethargy","paresis"},2) then
    if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 3 and not snd.checkAff("gloom") then
      astring = astring.."spiritpact despair " ..snd.target..snd.sep.."spiritpact enervate " ..snd.target..snd.sep
    elseif tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
      astring = astring.."spiritpact enervate " ..snd.target..snd.sep
    else
      astring = astring.."hex enervate " ..snd.target..snd.sep
    end
   else
    if tonumber(gmcp.Char.Vitals.spiritpact) &lt; 4 then
      astring = astring.."spiritpact anathemise " ..snd.target..snd.sep
      else
      string = astring.."hex anathemise " ..snd.target..snd.sep
  end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
  string = paystring..astring
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gdmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs</name>
									<script>if snd.class == "Runecarver" then
  snd.starting_attack()  
  function snd.attack_function()
  
    local string = ""
    if not snd.waiting.queue then
      limbs = {"left leg", "right leg", "left arm", "right arm"}
      for limb in pairs(limbs) do
      -- ignore last hit and any limbs being resto'd
        if
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == nil then
            targ = limbs[limb]
          end
        end
      end

	if snd.used.shield then
   string = string.."hex imperil "..snd.target
	elseif gmcp.Char.Vitals.morass == "" then
		if hasSkill("Colonisation") then
			string = string.."spore colonise clutchgill"
		else
			string = string.."spore germinate"
		end
  elseif snd.gravity &lt; 5 then
		string = string.."spore ensnare "..snd.target
  else
		if not snd.checkAff(targ:gsub(" ","_").."_crippled") then 
			string = string.."spore degrade "..snd.target.." "..targ
		else
			if hasSkill("Bewitch") and snd.balance.sorcery_transfix  then
				string = string.."runecarve bewitch "..snd.target
			else
				string = string.."hex numb "..snd.target
			end
		end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Combination (Limb and Aff)</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Combo from Enebish</name>
									<script>if snd.class == "Runecarver" then

  local string = ""
  local paystring = ""
  shadowprice = tonumber(gmcp.Char.Vitals.spiritpact)
  
  local scourgecount = 0
  for aff in pairs(snd.scourge_affs) do
    if table.contains(snd.target_has, snd.scourge_affs[aff]) then
      scourgecount = scourgecount + 1
    end
  end
  if snd.used.shield then
    if shadowprice &lt; 2 then
      string = string .. "spiritpact imperil " .. snd.target .. snd.sep
    else
      string = string .. "hex imperil " .. snd.target
    end
 
  elseif snd.checksomeAffs({"prone", "nyctophobia"}, 2) and shadowprice &lt; 4 then
    string = "spiritpact mortis " .. snd.target
  elseif snd.checkAff("voidtrapped") then
    if snd.vt == true then
      string = "spore omophagia consume"
    else
      string = "spore omophagia spread"
    end
  elseif not snd.checkAff("gloom") and shadowprice &lt; 2 then
    string = "spiritpact despair " .. snd.target .. snd.sep .. "spiritpact mystify " ..snd.target
  elseif not snd.checkAff("voidgaze") and shadowprice &lt; 4 then
    string = "spiritpact mystify " ..snd.target
  elseif not snd.checksomeAffs({"clumsiness", "weariness", "lethargy", "paresis"}, 4) then
    if shadowprice &lt; 4 then
      string = "spiritpact enervate " .. snd.target
    else
      string = "hex enervate " .. snd.target
    end
  else
    string = "hex jinx " ..snd.target
  end
 
  if shadowprice &gt;= 4 then
    send("qeb hex obeisance")
  else
    send("qeb " ..string)
  end 
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^combo$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Aliases</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Sing Summon</name>
									<script>
if snd.class == "Runecarver" then
  snd.send("qeb spore colonise clutchgill hartsblood stormstem ravencap greycrown")
 end</script>
									<command></command>
									<packageName></packageName>
									<regex>^sing1$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Gravity Cannon</name>
									<script>
if snd.class == "Runecarver" then
  snd.send("qeb spore mortify "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gc$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Sentinel</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Sentinel" then
snd.giving = {
"sight",
"paresis",
"clumsiness",
"asthma",
"sensitivity",
"vomiting",
"allergies",
"haemophilia",
"slickness",
--"anorexia",
--"stupidity",
--"recklessness",
--"weariness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  call = ""
  left = "none"
  right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
	 if snd.giving[i] ~= "paresis" or not table.contains(snd.target_has, "paralysis") then
     if right == "none" then
      right = snd.effects[snd.giving[i]]
     elseif left == "none" then
      left = snd.effects[snd.giving[i]]
		end
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
  if snd.used.rebounding and snd.used.shield then
   string = "dhuriv dualraze "..snd.target
  elseif snd.used.shield or snd.used.rebounding then
	 string = "dhuriv combo "..snd.target.." reave stab "..right
	if snd.toggles.affcalling and not snd.target_gone then
	 call = "wt Afflicting "..snd.target..": "..right..snd.sep
	end
  else
   string = "dhuriv combo "..snd.target.." slash stab "..left.." "..right
	if snd.toggles.affcalling and not snd.target_gone then
	 call = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	end
  end
	string = call..string
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Venom Lock</name>
									<script>if snd.class == "Sentinel" then
snd.current_offense = "SentVLock"

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then
    snd.giving = {
		  "clumsiness",
			"asthma",
			"slickness",
			"confusion",
      "slickness",
      "anorexia",
			"left_leg_crippled",
			"right_leg_crippled",
      "heartflutter",
			"vomiting",
			"dizziness",
			"sight",
			"hearing",
			"sensitivity",}

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "dhuriv combo "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = "wipe dhurive"..snd.sep..call..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	--snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Transfix + Sensitivity</name>
									<script>if snd.class == "Sentinel" then
snd.current_offense = "SentLumiSupport"
if snd.target_locked() then
			snd.giving = {
			"left_leg_crippled",
			"right_leg_crippled",
      "confusion",
      "impairment",
			"weariness",
			"dizziness",
			"hearing",
			"sensitivity",}
		else
      snd.giving = {
      "clumsiness",
      "hearing",
      "sight",
      "asthma",
      "slickness",
      "anorexia",
			"left_leg_crippled",
			"right_leg_crippled",
      "confusion",
      "weariness",
      "vomiting",
      "shyness",
      "dizziness",
      }
		end

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end

		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..snd.sep.."order loyals attack "..snd.target..snd.sep..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lumi$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Mentals</name>
									<script>if snd.class == "Sentinel" then
snd.current_offense = "SentMental"
local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

snd.giving = {

"impatience",
"stupidity",
"agoraphobia",
"claustrophobia",
"weariness",
"clumsiness",
"asthma",
"slickness",
"confusion",
"left_leg_crippled",
"right_leg_crippled",
"anorexia",
"heartflutter",
"sight",
"hearing",
"sensitivity",
}

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
			
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ment$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Bleeding</name>
									<script>if snd.class == "Sentinel" then
snd.current_offense = "bleed"

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then
		if snd.target_locked() then
			snd.giving = {
			"impairment",
			"confusion",
			"left_leg_crippled",
			"right_leg_crippled",
			"weariness",
			"dizziness",
      }
		else
			snd.giving = {
			"paresis",
		  "clumsiness",
			"haemophilia",
			"hearing",
			"sensitivity",
      "asthma",
      "weariness",
      "slickness",

      }
		end

	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
    local second_attack = "slice"

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		else
			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "dhuriv combo "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") then
			call = ""
		end

		string = call..snd.sep.."order loyals attack "..snd.target..snd.sep..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bleed$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limbs / Salves</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Impale/Frozen</name>
									<script>if snd.class == "Sentinel" then -- Requires Raloth and Icewyrm
snd.current_offense = "SentImpale"
snd.giving = {

"frozen",
"left_leg_crippled",
"right_leg_crippled",
"left_arm_crippled",
"right_arm_crippled",
"asthma",
"slickness",
"paresis",
"confusion",
"vomiting",
"dizziness",
"sight",
"hearing",
"sensitivity",
}

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

	string = ""
	call = ""
	left = "none"
	right = "none"

	left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target
			
		elseif snd.target_impaled then
			string = "dhuriv gorge "..snd.target
			
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("left_leg_crippled") and snd.limb_status["left leg"] == "healed" and (snd.parried_limb ~= "left leg" or snd.no_parry()) then
			string = "dhuriv pierce "..snd.target.." left"
		
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("right_leg_crippled") and snd.limb_status["right leg"] == "healed" and (snd.parried_limb ~= "right leg" or snd.no_parry()) then
			string = "dhuriv pierce "..snd.target.." right"

  	elseif snd.proned() then         
      if not snd.checkAff("writhe_impaled") then
      	string = "dhuriv impale "..snd.target
       else
        string = "qdmount"..snd.sep.."qmount "..snd.my_raloth..snd.sep.."order "..snd.my_raloth.." trample "..snd.target
      end	
			
		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
						
		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") or string:find("pierce") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gimp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Salves</name>
									<script>if snd.class == "Sentinel" then -- Requires Raloth and Icewyrm
snd.current_offense = "SentSalve"

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

    if snd.checkAff("destroyed_throat") then
    snd.giving = {
    "slickness",
    "asthma",
    "left_leg_crippled",
    "right_leg_crippled",
    "paresis",
    "confusion",
    "vomiting",
    "dizziness",
    "sight",
    "hearing",
    "sensitivity",
    }
    else
    snd.giving = {
    
    "frozen",
    "left_leg_crippled",
    "right_leg_crippled",
    "left_arm_crippled",
    "right_arm_crippled",
    "anorexia",
    "stupidity",
    "asthma",
    "slickness",
    "paresis",
    "confusion",
    "vomiting",
    "dizziness",
    "sight",
    "hearing",
    "sensitivity",
    }
    end	

	string = ""
	call = ""
	left = "none"
	right = "none"

	 left, right = Sentinel_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "thrust"
		else
			second_attack = "stab"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "dhuriv dualraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "dhuriv throatcrush "..snd.target

		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("left_leg_crippled") 
			and snd.limb_status["left leg"] == "healed" and (snd.parried_limb ~= "left leg" or snd.no_parry()) and snd.limb_status["right leg"] == "healed" then
				string = "dhuriv pierce "..snd.target.." left"
		
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("right_leg_crippled") 
			and snd.limb_status["right leg"] == "healed" and (snd.parried_limb ~= "right leg" or snd.no_parry()) and snd.limb_status["left leg"] == "healed" then
				string = "dhuriv pierce "..snd.target.." right"

		elseif snd.dhuriv_attacks[left] == "daunt" or snd.dhuriv_attacks[left] == "icewyrm" then
			left = snd.daunt_animals[left]
			string = left..snd.target..snd.sep.."dhuriv flourish "..snd.target.." "..snd.effects[right]
			
		elseif snd.proned() and not snd.checksomeAffs({"left_leg_crippled", "left_arm_crippled", "right_arm_crippled", "right_leg_crippled"}, 2) then
			string = "qdmount"..snd.sep.."qmount "..snd.my_raloth..snd.sep.."order "..snd.my_raloth.." trample "..snd.target

		else

			if table.contains(snd.dhuriv_affs, left) then
				if not table.contains(snd.effects, right) then
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..snd.dhuriv_attacks[right]
				else
					string = "dhuriv combo "..snd.target.." "..snd.dhuriv_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.dhuriv_affs, right) then
				string = "dhuriv combo "..snd.target.." slash "..snd.dhuriv_attacks[right].." "..snd.effects[left]
			else
				string = "dhuriv combo "..snd.target.." slash "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
		end

		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end
		
		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "dhuriv spinecut "..snd.target
		end
		
		if string:find("impale") or string:find("gorge") or string:find("throatcrush") or string:find("dualraze") or string:find("spinecut") or string:find("pierce") then
			call = ""
		end

		string = call..string
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^salve$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group spinecut</name>
									<script></script>
									<command></command>
									<packageName></packageName>
									<regex>^gsc$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Shaman</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Shaman" then
snd.giving = {
"sight",
"sensitivity",
"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
   string = "commune leafstorm "..snd.target
  elseif tonumber(gmcp.Char.Vitals.energy) then
   string = "commune boost"..snd.sep.."commune vinelash "..snd.target.." "..venom
  else
   string = "commune vinelash "..snd.target.." "..venom
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Stormtouched</name>
									<script>if snd.class == "Shaman" then
snd.giving = {

"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()

	call = ""
	
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
 	 string = "fetish attune "..snd.target..snd.sep.."commune leafstorm "..snd.target
  elseif snd.checkAff("stormtouched") then
 	 if tonumber(gmcp.Char.Vitals.energy) then
  	string = "fetish attune "..snd.target..snd.sep.."commune boost"..snd.sep.."commune lightning "..snd.target
 	 else
 	 	string = "fetish attune "..snd.target..snd.sep.."commune lightning "..snd.target
  	end
 	else
  	string = "fetish attune "..snd.target..snd.sep.."commune vinelash "..snd.target.." "..venom
  	call = "wt Vinelash "..snd.target..": "..venom..snd.sep
  	if tonumber(gmcp.Char.Vitals.energy) &gt;= 4 then
  		string = "commune boost "..snd.sep..string  
  	end
  end
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^storm$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Aff support</name>
									<script>if snd.class == "Shaman" then
snd.giving = {

"clumsiness",
"asthma",
"slickness",
"anorexia",
"stupidity",
"weariness",
"allergies",
"vomiting",
"haemophilia",
"sensitivity",
"recklessness",
"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()

	call = ""
--local boosting = false -- this is like templar vorpal
-- if tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then boosting = true -- yesss
-- end
	
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
   string = "commune leafstorm "..snd.target
	elseif tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then
		if not snd.checkAff("impatience") and not snd.checkAff("confusion") then
			string = "commune sporulation "..snd.target
		elseif not snd.checkAff("paresis") and not snd.checkAff("stupidity") then
			string = "commune overload "..snd.target
		else
			string = "commune vinelash "..snd.target.." "..venom
	 		call = "wt Vinelash "..snd.target..": "..venom..snd.sep
		end	
  else
   string = "commune vinelash "..snd.target.." "..venom
	 call = "wt Vinelash "..snd.target..": "..venom..snd.sep
  end
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^supp$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Naturalism Utility</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Surge</name>
									<script>if snd.class == "Shaman" then
	if matches[2] == "" then
		snd.attack("nature surge "..snd.target)
	else
 		snd.attack("nature surge "..matches[2])
	end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ns (.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Canopy</name>
									<script>if snd.class == "Shaman" then
 snd.attack("nature canopy")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^can$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Screen</name>
									<script>if snd.class == "Shaman" then
 snd.attack("nature screen")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^scr$</regex>
								</Alias>
								<Alias isActive="no" isFolder="no">
									<name>Flow</name>
									<script>if snd.class == "Shaman" then
  if matches[2] == "" then
    snd.attack("nature flow "..snd.target)
  else
    snd.attack("nature flow "..matches[2])
  end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fl(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Thorncoat</name>
									<script>if snd.class == "Shaman" then
if matches[2] == "" then
 snd.attack("nature thorncoat me")
else
 snd.attack("nature thorncoat "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^tco(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Displacement</name>
									<script>if snd.class == "Shaman" and not matches[1]:find("dispel") then
  if matches[2] == "" then
   snd.attack("nature displacement "..snd.target)
  else
   snd.attack("nature displacement "..matches[2])
  end
else
  send(matches[1])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^disp(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Pull</name>
									<script>if snd.class == "Shaman" then
  if matches[2] == "" then
    snd.attack("nature pull "..snd.target)
  else
    snd.attack("nature pull "..matches[2])
  end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^np(.*)$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Templar</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both longsword shield")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield zeal</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both warhammer")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wzl$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both shortsword shortsword.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield limbs</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both mace mace.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wlb$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield longswords</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both longsword longsword.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wls$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield damage</name>
									<script>if snd.class == "Templar" then
snd.send("quickwield both bastard")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wdmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Righteousness</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>deliver</name>
									<script>if snd.class == "Templar" then
snd.send("qeb get monolith"..snd.sep.."aura deliverance "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^del (.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>resurrection</name>
									<script>if snd.class == "Templar" then
if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb aura resurrection "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>pilgrimage</name>
									<script>if snd.class == "Templar" then
  if snd.toggles.attacking then snd.toggle("attacking") end
  if snd.toggles.bashing then snd.toggle("bashing") end
  if snd.toggles.fasthunt then snd.toggle("fasthunt") end
  if snd.have_aff("paresis") then
   snd.send("firstaid elevate paresis")
  end
  snd.send("undefend")
  snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."aura pilgrimage")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^pilg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>latency</name>
									<script>if snd.class == "Templar" then
  if snd.toggles.attacking then snd.toggle("attacking") end
  if snd.toggles.bashing then snd.toggle("bashing") end
  if snd.toggles.fasthunt then snd.toggle("fasthunt") end
  if snd.have_aff("paresis") then
   snd.send("firstaid elevate paresis")
  end
  snd.send("undefend")
  snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."aura pilgrimage aura")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^pil$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>retribution stack</name>
									<script>--Meat and potatoes for 1v1, this is a classic vlock followed by
--retri finisher. Good for whales.
if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- let's determine how many affs we are away from locking
		
		local vorpal = false -- can we use vorpal?

		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end

		if snd.target_locked() then
			snd.giving = {
			"left_leg_crippled",
			"right_leg_crippled",
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			"clumsiness",
			"weariness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"conviction",
			"asthma",
			"clumsiness",
			"paresis",
			"slickness",
			"stupidity",
			"anorexia",
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			--deathblow!
			"weariness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled_body", "mental_disruption","physical_disruption" },4) then
			string = "retribution "..snd.target
    else -- if not...
			-- see if we can lock this round, in any of three possible ways
      local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
			if vorpal and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif vorpal and not snd.target_locked() and #missing &gt; 2 then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ret$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "hemorrhage" 
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 100 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 100 then
			iceblast = true
		end
		-- set the affs we want to use
			snd.giving = {
			"left_arm_crippled",
			"right_arm_crippled",    
			"left_leg_crippled",
			"right_leg_crippled",
      "stupidity",
			"anorexia",
			"slickness",
			"asthma",
			"paresis",
      "clumsiness",
      "weariness",
			}
			
		-- pick affs from the list above
		for i in pairs(snd.giving) do
			-- make sure not to double up paresis and paralysis
			if not snd.checkAff(snd.giving[i]) then
				-- and don't add an aff we've already got in the list!
				if not table.contains(touse, snd.giving[i]) then
					table.insert(touse, snd.giving[i])
				end
			end
		end
			
		-- first and foremost, check if we can retri!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		elseif snd.proned() and not snd.checkAff("writhe_impaled") then 
			string = "penance "..snd.target..snd.sep.."impale "..snd.target
		else 
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif iceblast then
				string = "blade release right iceblast "..snd.target..snd.sep.."blade release left iceblast "..snd.target..snd.sep.."dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lgs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>impale mode</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local physcount = 0
		for aff in pairs(snd.physical_affs) do
			if table.contains(snd.target_has, snd.physical_affs[aff]) then
				physcount = physcount + 1
			end
		end
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      "left_leg_crippled",
			"right_leg_crippled",
      "anorexia",
      "stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and physcount &gt;= 4 and vorpal then
			string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep.."penance "..snd.target..snd.sep.."impale "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif vorpal then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^im$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>newbie mode</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- set the affs we want to use
			snd.giving = {
      --"oculus",
      "paresis",
      "clumsiness",
      "asthma",
      "sensitivity",
      "vomiting",
      "allergies",
      "haemophilia",
      "slickness",
      "anorexia",
      "stupidity",
      "recklessness",
      "weariness",
      "dizziness",
      "voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and not snd.checksomeAffs({"writhe_thighlock", "writhe_necklock", "writhe_armpitlock"}, 1) then
			string = "impale "..snd.target
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "raze "..snd.target
			elseif snd.used.rebounding then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^newb$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>senti mode</name>
									<script>if snd.class == "Templar" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      local call = ""
      local touse = {}
      local tohit = {}
      local extraaff = "sacrifice"
      if snd.checksomeAffs({"asthma", "slickness"}, 2) and snd.checksomeAffs({"weariness", "clumsiness", "hypochondria", "baldness"}, 1) then
        snd.giving = {            
            "left_leg_crippled",
			      "right_leg_crippled",
            "asthma",
            "weariness",
            "clumsiness",
            "stupidity",
            "recklessness",
            "vomiting",
            "allergies",
            "haemophilia",
            "dizziness",} 
      else
        snd.giving =
          {
            "asthma",
            "weariness",
            "clumsiness",
            "slickness",
            "left_leg_crippled",
			      "right_leg_crippled",
            "stupidity",
            "recklessness",
            "vomiting",
            "allergies",
          }
      end
      for i in pairs(snd.giving) do
        if not snd.checkAff(snd.giving[i]) then
          if not table.contains(touse, snd.giving[i]) then
            table.insert(touse, snd.giving[i])
          end
        end
      end

      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end

      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
      else
        string = "dsk " .. snd.target .. " " .. tohit[2] .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[2] .. ", " .. tohit[1] .. snd.sep
      end

      if snd.toggles.affcalling and not snd.target_gone then
        string = call .. string
      end

      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^sent$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>retri but its legit only retri lmao</name>
									<script>--Meat and potatoes for 1v1, this is a classic vlock followed by
--retri finisher. Good for whales.
if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- let's determine how many affs we are away from locking
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- we're going to use a different affliction stack if the target is locked
		if snd.target_locked() then
			snd.giving = {
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			"sensitivity",
			"clumsiness",
			"weariness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"conviction",
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			--deathblow!
			"weariness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled_body", "mental_disruption","physical_disruption" },4) then
			string = "retribution "..snd.target
		else -- if not...
			-- see if we can lock this round, in any of three possible ways
			if vorpal and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif vorpal and not snd.target_locked() and #missing &gt; 2 then
				string = "blade release right vorpal "..snd.target.." "..tohit[1]..snd.sep.."dsk "..snd.target.." "..tohit[3].." "..tohit[2]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^cheese$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = ""
		if snd.used.rebounding or snd.used.shield then
			string = "raze "..snd.target
		elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 then
			string = "blade release left crescent "..snd.target
    end
			string = string..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."empower left with sacrifice"..snd.sep.."zeal "..snd.target
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Impale</name>
									<script>-- Hello. This route requires a warhammer, as well as you setting up what type of weapon you're using.
-- There is a variable in the script 'PvP variables', which you need to change to be whatever weapon you use.
-- We need this so we can switch to a warhammer/switch back at will without having to put in lots of
-- weird checks to see what kind of weapon you use. Templar has many!

if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal? set to false until we check
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end

    local wield = ""
		if not string.find(gmcp.Char.Vitals.wield_left, snd.templar_weapon_one) then 
      wield = "quickwield left "..snd.templar_weapon_one
      if not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
        wield = wield..snd.sep.."quickwield right "..snd.templar_weapon_two..snd.sep 
      end
    elseif not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
      wield = "quickwield right "..snd.templar_weapon_two..snd.sep 
    end

    
		-- set the affs we want to use
     snd.giving = {
      "sight",
		  "paresis",
	    "sensitivity",
			"asthma",
      "vomiting",
      "allergies",
      "slickness",
			"left_leg_crippled",
			"right_leg_crippled",
      "anorexia",
      "stupidity",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "disembowel "..snd.target
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") then
				string = "penance "..snd.target..snd.sep.."impale "..snd.target
		elseif snd.checkAff("writhe_impaled") and snd.checkAff("sensitivity") then
				string = "penance "..snd.target..snd.sep.."relax grip"..snd.sep.."quickwield both warhammer"..snd.sep.."grip"..snd.sep.."dsw "..snd.target.." sacrifice sacrifice"		
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			if string.find(string, "impale") or string.find(string, "dsw") and vorpal then -- Do we have vorpal and are we finishing someone off?
					string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep..string
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		
		--check if we need to re-wield our speed weps
		if wield ~= "" then string = wield..snd.sep..string end
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gimp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Aff - Requires 1 Luminary</name>
									<script>-- Hello. This route requires a warhammer, as well as you setting up what type of weapon you're using.
-- There is a variable in the script 'PvP variables', which you need to change to be whatever weapon you use.
-- We need this so we can switch to a warhammer/switch back at will without having to put in lots of
-- weird checks to see what kind of weapon you use. Templar has many!

if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		local vorpal = false -- can we use vorpal? set to false until we check
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
   
    local wield = ""
		if not string.find(gmcp.Char.Vitals.wield_left, snd.templar_weapon_one) then 
      wield = "quickwield left "..snd.templar_weapon_one
      if not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
        wield = wield..snd.sep.."quickwield right "..snd.templar_weapon_two..snd.sep 
      end
    elseif not string.find(gmcp.Char.Vitals.wield_right, snd.templar_weapon_two) then 
      wield = "quickwield right "..snd.templar_weapon_two..snd.sep 
    end
    
    -- set the affs we want to use
		snd.giving = {
			"paresis",
			"asthma",
			"weariness",
			"sight",
			"sensitivity",
			"slickness",
			"anorexia",
			"stupidity",
			"left_leg_crippled",
			"right_leg_crippled",
			"clumsiness",
			"haemophilia",
			"allergies",
			"vomiting",
			"recklessness",
			"dizziness"
      }
		-- Since we're with a Luminary, we're banking on them using the Penance proc on overwhelm to instantly kill someone. Deleted!
		if snd.checkAff("writhe_transfix") and snd.checkAff("sensitivity") then
			if  snd.health_percent &lt;= 75 then
				string = "penance "..snd.target
			else -- Okay, their health isn't low enough to kill them straight out. Let's just make sure we hit them some more.
				string = "penance "..snd.target..snd.sep.."relax grip"..snd.sep.."quickwield both warhammer"..snd.sep.."grip"..snd.sep.."dsw "..snd.target.." sacrifice sacrifice"		
				if vorpal then
					string = "blade release left crescent "..snd.target..snd.sep.."blade release right crescent "..snd.target..snd.sep..string
				end
			end
		else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "razestrike "..snd.target.." blaze"
			elseif snd.used.rebounding or snd.used.shield then
				string = "razestrike "..snd.target.." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			else
				string = "dsk "..snd.target.." "..tohit[2].." "..tohit[1]
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Bleed/Hemm</name>
									<script>if snd.class == "Templar" then
  snd.starting_attack()

  function snd.attack_function()
    local string = ""-- we'll load this with our attack string
    local call = ""  -- and this with our affliction call
    
                     -- next, the afflictions we want to give
    local touse = {}
    local tohit = {}
    local extraaff = "hemorrhage" -- and in case we don't find enough of them
    
    local left_crescent = ""
    if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 85 then left_crescent = "blade release left crescent "..snd.target end
    
    local right_crescent = "" 
    if tonumber(gmcp.Char.Vitals.charge_right) &gt;= 85 then right_crescent = "blade release right crescent "..snd.target end

    
    if not snd.waiting.queue then
      
      snd.giving = {   -- set the affs we want to use
      "hearing", 
      --"haemophilia", 
      "clumsiness",
      "sensitivity"}
       
      -- We really only care about the sensitivity/haemophilia
      -- If they have both, go straight into damage
      if snd.checksomeAffs({"haemophilia", "sensitivity"}, 2) then
        table.insert(touse, "hemorrhage")
        table.insert(touse, "hemorrhage")
        
      else
        -- If that condition isn't met, pick affs from the list above
        for i in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[i]) then
            -- Don't add an aff we've already got in the list!
            if not table.contains(touse, snd.giving[i]) then
              table.insert(touse, snd.giving[i])
            end
          end
        end
      end
      
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end
      
      -- if we didn't find enough stuff to hit with, stick in hemorrhage.
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end

      if (snd.used.shield and snd.used.rebounding) then -- Double barrier, try to break through both with rsk/blaze.
        string = "razestrike " .. snd.target .. " blaze"
        
      elseif (snd.used.shield or snd.used.rebounding) then -- One layer of barrier, rsk w/venom.
        string = "razestrike " .. snd.target .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[1]
        
      else -- Send 2 hits with venoms/empowerments
        string = "dsk " .. snd.target .. " " .. tohit[2] .. " " .. tohit[1]
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[2] .. ", " .. tohit[1]
        
        if left_crescent ~= "" and snd.checkAff("sensitivity") then string = left_crescent..snd.sep..string end
        if right_crescent ~= "" and snd.checkAff("sensitivity") then string = right_crescent..snd.sep..string end 
      end
      
    end
    
    -- prepend our affliction call, if we need one
    if snd.toggles.affcalling and not snd.target_gone then
      string = call .. snd.sep .. string
    end
    
    -- handle anti-spam and the actual attacking now
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bleed$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  -- list what limbs to hit
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can rupture now!
  local rupture = "none"
	local vorpal = false
	local call = ""
  
  for limb in ipairs(limbs) do
   if snd.limb_bruising[limbs[limb]] &gt;= 3 then
    rupture = limbs[limb]
   end
  end
  
  if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
    vorpal = true
  else
    vorpal = false
  end
  
  if rupture ~= "none" and not snd.used.shield then -- if rupture is go
   string = "penance "..snd.target..snd.sep.."rupture "..snd.target.." "..rupture
  else -- can't rupture, needs logic
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg" 
		 left = "left leg"
	  end
	 else -- target not prone
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.templar_last_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- if we have vorpal and can use it with impunity
			 if vorpal and not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
			  if right == "nothing" then
			   right = limbs[limb]
			  elseif left == "nothing" then
			   left = limbs[limb]
			  end
				-- otherwise leave the prepped leg alone!
		   end
			 -- if it's not a leg about to break, go for it
		  elseif right == "nothing" and snd.limb_dmg[limbs[limb]] &lt; 70 then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right and snd.limb_dmg[limbs[limb]] &lt; 70 then
	     left = limbs[limb]
		  end
	   end
	  end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 -- end limb picking logic
	 -- on to attacking logic!
	 if snd.used.shield and snd.used.rebounding then -- baddie is turtling
    string = "razestrike "..snd.target.." blaze"
	 elseif snd.used.shield or snd.used.rebounding then
    string = "target nothing with left"..snd.sep.."target "..right.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
	 -- here's the tricky part, we're checking for optimal conditions
	 -- we need vorpal ready, a leg about to break, and resto poultice off balance
	 elseif vorpal and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
	  if left == "left leg" then right = "right leg" end
	  if left == "right leg" then right = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." trauma numbing"
	 -- we could also meet the same conditions, but on the other limb we picked
	 elseif vorpal and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
	  if right == "left leg" then left = "right leg" end
	  if right == "right leg" then left = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." numbing trauma"
	 else -- we can't do a Big Bad Break, run normal logic
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dsk "..snd.target.." trauma trauma"
   end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
snd.send("engage "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>ice blast limbs</name>
									<script>if snd.class == "Templar" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
  local left = "nothing"
  local right = "nothing"
	local vorpal = false
	local rupture = "none"
	if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
	 vorpal = true
	else
	 vorpal = false
	end
	if table.contains(snd.target_has, "frozen") then
	 if snd.limb_dmg["left leg"] &gt;= snd.limb_dmg["right leg"] then
	  left = "left leg"
		right = "left leg"
	 else
	  left = "right leg"
		right = "right leg"
	 end
	else
	 for limb in pairs(limbs) do
	  if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb then
	   if right == "nothing" then
	    right = limbs[limb]
	   elseif left == "nothing" and limbs[limb] ~= right and limbs[limb] ~= snd.last_hit_limb then
	    left = limbs[limb]
		 end
	  end
	 end
	end
  for limb in ipairs(limbs) do
	 if snd.limb_bruising[limbs[limb]] &gt;= 3 then
	  rupture = limbs[limb]
	 end
  end
  if snd.used.shield and snd.used.rebounding then
   string = "razestrike "..snd.target .." blaze"
	elseif snd.used.shield then
	 string = "target nothing with left"..snd.sep.."target "..left.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
  elseif rupture ~= "none" then
	 string = "penance "..snd.target..snd.sep.."rupture "..snd.target.." "..rupture
	elseif snd.used.rebounding then
   string = "target nothing with left"..snd.sep.."target "..left.." with right"..snd.sep.."razestrike "..snd.target.." trauma"
	elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and not table.contains(snd.target_has, "frozen") then
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."blade release left iceblast "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	elseif tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 and not table.contains(snd.target_has, "frozen") then
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."blade release right iceblast "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	elseif vorpal then
	 string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."empower right with stun"..snd.sep.."blade release right vorpal "..snd.target..snd.sep.."dsk "..snd.target.." trauma trauma"
	else
   string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dsk "..snd.target.." trauma trauma"
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
snd.send("engage "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lb$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Warden</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>venoms only</name>
									<script>if snd.class == "Warden" then
snd.giving = {
"paresis",
"clumsiness",
"asthma",
"slickness",
"stupidity",
"anorexia",
"allergies",
--"weariness",
--"haemophilia",
--"sensitivity",
--"vomiting",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local left = "none"
  local right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then left = "epteth" end
  if right == "none" then right = "epseth" end
  
	x = ""
  
  if snd.used.rebounding and snd.used.shield then
   string = "warden raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "warden bypass "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
   string = "warden lacerate "..snd.target.." "..left.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	 end
	end
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end

</script>
									<command></command>
									<packageName></packageName>
									<regex>^venom$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>affs</name>
									<script>if snd.class == "Warden" then
  snd.giving = {
  "paresis",
  "asthma",
  "clumsiness",
  "slickness",
  "stupidity",
  "anorexia",
  "dizziness",
  --"weariness",
  --"sensitivity",
  --"haemophilia",
  --"vomiting",
  --"allergies",
  --"recklessness",
  --"voyria",
  }
  snd.hound_queue = {
  "mark",
  "dizziness",
  "berserking",
  "weariness",
  "impairment",
  }
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    local string = ""
    local left = "none"
    local right = "none"
  
    for i in pairs(snd.giving) do
     if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
      if right == "none" then
       right = snd.effects[snd.giving[i]]
      elseif left == "none" then
       left = snd.effects[snd.giving[i]]
      end
     end
    end
    
    if left == "none" then left = "epseth" end
    if right == "none" then right = "epseth" end
  	x = ""
    
    if snd.used.rebounding and snd.used.shield then
     string = "warden raze "..snd.target
    elseif snd.used.rebounding or snd.used.shield then
     string = "warden bypass "..snd.target.." "..right
  	 if snd.toggles.affcalling and not snd.target_gone then
  	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
  	 end
    else
  	 if snd.checkAff("fallen") and snd.target_locked() then
  	  if table.contains(snd.target_has, "crushed_chest") then
  		 string = "warden decimate "..snd.target
  		else
  	   string = "warden pummel "..snd.target.." chest"
  		end
  	 else
      string = "warden lacerate "..snd.target.." "..left.." "..right
  	  if snd.toggles.affcalling and not snd.target_gone then
  	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
  	  end
  	 end
  	end
    
  	if snd.soul &lt;= 80 and not table.contains(snd.target_has, "ancestral_portent") then
  	 string = string..snd.sep.."ancest portent "..snd.target
  	elseif snd.soul &lt;= 90 and not table.contains(snd.target_has, "inhibited") then
  	 string = string..snd.sep.."ancest inhibit "..snd.target
  	elseif #snd.target_has &gt;= 12 and snd.balance.soulpoison then
  	 string = string..snd.sep.."ancest ambush "..snd.target
  	elseif snd.soul &lt;= 75 and snd.balance.implant and not table.contains(snd.target_has, "soul_implant") then
  	 if snd.target_locked() then
  	  string = string..snd.sep.."ancest attune "..snd.target.." aconite slike"
  	 end
  	end
    
  	string = "wipe left"..snd.sep..x..string..snd.sep.."warden release "..snd.target
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Warden" then
  snd.giving = {
	"left_leg_crippled",
	"right_leg_crippled",
	"left_arm_crippled",
	"right_arm_crippled",    
  "stupidity",
	"anorexia",
	"slickness",
	"asthma",
  "recklessness",
  "dizziness",
  "weariness",
  "sensitivity",
  }
  snd.hound_queue = {
  "frozen",
  }
  
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    local string = ""
    local left = "none"
    local right = "none"
  
    for i in pairs(snd.giving) do
     if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
      if right == "none" then
       right = snd.effects[snd.giving[i]]
      elseif left == "none" then
       left = snd.effects[snd.giving[i]]
      end
     end
    end
    
    if left == "none" then left = "epseth" end
    if right == "none" then right = "epseth" end
  	local x = ""
    
    if snd.used.rebounding and snd.used.shield then
     string = "warden raze "..snd.target
    elseif snd.used.rebounding or snd.used.shield then
     string = "warden bypass "..snd.target.." "..right
  	 if snd.toggles.affcalling and not snd.target_gone then
  	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
  	 end
    else
  	 if snd.checkAff("fallen") then
  	  if table.contains(snd.target_has, "crushed_chest") then
  		 string = "warden decimate "..snd.target
  		else
  	   string = "warden pummel "..snd.target.." chest"
  		end
  	 else
      string = "warden lacerate "..snd.target.." "..left.." "..right
  	  if snd.toggles.affcalling and not snd.target_gone then
  	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
  	  end
  	 end
  	end

    
  	string = "wipe left"..snd.sep..x..string..snd.sep.."warden release "..snd.target
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>stuff</name>
									<script>if snd.class == "Warden" then
  snd.giving = {
  --push recklnessness/focus balance to try and make locks easier for others
  "recklessness",
  "slickness",
  "stupidity",
  "anorexia",
  "dizziness",
  "weariness",
  "sensitivity",
  "haemophilia",
  "vomiting",
  "allergies",
  --"voyria",
  }
  snd.hound_queue = {
  "dizziness",
  "berserking",
  "weariness",
  "impairment",
  }
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    local string = ""
    local left = "none"
    local right = "none"
  
    for i in pairs(snd.giving) do
     if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
      if right == "none" then
       right = snd.effects[snd.giving[i]]
      elseif left == "none" then
       left = snd.effects[snd.giving[i]]
      end
     end
    end
    
    if left == "none" then left = "epseth" end
    if right == "none" then right = "epseth" end
  	x = ""
    
    if snd.used.rebounding and snd.used.shield then
     string = "warden raze "..snd.target
    elseif snd.used.rebounding or snd.used.shield then
     string = "warden bypass "..snd.target.." "..right
  	 if snd.toggles.affcalling and not snd.target_gone then
  	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
  	 end
    else
  	 if snd.checkAff("fallen") then
  	  if table.contains(snd.target_has, "crushed_chest") then
  		 string = "warden decimate "..snd.target
  		else
  	   string = "warden pummel "..snd.target.." chest"
  		end
  	 else
      
      string = "warden lacerate "..snd.target.." "..left.." "..right
  	  if snd.toggles.affcalling and not snd.target_gone then
        x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
  	  end
  	 end
  	end
    
  	string = "wipe left"..snd.sep..x..string..snd.sep.."warden release "..snd.target
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^support$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Warden" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "ancest carve "..snd.target
  else
   	string = "warden maul "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Warden" then
  snd.hound_queue = {"frozen"}
  snd.current_offense = "WardenLimbs"
  snd.starting_attack()

  function snd.attack_function()
    snd.handle_hounds()
    if not snd.waiting.queue then
      limbs = {"left leg", "right leg", "left arm", "right arm"}
      if table.contains(snd.target_has, "crushed_chest") and snd.proned() then
        string = "warden decimate " .. snd.target
      elseif snd.proned() and snd.resto_limb ~= "none" then
        string = "warden pummel " .. snd.target .. " chest"
      else
        left = "nothing"
        right = "nothing"
        if snd.proned() then
          if snd.parried_limb == "right leg" then
            right = "left leg"
          elseif snd.parried_limb == "left leg" then
            right = "right leg"
          else
            right = "right leg"
            left = "left leg"
          end
        elseif
          snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and
          (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
          string = "target left leg with left" ..snd.sep .."target right leg with right" ..snd.sep .."warden maul " ..snd.target
        else
          for limb in pairs(limbs) do
            if
              limbs[limb] ~= snd.parried_limb and
              limbs[limb] ~= snd.last_hit_limb and
              (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33)
            then
              if
                (limbs[limb] == "left leg" or limbs[limb] == "right leg") and
                (snd.limb_dmg[limbs[limb]] + snd.limb_dmg_done &gt;= 33.3)
              then
              elseif right == "nothing" then
                right = limbs[limb]
              elseif left == "nothing" and limbs[limb] ~= right then
                left = limbs[limb]
              end
            end
          end
          if left == "nothing" then
            left = right
          end
          if snd.used.shield or snd.used.rebounding then
            string = "warden raze " .. snd.target
          else
            string = "warden maul " .. snd.target .. " " .. left .. " " .. right
            if snd.soul &lt;= 80 and not table.contains(snd.target_has, "debilitated") then
              string = string .. snd.sep .. "ancest debilitate " .. snd.target
            end
          end
        end
      end
      
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="no" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Warden" then
  snd.hound_queue = {
  "frozen",
  }
  snd.starting_attack()
  function snd.attack_function()
   snd.handle_hounds()
   if not snd.waiting.queue then
    -- list what limbs to hit
    limbs = {"left leg", "right leg", "left arm", "right arm"}
  
    if snd.checkAff("crushed_chest") and snd.proned() then	-- check if we can pulverize now!
     string = "warden decimate "..snd.target
  
  	elseif snd.proned() and ((snd.limb_dmg["left leg"] &gt;= 33.33 and snd.limb_dmg["right leg"] &gt;= 33.33)  	-- or if they're prone and staying that way
    or snd.limb_dmg["left leg"] &gt;= 66.66 or snd.limb_dmg["right leg"] &gt;= 66.66) then
  
  	 if table.contains(snd.target_has, "distortion") and snd.soul &lt;= 70 then 	 -- are they distorted?
  	  string = "warden pummel "..snd.target.." chest"	 
  	 elseif snd.used.shield or snd.used.rebounding then -- do we need to raze?
  	  string = "warden raze "..snd.target
  	
  	 else 
  	  string = "warden pummel "..snd.target.." chest"
  	 end
  	elseif snd.proned() then -- at least they're prone
  	 if (snd.used.shield or snd.used.rebounding) and not table.contains(snd.target_has, "distortion") then -- bleh!
  	  string = "warden raze "..snd.target
  	 else -- make sure they stay down
  	  if table.contains(snd.target_has, "frozen") or table.contains(snd.target_has, "distortion") then
  		 string = "warden maul "..snd.target.." left leg right leg"
  	  elseif snd.parried_limb == "left leg" then
  		 string = "warden maul "..snd.target.."right leg right leg"
  		elseif snd.parried_limb == "right leg" then
  		 string = "warden maul "..snd.target.."left leg left leg"
  		else
  	   string = "warden maul "..snd.target.." left leg right leg"
  		end
  	 end
  	-- did they apply resto?
  	--elseif not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
  	-- string = "target nothing with left"..snd.sep.."target nothing with right"..snd.sep.."warden lacerate "..snd.target.." epseth epseth"
    else -- can't pulverize, needs logic
  	 -- pick what limbs to hit
  	 left = "nothing"
  	 right = "nothing"
  	 if snd.proned() then -- focus legs hard on prone
  	  if snd.parried_limb == "right leg" then
  	   right = "left leg"
  	  elseif snd.parried_limb == "left leg" then
  	   right = "right leg"
  	  else
  	   right = "right leg"
  		 left = "left leg"
  	  end
  	 -- are the legs prepped?
  	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
      string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."warden maul "..snd.target
  	 else -- target not prone, legs not prepped
  	  for limb in pairs(limbs) do
  		 -- ignore last parried, last hit, and any limbs being resto'd
  	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
  		  if right == "nothing" then
  		   right = limbs[limb]
  	    elseif left == "nothing" and limbs[limb] ~= right then
  	     left = limbs[limb]
  		  end
  	   end
  	  end
  	  if left == "nothing" then -- we only found one limb to hit
  	   left = right -- double up!
  	  end
  	  -- end limb picking logic
  	  -- on to attacking logic!
  	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
       string = "warden raze "..snd.target -- raze has static balance cost
  	  else
  	   string = "warden maul "..snd.target.." "..left.." "..right
      end
  	 end
  	end
  	if snd.soul &lt;= 90 and not snd.checkAff("inhibited") then
  	 string = string..snd.sep.."ancest inhibit "..snd.target
  	elseif snd.soul &lt;= 90 and not snd.checkAff("eluded") then
  	 string = string..snd.sep.."ancest elude "..snd.target
    elseif snd.soul &lt;= 80 and not snd.checkAff("debilitated") then
     string = string..snd.sep.."ancest debilitate "..snd.target
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Zealot</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Immolation support</name>
									<script>if snd.class == "Zealot" then
  snd.starting_attack()

  function snd.attack_function()
    -- This checks for a present Firefist defense. This is used later during a Firefist check.
    local firefist = false
    if snd.defenses.def_firefist.state == "deffed" then
      firefist = true
    end
    -- This checks for a present Zenith defense. It is used later in Zenith/Flow Handling.
    local zenith = false
    if snd.defenses.def_zenith.state == "deffed" then
      zenith = true
    end
    -- This is a failsafe to take crispy off of a target that has cured ablaze.
    if snd.checkAff("crispy") then
      if not snd.checkaff("ablaze") then
        snd.target_cured("crispy")
      end
    end
    -- This uses crispy to check if they're at the right flame level.
    local immolation_ready = false
    if snd.checkAff("ablaze") then
      if snd.checkAff("crispy") then
        immolation_ready = true
      end
    end
    -- In this mode, we're going to only rely on Purification. It's built to support a quick Immolate.
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer " .. snd.target
        -- OK, so if immolation is ready... we should cast it!	
      elseif immolation_ready then
        string = "enact immolation " .. snd.target
        -- OK, so if immolation isn't ready, what next? Heatspear!
      elseif not snd.checkAff("heatspear") and snd.checkAff("ablaze") then
        string = "enact heatspear " .. snd.target
        -- OK, what if they have heatspear? Are they ablaze?! Quicken!
        --	elseif snd.checkAff("ablaze") then
        --		string = "enact quicken "..snd.target
        -- OK, so we've done all of this, but they don't have ablaze! Ez fix..
      else
        string = "enact scorch " .. snd.target
      end
      -- Flow Handling/Zenith Handling
      -- In this mode, we only Flow when we have Zenith, otherwise we are casting.
      -- This means our Flow handling IS our Zenith handling.
      -- Our Flow attacks should always be punches to take advantage of Firefist.
      if zenith then
        if snd.used.shield then
          string = "touch hammer " .. snd.target
        elseif snd.parried_limb ~= "torso" then
          string = "flow " .. snd.target .. " clawtwist clawtwist" .. snd.sep .. string
        elseif snd.parried_limb ~= "left arm" then
          string = "flow " .. snd.target .. " pummel left pummel left" .. snd.sep .. string
        else
          string = "flow " .. snd.target .. " pummel right pummel right" .. snd.sep .. string
        end
      end
      -- Hackles handling
      -- In this mode, we really just hackles whipburst.
      -- We will Whipburst even in lieu of a Flow combo.
      -- First, we should check if we have hackles balance.	
      if gmcp.Char.Vitals.ability_bal == "1" then
        string = "hackles " .. snd.target .. " whipburst " .. snd.sep .. string
      end
    end
    -- We want to turn on firefist if we have Zenith up, because that's the only time we're punching and it needs to count.
    if not firefist then
      if snd.checksomeAffs({"ablaze", "heatspear"}, 2) then
        if zenith then
          string = "enact firefist"
        else
          string = "enact zenith" .. snd.sep .. string
        end
      end
    end
    -- I am leaving this failsafe in... below checks if we're g2g with the immolate button.
    if immolation_ready then
      string = "enact immolation " .. snd.target
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fire$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Bleed/Damage</name>
									<script>if snd.class == "Zealot" then
  snd.starting_attack()

  function snd.attack_function()
    local firefist = false
    if snd.defenses.def_firefist.state == "deffed" then
      firefist = true
    end
    local zenith = false
    if snd.defenses.def_zenith.state == "deffed" then
      zenith = true
    end
    if snd.checkAff("crispy") then
      if not snd.checkaff("ablaze") then
        snd.target_cured("crispy")
      end
    end
    local immolation_ready = false
    if snd.checkAff("ablaze") then
      if snd.checkAff("crispy") then
        immolation_ready = true
      end
    end
    -- Flow Handling
    -- Consider writing a check for different combos on firefist?
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer " .. snd.target
      elseif snd.parried_limb ~= "torso" then
        string = "flow " .. snd.target .. " clawtwist clawtwist"
      elseif snd.parried_limb ~= "head" then
        if not snd.checkAff("crippled_throat") then
          string = "flow " .. snd.target .. " edgekick heelrush head"
        else
          string = "flow " .. snd.target .. " sunkick heelrush head"
        end
      elseif snd.parried_limb ~= "left leg" and snd.parried_limb ~= "right leg" then
        string = "flow " .. snd.target .. " wanekick left wanekick right"
      elseif snd.parried_limb ~= "left leg" and snd.parried_limb == "right leg" then
        string = "flow " .. snd.target .. " wanekick left wanekick left"
      elseif snd.parried_limb ~= "right leg" and snd.parried_limb == "left leg" then
        string = "flow " .. snd.target .. " wanekick right wanekick right"
      else
        if snd.parried_limb ~= "left arm" then
          string = "flow " .. snd.target .. " pummel left pummel left"
        end
      end
      -- Hackles handling
      -- Jawcrack &gt; Rive ...  rive to maximize the bleeding.
      -- Prioritize Whipburst during firefist?
      -- First, we should check if we have hackles balance.	
      if gmcp.Char.Vitals.ability_bal == "1" then
        -- Cool! What are we doing with it? Let's figure that out and put it before our flow string!
        if snd.parried_limb ~= "head" and not snd.checkAff("stuttering") then
          string = "hackles " .. snd.target .. " jawcrack " .. snd.sep .. string
        else
          string = "hackles " .. snd.target .. " rive " .. snd.sep .. string
        end
      end
      -- Zenith handling
      -- Immolation &gt; Pyromania &gt; Infernal &gt; Heatspear &gt; Quicken &gt; Scorch
      -- handle pyromania with a variable?
      -- use the limb state checker from templar limbs script for infernal check?
      -- handle heatspear as an aff..
      -- check if immolate not possible ... if not, quicken or scorch
      if zenith then
        if not snd.checkAff("heatspear") and snd.checkAff("ablaze") then
          string = string .. snd.sep .. "enact heatspear " .. snd.target
        elseif snd.checkAff("ablaze") then
          string = string .. snd.sep .. "enact quicken " .. snd.target
        else
          string = string .. snd.sep .. "enact scorch " .. snd.target
        end
      end
      if not firefist then
        if snd.checksomeAffs({"ablaze", "heatspear"}, 2) then
          string = "enact firefist"
        end
      end
      if immolation_ready then
        string = "enact immolation " .. snd.target
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Tidesage</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic Aff</name>
									<script>if snd.class == "Tidesage" then
  snd.starting_attack()

  function snd.attack_function()
    local apparition = tonumber(gmcp.Char.Vitals.apparition)
    local string = ""
    
    if not snd.waiting.queue then
      if not table.isMember(gmcp.Room.Info.details, "fogged") then
        string = "fog inundate"
      -- If you don't have apparition up, let's do it.
      elseif apparition == 0 and hasSkill("Apparition") then
        string = "fog apparition"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."tide harpoon "..snd.target
      -- If shielded or rebounding, strip it.
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Abyss") then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          if snd.used.shield and snd.used.rebounding then
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."fog abyss "..snd.target
          else
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."tide clobber " .. snd.target
          end
        else
          string = "fog abyss " .. snd.target
        end
      -- Let's get slough going to limit usage of poultices.
      elseif not snd.checkAff("slough") and hasSkill("Terrors") then -- slough prevents poultices from being applied, like slickness
        -- Let's try to give heartflutter and stun if we can. 
        -- If we have apparition, let's give some affs and damage torso.
        -- If all else fails, let's just give those affs.
        if (snd.balance.earthenwill and hasSkill("Engulf")) and (apparition &gt;= 3 and hasSkill("Apparition")) and hasSkill("Ram") then
          string = "tide engulf trammel"..snd.sep.."fog terrors "..snd.target.." apparition"..snd.sep.."tide ram "..snd.target
        elseif (apparition &gt;= 3 and hasSkill("Apparition")) and hasSkill("Ram") then
          string = "fog terrors "..snd.target.." apparition"..snd.sep.."tide ram "..snd.target
        else
          string = "fog terrors "..snd.target
        end
      -- if they are proned, let's go ahead and try to give collapsed lung to punish for smoking
      elseif (snd.proned() and hasSkill("Wreck")) and not snd.checkAff("collapsed_lung") then
         string = string.."tide wreck "..snd.target
      -- If we get slough up, let's throw out some useful group affs going.
      elseif snd.checksomeAffs({"recklessness", "dizziness", "sensitivity", "epilepsy", "stupidity"},4) and hasSkill("Gnash") then
        string = "fog gnash "..snd.target
      -- If we have gotten slough on the target, let's break some limbs. Those are affs too.
      elseif not snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},4) and hasSkill("Unseen") then
        string = "fog unseen " .. snd.target
      -- All else, let's just smack
      else
        string = "tide clobber " .. snd.target
      end
    
      -- If your synth isn't attacking, get it attacking.
      if not snd.loyalsattacking then
        string = "order loyals kill "..snd.target..snd.sep..string
      end
      
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic Damage</name>
									<script>if snd.class == "Tidesage" then
  snd.starting_attack()
  
  function snd.attack_function()
    local apparition = tonumber(gmcp.Char.Vitals.apparition)
    local string = ""
    
    if not snd.waiting.queue then
      -- if they are impaled, let's do some damage
      if snd.target_impaled and hasSkill("Eviscerate") then
        string = "tide eviscerate"
      -- If there is no fog, let's get it going.
      elseif not table.isMember(gmcp.Room.Info.details, "fogged") then
        string = "fog inundate"
      -- If you don't have apparition up, let's do it.
      elseif apparition == 0 and hasSkill("Apparition") then
        string = "fog apparition"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."tide harpoon "..snd.target
      -- They shielded and rebounded? Try to remove both. But if they only have one, strip it and then strip levitation. 
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Abyss") then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          if snd.used.shield and snd.used.rebounding then
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."fog abyss "..snd.target
          elseif snd.used.shield or snd.used.rebounding then
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."tide breach " .. snd.target            
          end
        else
          string = "fog abyss " .. snd.target
        end
      -- Did you happen to strip their lev and they are not proned? Let's prone them!
      elseif not snd.proned() and snd.lev_gone and hasSkill("Capsize") then
         string = string.."tide capsize "..snd.target      
    	-- If you can impale them, let's do it, so long as no one else has.
      elseif not snd.target_impaled and snd.proned() and hasSkill("Harpoon") then
        if apparition &gt;= 3 then
          string = "fog unseen "..snd.target.." apparition"..snd.sep.."tide harpoon"
        else
          string = "tide harpoon"
        end
      -- They prone and have two limbs broken? Cool, let's try to damage some limbs more and generally damage them cause of it.
      elseif snd.proned() and snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},2) and hasSkill("Undulation") then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          string = "fog unseen "..snd.target.." apparition"..snd.sep.."tide undulation"
        else
          string = "tide undulation"
        end
      -- Let's go ahead and start damaging their head if they aren't parrying it.
      elseif snd.parried_limb ~= "head" and hasSkill("Feelers") then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          string = "fog feelers "..snd.target.." head apparition"..snd.sep.."tide clobber "..snd.target
        else
          string = "fog feelers "..snd.target.." head"
        end
      -- Otherwise, let's just clobber them.
      else
        string = "tide clobber "..snd.target
      end
  
    -- If your synth isn't attacking, get it attacking.
    if not snd.loyalsattacking then
      string = "order loyals kill "..snd.target..snd.sep..string
    end
    
    if snd.balance.earthenwill and hasSkill("Engulf") then
      string = "tide engulf"..snd.sep..string
    end
  
    if snd.balance.momentum and hasSkill("Hightide") then
      string = "tide hightide"..snd.sep..string
    end
  
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limbs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic Limbs</name>
									<script>if snd.class == "Tidesage" then -- Note that this is intended for groups, not 1v1
  snd.starting_attack()
  
  function snd.attack_function()
    local apparition = tonumber(gmcp.Char.Vitals.apparition)
    local string = ""
    local hammer = "none"
	  local how_many_moderate = 0
    for k,v in pairs(snd.limb_bruising) do
      if v &gt;= 2 then
        how_many_moderate = how_many_moderate + 1
      end
    end
    
    if not snd.waiting.queue then
    
      -- If target is impaled, let's do some damage.
 		  if snd.target_impaled and hasSkill("Eviscerate") then
        string = "tide eviscerate"
      -- If there is no fog, let's get it going.
      elseif not table.isMember(gmcp.Room.Info.details, "fogged") then
        string = "fog inundate"
      -- If you don't have apparition up, let's do it.
      elseif apparition == 0 and hasSkill("Apparition") then
        string = "fog apparition"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."tide harpoon "..snd.target
      elseif how_many_moderate &gt;= 3 and not snd.used.shield then
         string = string.."tide keelhaul "..snd.target
      -- They shielded and rebounded? Try to remove both. But if they only have one, strip it and then strip levitation. 
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Abyss") then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          if snd.used.shield and snd.used.rebounding then
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."fog abyss "..snd.target
          elseif snd.used.shield or snd.used.rebounding then
            string = "fog abyss "..snd.target.." apparition"..snd.sep.."tide breach " .. snd.target            
          end
        else
          string = "fog abyss " .. snd.target
        end
      -- We want levitation gone for more damage. Let's try undertow to make it so they can't put it up fast if it's not gone yet.
      -- If we can't undertow, roll with breach.
      elseif not snd.lev_gone then
        if hasSkill("Undertow") and snd.proned() then
          string = string.."fog undertow "..snd.target
        elseif hasSkill("Breach") then
         string = string.."tide breach "..snd.target
        end
      -- If they are not prone and no levitation, capsize them. This'll break 3 limbs regardless of bruises.
      elseif (not snd.proned() and snd.lev_gone) and hasSkill("Capsize") then
         string = string.."tide capsize "..snd.target     
      -- Let's try to give them slough, that way it's harder to heal limbs. Also, clobber if you can apparition it.
    	elseif (not snd.checkAff("slough") and hasSkill("Terrors")) then
        if apparition &gt;= 3 and hasSkill("Apparition") then
          string = string.."fog terrors "..snd.target.." apparition"..snd.sep.."tide clobber "..snd.target
        else
          string = string.."fog terrors "..snd.target
        end
      -- Straight try to break all four limbs to help support limbs in the group.
      elseif not snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},4) and hasSkill("Unseen") then
        string = string.."fog unseen " .. snd.target
      else 
        string = "tide clobber "..snd.target
  	  end
  
      -- If your synth isn't attacking, get it attacking.
      if not snd.loyalsattacking then
        string = "order loyals kill "..snd.target..snd.sep..string
      end
    
      -- If we can engulf, let's do it.
      if snd.balance.earthenwill and hasSkill("Engulf") then
        string = "tide engulf"..snd.sep..string
      end
      
      -- If we can hightide, let's do that as well.
      if snd.balance.momentum and hasSkill("Hightide") then
        string = "tide hightide"..snd.sep..string
      end
		
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end
  
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Voidseer</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>newbie damage</name>
									<script>if snd.class == "Voidseer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local bioessence = tonumber(gmcp.Char.Vitals.insight) or 0
 local biostring = "" 
  

  if bioessence &gt; 1 then
    biostring = "void aplomb"..snd.sep
  end


 if not snd.waiting.queue then
  if snd.used.shield then
   	string = "foment anger "..snd.target..snd.sep..biostring
	else
		string = "foment sadness "..snd.target..snd.sep..biostring
    
  end
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^newb$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>vet damage</name>
									<script>if snd.class == "Voidseer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local bioessence = tonumber(gmcp.Char.Vitals.insight) or 0
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end 
 
      local biostring = "" 

      if bioessence &gt; 1 then
        biostring = "void aplomb"..snd.sep
      end

 if not snd.waiting.queue then
  if snd.used.shield then
   	string = "foment anger "..snd.target
	elseif not snd.geoinvert then
    string = "drop " ..snd.my_token.. "" ..snd.sep.. "muse cordon" ..snd.sep    
  elseif not snd.geotrace then
    string = "muse vine"

   else

     if snd.checkAff("blackout") then
        if not snd.checkAff("patterns") then
           string = "MUSE RECRUDESCENCE "..snd.target..snd.sep
        elseif snd.checkAff("patterns") and snd.balance.madness then
           string = "affirm branch"..snd.sep.."chakra turmoil "..snd.target..snd.sep
        elseif snd.checksomeAffs({"dementia", "paranoia", "hallucinations"}, 1) then
           --string = "geo impress rod"..snd.sep.."incite hex "..snd.target..snd.sep
           string = "goggle scan "..snd.target..snd.sep.."muse foster regret"..snd.sep.."foment sadness "..snd.target..snd.sep..biostring
        end
 
      elseif snd.my_incite == "Crescent" then
        string = "muse foster regret"..snd.sep.."foment sadness "..snd.target..snd.sep..biostring..snd.sep..biostring  
                    
     elseif snd.my_incite ~= "" and snd.crescentable then
       string = "muse foster wistful"..snd.sep.."foment misery " ..snd.target 
       
     else
      string = "muse foster wistful"..snd.sep.."foment sadness "..snd.target..snd.sep..biostring..snd.sep..biostring
    end 
        
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end

snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic group affs (Darkside)</name>
									<script>if snd.class == "Voidseer" then
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
			local touse = {}
      local string = ""
      local biostring = "" 
      local call = "" 
      local bioessence = tonumber(gmcp.Char.Vitals.insight) or 0
      local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end
      if bioessence &gt; 1 then
      	biostring = "void aplomb"..snd.sep
      end
				
			snd.giving = {
			"laxity",
			"faintness",
			"berserking",
			"recklessness",
			"masochism",
			"magnanimity",
			"epilepsy",
			"shyness",
			}
			
			snd.mutagen_giving = {
			"addiction",
			"allergies",
			"blisters",
			"lethargy",
			}
	
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			
      if snd.used.shield then
      	string = string.."foment anger "..snd.target..biostring..snd.sep
			elseif snd.theytumbling then
				string = string.."chakra resile "..snd.target.." 3"..biostring..snd.sep        
      elseif snd.geoinvert == false then -- make sure token is in room and following us
        string = "drop " ..snd.my_token.. "" ..snd.sep.. "muse cordon" ..snd.sep    
      elseif not snd.geotrace then
        string = "muse vine"
			elseif hp &lt;= 70 and bioessence &gt; 1 then
				if snd.defenses.def_ethereal.state ~= "deffed" then
					string = string.."void disjoint"..biostring..snd.sep
				end
			elseif physcount &gt;= 3 and mentcount &gt;= 3 and snd.my_mutagen then
        if snd.empowerready then
					string = string.."affirm trunk"..snd.sep.."chakra transcend "..snd.target..snd.sep..biostring
        else
       	  string = string.."chakra transcend "..snd.target..snd.sep..biostring
				end
      elseif not snd.checkAff("mutagen") and bioessence &gt; 1 then
				if not snd.their_mutagen then
        	string = string.."void bestow "..snd.target.." with one"..snd.sep..biostring..snd.sep
				end
      elseif not snd.checksomeAffs({"dementia", "paranoia", "hallucinations"}, 2) and snd.balance.madness then
          if snd.empowerready then
            string = string.."affirm branch"..snd.sep.."muse foster dread"..snd.sep.."chakra turmoil "..snd.target..snd.sep..biostring..snd.sep
					else
						string = string.."muse foster dread"..snd.sep.."chakra turmoil "..snd.target..snd.sep..biostring..snd.sep
					end
			elseif snd.health_percent &lt;= 75 then
				if not snd.my_impress == "Wistful" then
					string = string.."muse foster wistful"..snd.sep..biostring..snd.sep
				end
				string = string.."foment "..snd.foment_attacks[touse[1]].." "..snd.target..snd.sep..biostring..snd.sep
      else
				if not snd.my_impress == "Spite" then 
					string = string.."muse foster spite"..snd.sep..biostring..snd.sep
				end
				string = string.."foment "..snd.foment_attacks[touse[1]].." "..snd.target..snd.sep..biostring..snd.sep
      end

      if snd.toggles.affcalling and not snd.target_gone then
          string = call..string
					call = "wt Afflicting "..snd.target..": "..string
      end

      if string ~= snd.last_attack and not snd.waiting.queue then
          snd.last_attack = string
          snd.attack(snd.last_attack)
          snd.waiting.queue = true
          tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
 
    end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff2$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Basic group affs (Sunder)</name>
									<script>if snd.class == "Voidseer" then
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
			local touse = {}
      local string = "" 
      local string = ""
      local call = "" 
      local bioessence = tonumber(gmcp.Char.Vitals.bio) or 0
      local biostring = ""

      if bioessence &gt; 1 then
        biostring = "void aplomb"..snd.sep
      end
				
			snd.giving = {
			"laxity",
      "dizziness",
			"faintness",
      "epilepsy",
      "shyness",
      "merciful",
			"berserking",
      "masochism",
			"recklessness",
      "lovers_effect",
      "peace",
			"magnanimity",
			}
			
	
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			
      if snd.used.shield then -- check for shield
      	string = string.."foment anger "..snd.target
        
      elseif snd.geoinvert == false then -- make sure token is in room and following us
        string = "drop " ..snd.my_token.. "" ..snd.sep.. "muse cordon" ..snd.sep
        
      elseif not snd.checksomeAffs({"dementia", "paranoia", "hallucinations"}, 2) and snd.balance.madness then 
                                           -- madness is good bang for buck, use if 2 or more affs available
                                           -- Swirl is used as we're giving multiple affs that may trigger its special condition
                                           
          if snd.empowerready == true then -- if we can empower, do so to strip clarity
            string = "affirm branch"..snd.sep.."must foster dread"..snd.sep.."chakra turmoil "..snd.target..snd.sep..biostring
            
					else
						string = "muse foster dread"..snd.sep.."chakra turmoil "..snd.target..snd.sep..biostring
					end
          
			else 
        if snd.health_percent &lt;= 75 and snd.my_impress ~= "Wistfull" then  -- Take advantage of the threshold from star 25/50/75 to give paresis
					string = "muse foster wistfull"..snd.sep

				elseif not snd.my_impress == "Spite" and not snd.checkAff("hypochondria") then -- make them gain hypochondria on diagnose, if they don't have it already
					string = "muse foster spite"..snd.sep	
        end
        
				string = string.."foment "..snd.foment_attacks[touse[1]].." "..snd.target..snd.sep..biostring -- our shape from our priority list will be used
        call = "wt Afflicting "..snd.target..": "..touse[1]
      end

      if snd.toggles.affcalling and not snd.target_gone and call~= "" then
          string = call..snd.sep..string
      end

      if string ~= snd.last_attack and not snd.waiting.queue then
          snd.last_attack = string
          snd.attack(snd.last_attack)
          snd.waiting.queue = true
          tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
 
    end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>General Aliases</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Create Mutagens</name>
									<script>-- create a mutagen called "one" based on chronic narcotic (addiction) somnolent (lethargy) reactive (allergies)
-- create a mutagen called "two" based on chronic narcotic (addiction) atrophic (weariness) degenerative (impairment)
-- create a mutagen called "three" based on damage set chronic psychoactive (masoschism)

snd.send("revelation new one"..snd.sep.."revelation one experience unabating"..snd.sep.."revelation one effect terrifying"..snd.sep.."revelation one effect oscitant"..snd.sep.."revelation one effect Prickling"..snd.sep.."revelation one complete")
snd.send("revelation new two"..snd.sep.."revelation two experience unabating"..snd.sep.."revelation two effect terrifying"..snd.sep.."revelation two effect Enervating"..snd.sep.."revelation two effect Wasting"..snd.sep.."revelation two complete")
snd.send("revelation new three"..snd.sep.."revelation three experience unabating"..snd.sep.."revelation three effect terrifying"..snd.sep.."revelation three effect Enervating"..snd.sep.."revelation three effect kaleidoscopic"..snd.sep.."revelation three complete")</script>
									<command></command>
									<packageName></packageName>
									<regex>^muts$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Shadow</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Alchemist</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>mouse</name>
								<script>if snd.class == "Alchemist" then
snd.giving = {
"sight",
"sensitivity",
"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
    if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
   string = "alchemy corrosive "..snd.target
  elseif tonumber(gmcp.Char.Vitals.energy) then
   string = "alchemy catalyse"..snd.sep.."alchemy virulent "..snd.target.." "..venom
  else
   string = "alchemy virulent "..snd.target.." "..venom
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^ms$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>stormtouched</name>
								<script>if snd.class == "Alchemist" then
snd.giving = {

"clumsiness",
"asthma",
"allergies",
"vomiting",
"haemophilia",
"slickness",
"stupidity",
"anorexia",
--"weariness",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()

    call = ""
	
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
 	 string = "compound exposure "..snd.target..snd.sep.."alchemy corrosive "..snd.target
  elseif snd.checkAff("stormtouched") then
 	 if tonumber(gmcp.Char.Vitals.energy) then
  	string = "compound exposure "..snd.target..snd.sep.."alchemy catalyse"..snd.sep.."alchemy static  "..snd.target
 	 else
 	 	string = "compound exposure "..snd.target..snd.sep.."alchemy static "..snd.target
  	end
 	else
  	string = "compound exposure "..snd.target..snd.sep.."alchemy virulent "..snd.target.." "..venom
  	call = "wt Virulent "..snd.target..": "..venom..snd.sep
  	if tonumber(gmcp.Char.Vitals.volatility) &gt;= 4 then
  		string = "alchemy catalyse "..snd.sep..string  
  	end
  end
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^storm$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>vlock</name>
								<script>if snd.class == "Alchemist" then
snd.giving = {

"clumsiness",
"asthma",
"slickness",
"anorexia",
"stupidity",
"weariness",
"allergies",
"vomiting",
"haemophilia",
"sensitivity",
"recklessness",
"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()

    call = ""
--local boosting = false -- this is like templar vorpal
-- if tonumber(gmcp.Char.Vitals.energy) &gt;= 3 then boosting = true -- yesss
-- end
	
 if not snd.waiting.queue then
  venom = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if venom == "none" then
     venom = snd.effects[snd.giving[i]]
    end
   end
  end
	if venom == "none" then
	 venom = "epseth"
	end
  if snd.used.shield then
   string = "alchemy corrosive "..snd.target
	elseif tonumber(gmcp.Char.Vitals.volatility) &gt;= 3 then
		if not snd.checkAff("impatience") and not snd.checkAff("confusion") then
			string = "alchemy neurotic  "..snd.target
		elseif not snd.checkAff("paresis") and not snd.checkAff("stupidity") then
			string = "alchemy electroshock "..snd.target
		else
			string = "alchemy virulent "..snd.target.." "..venom
	 		call = "wt Virulent "..snd.target..": "..venom..snd.sep
		end	
  else
   string = "alchemy virulent "..snd.target.." "..venom
	 call = "wt Virulent "..snd.target..": "..venom..snd.sep
  end
	
	string = call..string
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^supp$</regex>
							</Alias>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Utility Aliases</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Pull (Allure)</name>
									<script>if snd.class == "Alchemist" then
  if matches[2] == "" then
    snd.attack("botany allure "..snd.target)
  else
    snd.attack("botany allure "..matches[2])
  end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^np(.*)$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Archivist</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>newbie damage</name>
									<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local bioessence = tonumber(gmcp.Char.Vitals.bio) or 0
 local biostring = "" 
  
  if bioessence &gt; 1 then
    biostring = "bio stimulant"..snd.sep
  end


 if not snd.waiting.queue then
  if snd.used.shield then
   	string = "incite fork "..snd.target
	else
		string = "incite crux "..snd.target..snd.sep..biostring
    
  end
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^newb$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>vet damage</name>
									<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local bioessence = tonumber(gmcp.Char.Vitals.bio) or 0
      local physcount = 0
      for aff in pairs(snd.physical_affs) do
          if table.contains(snd.target_has, snd.physical_affs[aff]) then
              physcount = physcount + 1
          end
      end
      local mentcount = 0 
      for aff in pairs(snd.mental_affs) do
          if table.contains(snd.target_has, snd.mental_affs[aff]) then
              mentcount = mentcount + 1
          end
      end 
 
 local biostring = "" 

      if bioessence &gt; 0 then
      	biostring = "bio stimulant"..snd.sep
      end

      cecho("\n&lt;red&gt;Phys:"..physcount.."&lt;red&gt;Ment: "..mentcount)

 if not snd.waiting.queue then
  if snd.used.shield then
   	string = "incite fork "..snd.target
	elseif not snd.geoinvert then
    string = "drop " ..snd.my_token.. "" ..snd.sep.. "geo invert" ..snd.sep    
  elseif not snd.geotrace then
    string = "geo trace"

   else

     if snd.checkAff("blackout") then
        if not snd.checkAff("patterns") then
           string = "geo pattern "..snd.target..snd.sep
        elseif snd.checkAff("patterns") and snd.balance.madness then
           string = "empower jhako"..snd.sep.."elicit madness "..snd.target..snd.sep
        elseif snd.checksomeAffs({"dementia", "paranoia", "hallucinations"}, 1) then
           --string = "geo impress rod"..snd.sep.."incite hex "..snd.target..snd.sep
           string = "goggle scan "..snd.target..snd.sep.."geo impress rod"..snd.sep.."incite crux "..snd.target..snd.sep..biostring..biostring  
        end
 
      elseif snd.my_incite == "Crescent" then
        string = "geo impress rod"..snd.sep.."incite crux "..snd.target..snd.sep..biostring..snd.sep..biostring  
                    
     elseif snd.my_incite ~= "" and snd.crescentable then
       string = "geo impress star"..snd.sep.."incite crescent " ..snd.target 
       
     else
      string = "geo impress star"..snd.sep.."incite crux "..snd.target..snd.sep..biostring..snd.sep..biostring..snd.sep.."quickassess "..snd.target 
    end 
        
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end

snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic group affs</name>
									<script>if snd.class == "Archivist" then
snd.starting_attack()
function snd.attack_function()
    if not snd.waiting.queue then
			local touse = {}
      local string = "" 
      local biostring = "" 
      local call = "" 
      local bioessence = tonumber(gmcp.Char.Vitals.bio) or 0

      if bioessence &gt; 1 then
      	biostring = "bio stimulant"..snd.sep
      end
				
			snd.giving = {
			"laxity",
      "dizziness",
			"faintness",
      "epilepsy",
      "shyness",
      "merciful",
			"berserking",
      "masochism",
			"recklessness",
      "lovers_effect",
      "peace",
			"magnanimity",
			}
			
	
			for i in pairs(snd.giving) do
				if not snd.checkAff(snd.giving[i]) then
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			
      if snd.used.shield then -- check for shield
      	string = string.."incite fork "..snd.target
        
      elseif snd.geoinvert == false then -- make sure token is in room and following us
        string = "drop " ..snd.my_token.. "" ..snd.sep.. "geo invert" ..snd.sep
        
      elseif not snd.checksomeAffs({"dementia", "paranoia", "hallucinations"}, 2) and snd.balance.madness then 
                                           -- madness is good bang for buck, use if 2 or more affs available
                                           -- Swirl is used as we're giving multiple affs that may trigger its special condition
                                           
          if snd.empowerready == true then -- if we can empower, do so to strip clarity
            string = "empower jhako"..snd.sep.."geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep..biostring
            
					else
						string = "geo impress swirl"..snd.sep.."elicit madness "..snd.target..snd.sep..biostring
					end
          
			else 
        if snd.health_percent &lt;= 75 and snd.my_impress ~= "star" then  -- Take advantage of the threshold from star 25/50/75 to give paresis
					string = "geo impress star"..snd.sep

				elseif not snd.my_impress == "hex" and not snd.checkAff("hypochondria") then -- make them gain hypochondria on diagnose, if they don't have it already
					string = "geo impress hex"..snd.sep	
        end
        
				string = string.."incite "..snd.foment_attacks[touse[1]].." "..snd.target..snd.sep..biostring -- our shape from our priority list will be used
        call = "wt Afflicting "..snd.target..": "..touse[1]
      end

      if snd.toggles.affcalling and not snd.target_gone and call~= "" then
          string = call..snd.sep..string
      end

      if string ~= snd.last_attack and not snd.waiting.queue then
          snd.last_attack = string
          snd.attack(snd.last_attack)
          snd.waiting.queue = true
          tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
 
    end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Carnifex</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Carnifex" then
snd.send("quickwield both greatmaul")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Carnifex" then
snd.send("quickwield both bardiche")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield limbs</name>
									<script>if snd.class == "Carnifex" then
snd.send("quickwield both warhammer")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wlb$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Deathlore</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>rez</name>
									<script>if snd.class == "Carnifex" then
if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb soul call "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>venoms only</name>
									<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"clumsiness",
"asthma",
"slickness",
"stupidity",
"anorexia",
"allergies",
--"weariness",
--"haemophilia",
--"sensitivity",
--"vomiting",
--"recklessness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local left = "none"
  local right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epteth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.used.rebounding and snd.used.shield then
   string = "pole raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
   string = "pole spinslash "..snd.target.." "..left.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^vn$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>affs</name>
									<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"asthma",
"clumsiness",
"slickness",
"stupidity",
"anorexia",
"dizziness",
--"weariness",
--"sensitivity",
--"haemophilia",
--"vomiting",
--"allergies",
--"recklessness",
--"voyria",
}
snd.hound_queue = {
"mark",
"dizziness",
"berserking",
"weariness",
"impairment",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  local string = ""
  local left = "none"
  local right = "none"

  for i in pairs(snd.giving) do
   if not snd.checkAff(snd.giving[i]) and snd.giving[i] ~= snd.implant then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.used.rebounding and snd.used.shield then
   string = "pole raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
	 if snd.checkAff("fallen") and snd.target_locked() then
	  if table.contains(snd.target_has, "crushed_chest") then
		 string = "hammer pulverize "..snd.target
		else
	   string = "hammer crush "..snd.target.." chest"
		end
	 else
    string = "pole spinslash "..snd.target.." "..left.." "..right
	  if snd.toggles.affcalling and not snd.target_gone then
	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	  end
	 end
	end
	if snd.soul &lt;= 80 and not table.contains(snd.target_has, "soul_disease") then
	 string = string..snd.sep.."soul disease "..snd.target
	elseif snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif #snd.target_has &gt;= 12 and snd.balance.soulpoison then
	 string = string..snd.sep.."soul poison "..snd.target
	elseif snd.soul &lt;= 75 and snd.balance.implant and not table.contains(snd.target_has, "soul_implant") then
	 if snd.target_locked() then
	  string = string..snd.sep.."soul implant "..snd.target.." aconite slike"
	 end
	end
	string = x..string..snd.sep.."hammer throw "..snd.target
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  if snd.used.rebounding or snd.used.shield then
   string = "hammer raze "..snd.target
  elseif snd.proned() then
   if table.contains(snd.target_has, "crushed_chest") then
	  string = "hammer pulverize "..snd.target
	 else
	  string = "hammer crush "..snd.target.." chest"
	 end
  else
   string = "pole spinslash "..snd.target.." epseth epseth"
  end
	if snd.soul &lt;= 90 then
	 string = string..snd.sep.."soul distort "..snd.target
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>magic</name>
									<script>if snd.class == "Carnifex" then
snd.giving = {
"paresis",
"asthma",
"weariness",
"slickness",
"stupidity",
"anorexia",
"dizziness",
--"clumsiness",
--"sensitivity",
--"haemophilia",
--"vomiting",
--"allergies",
--"recklessness",
--"voyria",
}
snd.hound_queue = {
"stupidity",
"weariness",
"confusion",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  left = "none"
  right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) and snd.giving[i] ~= snd.implant then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  if snd.used.rebounding and snd.used.shield then
   string = "pole raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
	 if snd.proned() then
	  if table.contains(snd.target_has, "crushed_chest") then
		 string = "hammer pulverize "..snd.target
		else
	   string = "hammer crush "..snd.target.." chest"
		end
	 else
    string = "pole spinslash "..snd.target.." "..left.." "..right
	  if snd.toggles.affcalling and not snd.target_gone then
	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	  end
	 end
	end
	if snd.soul &lt;= 80 and not table.contains(snd.target_has, "soul_disease") then
	 string = string..snd.sep.."soul disease "..snd.target
	elseif snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif #snd.target_has &gt;= 12 and snd.balance.soulpoison then
	 string = string..snd.sep.."soul poison "..snd.target
	elseif snd.soul &lt;= 75 and snd.balance.implant and not table.contains(snd.target_has, "soul_implant") then
	 if snd.target_locked() and table.contains(snd.target_has, "stupidity") then
	  string = string..snd.sep.."soul implant "..snd.target.." kalmia gecko"
	 end
	elseif snd.soul &lt;= 20 then
	 string = string..snd.sep.."soul sacrifice "..snd.target
	end
	string = x..string
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Carnifex" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "soul erode "..snd.target
  else
   	string = "hammer doublebash "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can pulverize now!
  if table.contains(snd.target_has, "crushed_chest") and snd.proned() then
   string = "hammer pulverize "..snd.target
	-- or if we should set up pulverize...
	elseif snd.proned() and snd.resto_limb ~= "none" then
	 string = "hammer crush "..snd.target.." chest"
  else -- can't pulverize, needs logic
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 -- are the legs prepped?
	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
		 string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."hammer doublebash "..snd.target
	 else -- target not prone, legs not prepped
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- don't do anything!
			 -- if it's not a leg about to break, go for it
		  elseif right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	  if left == "nothing" then -- we only found one limb to hit
	   left = right -- double up!
	  end
	  -- end limb picking logic
	  -- on to attacking logic!
	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
     string = "hammer raze "..snd.target -- raze has static balance cost
	  else
	   string = "hammer doublebash "..snd.target.." "..left.." "..right
		 if snd.soul &lt;= 80 and not table.contains(snd.target_has, "glasslimb") then
		  string = string..snd.sep.."soul frailty "..snd.target
		 end
    end
	 end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="no" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Carnifex" then
snd.hound_queue = {
"frozen",
}
snd.starting_attack()
function snd.attack_function()
 snd.handle_hounds()
 if not snd.waiting.queue then
  -- list what limbs to hit
  limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can pulverize now!
  if table.contains(snd.target_has, "crushed_chest") and snd.proned() then
   string = "hammer pulverize "..snd.target
	-- or if they're prone and staying that way
	elseif snd.proned() and ((snd.limb_dmg["left leg"] &gt;= 33.33 and snd.limb_dmg["right leg"] &gt;= 33.33) or snd.limb_dmg["left leg"] &gt;= 66.66 or snd.limb_dmg["right leg"] &gt;= 66.66) then
	 -- are they distorted?
	 if table.contains(snd.target_has, "distortion") and snd.soul &lt;= 70 then
	  string = "hammer crush "..snd.target.." chest"
	 -- do we need to raze?
	 elseif snd.used.shield or snd.used.rebounding then
	  string = "hammer raze "..snd.target
	 -- can they parry?
	 else
	  string = "hammer crush "..snd.target.." chest"
	 end
	elseif snd.proned() then -- at least they're prone
	 if (snd.used.shield or snd.used.rebounding) and not table.contains(snd.target_has, "distortion") then -- bleh!
	  string = "hammer raze "..snd.target
	 else -- make sure they stay down
	  if table.contains(snd.target_has, "frozen") or table.contains(snd.target_has, "distortion") then
		 string = "hammer doublebash "..snd.target.." left leg right leg"
	  elseif snd.parried_limb == "left leg" then
		 string = "hammer doublebash "..snd.target.."right leg right leg"
		elseif snd.parried_limb == "right leg" then
		 string = "hammer doublebash "..snd.target.."left leg left leg"
		else
	   string = "hammer doublebash "..snd.target.." left leg right leg"
		end
	 end
	-- did they apply resto?
	--elseif not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
	-- string = "target nothing with left"..snd.sep.."target nothing with right"..snd.sep.."pole spinslash "..snd.target.." epseth epseth"
  else -- can't pulverize, needs logic
	 -- pick what limbs to hit
	 left = "nothing"
	 right = "nothing"
	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 -- are the legs prepped?
	 elseif snd.limb_dmg["right leg"] &lt; 33.33 and (snd.limb_dmg["right leg"] + 7.41 &gt;= 33.33) and snd.limb_dmg["left leg"] &lt; 33.33 and (snd.limb_dmg["left leg"] + 7.41 &gt;= 33.33) and not snd.used.shield and not snd.used.rebounding then
    string = "target left leg with left"..snd.sep.."target right leg with right"..snd.sep.."hammer doublebash "..snd.target
	 else -- target not prone, legs not prepped
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  if right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	  if left == "nothing" then -- we only found one limb to hit
	   left = right -- double up!
	  end
	  -- end limb picking logic
	  -- on to attacking logic!
	  if snd.used.shield or snd.used.rebounding then -- baddie is turtling
     string = "hammer raze "..snd.target -- raze has static balance cost
	  else
	   string = "hammer doublebash "..snd.target.." "..left.." "..right
    end
	 end
	end
	if snd.soul &lt;= 90 and not table.contains(snd.target_has, "soul_wraith") then
	 string = string..snd.sep.."soul wraith "..snd.target
	elseif snd.soul &lt;= 90 then
	 string = string..snd.sep.."soul distort "..snd.target
  elseif snd.soul &lt;= 80 and not table.contains(snd.target_has, "glasslimb") then
   string = string..snd.sep.."soul frailty "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^legs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Carnifex Limb Aff Support (need Tundralhowl dog)</name>
									<script>if snd.class == "Carnifex" then
snd.giving = {
"left_leg_crippled",
"right_leg_crippled",
"left_arm_crippled",
"right_arm_crippled",
"paresis",
"asthma",
"slickness",
"stupidity",
"anorexia",
"dizziness",
"clumsiness",
--"weariness",
--"sensitivity",
--"haemophilia",
--"vomiting",
--"allergies",
--"recklessness",
--"voyria",
}

  snd.hound_queue = {
  "frozen",
  }
  
snd.starting_attack()
function snd.attack_function()
   snd.handle_hounds()
if not snd.waiting.queue then
  local string = ""
  local left = "none"
  local right = "none"
  local hound_aff = "frozen"  
  local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)  
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) and snd.giving[i] ~= snd.implant then
    if right == "none" then
     right = snd.effects[snd.giving[i]]
    elseif left == "none" then
     left = snd.effects[snd.giving[i]]
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
	x = ""
  
  if snd.used.rebounding and snd.used.shield then
   string = "raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "pole razehack "..snd.target.." "..right
	 if snd.toggles.affcalling and not snd.target_gone then
	  x = "wt Afflicting "..snd.target..": "..right..snd.sep
	 end
  else
	 if snd.checkAff("fallen") then
	  if table.contains(snd.target_has, "crushed_chest") then
		 string = "hammer pulverize "..snd.target
		else
	   string = "hammer crush "..snd.target.." chest"
		end
	 else
    string = "pole spinslash "..snd.target.." "..left.." "..right
	  if snd.toggles.affcalling and not snd.target_gone then
	   x = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	  end
	 end
	end

	string = x..string
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Earthcaller</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Random aliases</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>beckon</name>
									<script>if snd.class == "Earthcaller" then
if matches[2] == "" then
 snd.send("qeb osso lurch "..snd.target)
elseif matches[2] == "all" then
 snd.send("qeb osso lurch")
else
 snd.send("qeb osso lurch "..matches[2])
end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bk(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>force stop</name>
									<script>if snd.class == "Earthcaller" then
 if snd.toggles.attacking then snd.toggle("attacking") end
 if matches[2] == "" then
  snd.send("qeb dirge ordain "..snd.target.." stop")
 else
  snd.send("qeb dirge ordain "..matches[2].." stop")
 end
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fs(.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>resurrection</name>
									<script>if snd.class == "Earthcaller" then
if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb dirge imperishable "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Earthcaller" then
snd.giving_shield = {
"sight",
"paresis",
"weariness",
"asthma",
}
snd.giving_spur = {
"impatience",
"sensitivity",
"stupidity",
"vertigo",
"self_pity",
"migraine",
}
snd.giving_subdue = {
"loneliness",
"hypochondria",
"stupidity",
"lethargy",
"dementia",
"recklessness",
"masochism",
"paranoia"
}
snd.starting_attack()
function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
 local shield = "none"
 local spur = "none"
 local subdue = "none"
 if snd.mana_percent &lt; 40 and not snd.used.shield then
  string = "osso fragment "..snd.target
 elseif snd.proned() then
  string = "shield deface "..snd.target
 elseif table.contains(snd.target_has, "sight") then
  string = "tectonic transfixion "..snd.target
 else
  if snd.balance.battle then
   for i in pairs(snd.giving_spur) do
	  if not snd.checkAff(snd.giving_spur[i]) and battle == "none" then
	   spur = snd.giving_spur[i]
	  end
	 end
  end
  if snd.used.shield then
   shield = "shield raze"
  else
   for i in pairs(snd.giving_shield) do
    if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
	   shield = snd.subjugation_attacks[snd.giving_shield[i]]
	  end
   end
  end
  if shield == "none" then
   shield = "shield strike"
  end
  if snd.used.rebounding and shield ~= "facesmash" then
   shield = "shield raze"
  end
  for i in pairs(snd.giving_subdue) do
   if not snd.checkAff(snd.giving_subdue[i]) and subdue == "none" and snd.giving_subdue[i] ~= battle then
	  subdue = snd.giving_subdue[i]
	 end
  end
  if spur ~= "none" then
   if snd.toggles.affcalling and not snd.target_gone then
	  string = "wt Spur "..snd.target..": "..spur..snd.sep
	 end
   string = string.."osso spur "..spur.." "..snd.target..snd.sep
  end
  string = string..shield.." "..snd.target..snd.sep
  if shield ~= "slam" and shield ~= "overwhelm" then
   if subdue == "none" then
    string = string.."subdue "..snd.target
   else
	  if snd.toggles.affcalling and not snd.target_gone then
	   string = string.."wt Subdue "..snd.target..": "..subdue..snd.sep
	  end
    string = string.."subdue "..snd.target.." "..subdue
	 end
  end
 end
 
 if string.find(string, "deface") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then 
 	string = string..snd.sep.."quickwield left tower"
 end

 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Earthcaller Group Manadrain Affs</name>
									<script>local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
local mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

if snd.class == "Earthcaller" then

snd.starting_attack()
function snd.attack_function()

if not snd.waiting.queue then
 local string = ""
 local astring = "" 
 local shield = "none"
 local battle = "none"
 local chasten = "none"
 local tohit = {}
 local string = "contemplate " .. snd.target .. snd.sep 
 local missing = snd.missingAff("stupidity/paresis/anorexia/asthma", "/")
 local total_aff_count = 0
 local mental_aff_count = 0 
 
    for aff in pairs(snd.all_affs) do
      if table.contains(snd.target_has, snd.all_affs[aff]) then total_aff_count = total_aff_count + 1 end
    end
    
    for aff in pairs(snd.mental_affs) do
	   if table.contains(snd.target_has, snd.mental_affs[aff]) then mental_aff_count = mental_aff_count + 1 end
    end
    
    if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string .. "quickwield right "..snd.crozier.. snd.sep end
    if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string .. "quickwield left buckler" .. snd.sep end	
	
  snd.giving_shield = {
  "paresis",
  "asthma",    
  "weariness", 
  "berserking",
  "allergies",
  "confusion",   
  "disrupted",   
  "sight",  
  "writhe_transfix",  

   }
   
  snd.giving_battle = {
  "stupidity",
  "anorexia",   
  "vertigo",  
  "self-pity",  
  "berserking",
  "impatience",    
  "migraine",    
  "sensitivity",
  }
  
  if snd.checkAff("impatience") and not snd.checkAff("agony") then

  snd.giving_chasten = {
  "agony", 
  "hypochondria",
  "stupidity",
  "lethargy",    
  "recklessness",
  "anorexia",  
  "masochism",
  "dementia",
  "paranoia",
   
  }
  else
    
  snd.giving_chasten = {
  "hypochondria",
  "stupidity",
  "lethargy",    
  "recklessness",
  "anorexia",  
  "masochism",
  "dementia",
  "paranoia",
  "agony",      

  }

end
	snd.giving = {
		--"sight",
        "asthma",
		"paresis",
		"clumsiness",
		"squelched",
		"shyness",
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		"haemophilia",
		"recklessness",
		"weariness",
		"voyria",
		"dizziness",

		}

    cecho("&lt;yellow&gt; Affs: "..#snd.target_has)

    if mp &gt;= 70 and gmcp.Char.Vitals.hp &lt; gmcp.Char.Vitals.mp and cansip == false then
        string = "nimbleness"..snd.sep.."shift"..snd.sep
    end	

    --Absolve check
    if snd.mana_percent &lt;= 43 and not snd.used.shield then
      string = "osso fragment " .. snd.target..snd.sep
    end
	
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if not snd.checkAff(snd.giving_chasten[i]) and chasten == "none" and snd.giving_chasten[i] ~= battle then
          chasten = snd.giving_chasten[i]
        end
      end

      --Battle aff pick
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end	  
	  
      --Shield aff pick
      if snd.used.shield then
        shield = "shield raze"
        -- If they are prone/psuedo prone and have 5 affs, smack them
      elseif #snd.target_has &gt;= 5 and snd.proned() then
        shield = "quickwield left tower"..snd.sep.."shield deface " .. snd.target
        -- We need to build up disrupt/affs.
      else
        for i in pairs(snd.giving_shield) do
      --    if not snd.checksomeAffs({"hypochondria","stupidity","agony"}, 1) and #snd.target_has &gt; 3 then   -- added this to test
      --      shield = ""
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.subjugation_attacks[snd.giving_shield[i]]
          end
        end
      end
	  
      if snd.used.rebounding then
        if snd.checkAff("confusion") or #snd.target_has &lt; 3 then
          shield = "shield raze"
        else
          shield = "dirge hysteria"
        end
      end
 
    if snd.infiltrate == false or snd.infiltrate == "nil" then		
        string = "osso infiltrate "..snd.target..snd.sep  
      
--    elseif #snd.target_has &gt;= 7 then
--      string = "osso bleach " ..snd.target..snd.sep

     elseif snd.checkAff("accursed") and not snd.checkAff("hellsight") then
       string = "dirge reckoning "..snd.target..snd.sep     
 
     elseif snd.checksomeAffs({"stupidity", "paresis", "anorexia", "asthma"}, 3) and not snd.checkAff("slickness") then
       string = "dirge reckoning "..snd.target..snd.sep
                  
    end
 
      if battle ~= "none" then
        string = string .. "osso spur " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/tectonics/dirge attacks
         string = string .. shield .. " " .. snd.target .. snd.sep
	  
      --Add chasten choice
      if not shield:find("slam") or shield:find("transfix") or shield:find("hysteria") or shield:find("crash") then
        if chasten == "none" then
          string = string .. "subdue " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Subdue " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .."contemplate "..snd.target..snd.sep.."subdue " .. snd.target .. " " .. chasten..snd.sep
        end
      end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end
end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mana drain</name>
									<script>if snd.class == "Earthcaller" then
  snd.giving_spur = {"stupidity", "vertigo", "self_pity", "migraine", "sensitivity", "impatience"}
  snd.giving_subdue =
    {
      "lethargy",
      "loneliness",
      "stupidity",
      "hypochondria",
      "dementia",
      "recklessness",
      "masochism",
      "paranoia",
    }
  snd.starting_attack()

  function snd.attack_function()
 local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local spur = "none"
    local subdue = "none"
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "osso fragment " .. snd.target
    elseif snd.mana_percent &lt; 40 and snd.used.shield then
      for i in pairs(snd.giving_subdue) do
        if
          not snd.checkAff(snd.giving_subdue[i]) and
          subdue == "none" and
          snd.giving_subdue[i] ~= battle
        then
          subdue = snd.giving_subdue[i]
        end
      end
      string = "shield raze " .. snd.target .. snd.sep
      if snd.toggles.affcalling and not snd.target_gone then
        string = string .. "wt subdue " .. snd.target .. ": " .. subdue .. snd.sep
      end
      string = string .. "subdue " .. snd.target .. " " .. subdue
    else
      string = string.."osso bleach " .. snd.target
    end
		
    if snd.balance.battle then
      for i in pairs(snd.giving_spur) do
        if not snd.checkAff(snd.giving_spur[i]) and spur == "none" then
          spur = snd.giving_spur[i]
        end
      end
    end
    string = "osso spur " .. spur .. " " .. snd.target .. snd.sep .. string
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt spur " .. snd.target .. ": " .. spur .. snd.sep .. string
    end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mana$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Group Impale/Tfix</name>
									<script>if snd.class == "Earthcaller" then
  snd.giving_shield = {"paresis", "weariness", "sight", "asthma"}
  snd.giving_spur = {"impatience", "sensitivity", "self_pity", "stupidity", "vertigo"}
  snd.giving_subdue =
    {
      "hypochondria",
      "loneliness",
      "recklessness",
      "stupidity",
      "lethargy",
      "masochism",
      "dementia",
      "paranoia",
      "anorexia",
    }
  snd.starting_attack()

  function snd.attack_function()
  local total_aff_count = snd.aff_count_all()
  local mental_aff_count = snd.aff_count_mental()
  
  local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end

    local shield = "none"
    local spur = "none"
    local subdue = "none"
    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "osso fragment " .. snd.target
      --They've hit our aff count limit, let's lock them down/kill them.
    elseif total_aff_count &gt;= 4 and snd.checkAff("sight") and not snd.used.shield then
      if not snd.checkAff("writhe_transfix") then
        string = "tectonic transfixion " .. snd.target
      else
        string = "shield deface " .. snd.target
        if snd.checkAff("hearing") and not snd.checkAff("sensitivity") then
          string = "osso spur " .. snd.target .. " sensitivity" .. snd.sep .. string
        end
      end
    else
      if snd.balance.battle then
        for i in pairs(snd.giving_spur) do
          if not snd.checkAff(snd.giving_spur[i]) and spur == "none" then
            spur = snd.giving_spur[i]
          end
        end
      end
      if snd.used.shield then
        shield = "shield raze"
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.subjugation_attacks[snd.giving_shield[i]]
          end
        end
      end
      if shield == "none" then
        shield = "shield strike"
      end
      if snd.used.rebounding and shield ~= "facesmash" then
        shield = "shield raze"
      end

      for i in pairs(snd.giving_subdue) do
        if
          not snd.checkAff(snd.giving_subdue[i]) and
          subdue == "none" and
          snd.giving_subdue[i] ~= spur
        then
          subdue = snd.giving_subdue[i]
        end
      end

      if spur ~= "none" then
        if snd.toggles.affcalling and not snd.target_gone then
          string = "wt spur " .. snd.target .. ": " .. spur .. snd.sep
        end
        string = string .. "osso spur " .. spur .. " " .. snd.target .. snd.sep
      end

      string = string .. shield .. " " .. snd.target .. snd.sep

      if not shield:find("slam") then
        if subdue == "none" then
          string = string .. "subdue " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Subdue " .. snd.target .. ": " .. subdue .. snd.sep
          end
          string = string .. "subdue " .. snd.target .. " " .. subdue
        end
      end
    end

    if string.find(string, "deface") and not string.find(gmcp.Char.Vitals.wield_left, "tower") then
      string = "quickwield left tower"..string..snd.sep
    end


    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^git$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Smite - Straight damage</name>
									<script>if snd.class == "Earthcaller" then
  snd.giving_spur = {"sensitivity", "stupidity", "vertigo", "self_pity", "migraine", "impatience"}
  snd.giving_subdue =
    {
      "dementia",
      "loneliness",
      "stupidity",
      "hypochondria",
      "recklessness",
      "masochism",
      "paranoia",
      "lethargy",
    }
  snd.starting_attack()

  function snd.attack_function()
  local string = "contemplate "..snd.target..snd.sep
 	if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string.."quickwield right crozier"..snd.sep end
	if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string.."quickwield left buckler"..snd.sep end
  
  local spur = "none"
  local subdue = "none"
  local overwhelm = false
    
  if snd.balance.battle then
    for i in pairs(snd.giving_spur) do
      if not snd.checkAff(snd.giving_spur[i]) and spur == "none" then
        spur = snd.giving_spur[i]
      end
    end
  end
  
  for i in pairs(snd.giving_subdue) do
    if not snd.checkAff(snd.giving_subdue[i]) and subdue == "none" and
      snd.giving_subdue[i] ~= battle
    then
      subdue = snd.giving_subdue[i]
    end
  end  
  
  if snd.checksomeAffs(snd.entangleaffs, 1) then
      overwhelm = true
  end
  
  if snd.balance.battle then
    string = string..snd.sep.."osso spur "..spur.." "..snd.target..snd.sep
    if snd.toggles.affcalling and not snd.target_gone then
      string = "wt spur " .. snd.target .. ": " .. spur .. snd.sep .. string
    end
  end

  if snd.mana_percent &lt; 40 and not snd.used.shield then
    string = "osso fragment " .. snd.target
  elseif snd.mana_percent &lt; 40 and snd.used.shield then
    string = "shield raze " .. snd.target .. snd.sep
  elseif overwhelm then
    string = "deface "..snd.target..snd.sep
  else
    string = string.."quash " .. snd.target ..snd.sep
  end
  
  if snd.toggles.affcalling and not snd.target_gone then
    string = string .. "wt subdue " .. snd.target .. ": " .. subdue .. snd.sep
  end
  string = string .. " subdue " .. snd.target .. " " .. subdue
		
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Earthcaller Group Dmg</name>
									<script>local hp = 100*(gmcp.Char.Vitals.hp/gmcp.Char.Vitals.maxhp)
local mp = 100*(gmcp.Char.Vitals.mp/gmcp.Char.Vitals.maxmp)

if snd.class == "Earthcaller" then

snd.starting_attack()
function snd.attack_function()

if not snd.waiting.queue then
 local string = ""
 local astring = "" 
 local shield = "none"
 local battle = "none"
 local chasten = "none"
 local tohit = {}
 local string = "contemplate " .. snd.target .. snd.sep 
 local missing = snd.missingAff("stupidity/paresis/anorexia/asthma", "/")
 local total_aff_count = 0
 local mental_aff_count = 0 
 
    for aff in pairs(snd.all_affs) do
      if table.contains(snd.target_has, snd.all_affs[aff]) then total_aff_count = total_aff_count + 1 end
    end
    
    for aff in pairs(snd.mental_affs) do
	   if table.contains(snd.target_has, snd.mental_affs[aff]) then mental_aff_count = mental_aff_count + 1 end
    end
    
    if not string.find(gmcp.Char.Vitals.wield_right, "crozier") then string = string .. "quickwield right "..snd.crozier.. snd.sep end
    if not string.find(gmcp.Char.Vitals.wield_left, "buckler") then string = string .. "quickwield left buckler" .. snd.sep end	
    if not string.find(gmcp.Char.Vitals.wield_left, "tower") then string = string .. "quickwield left tower" .. snd.sep end	
	
  snd.giving_shield = {
  "paresis",
  "asthma",  
  "weariness",
  "confusion",
  "berserking",
  "sight",  
  "writhe_transfix",  
   }
   
  snd.giving_battle = {
   "sensitivity",
   "vertigo",
   "impatience",
   "berserking",   
   "stupidity",
   "self-pity",
   "migraine",
   "anorexia",
  }
  
  snd.giving_chasten = {
   "loneliness",   
   "lethargy",
   "dementia",
   "stupidity",   
   "recklessness",
   "hypochondria",   
   "paranoia",
   "masochism",
   "agony",   
   "anorexia",
  }

	snd.giving = {
		--"sight",
        "asthma",
		"paresis",
		"clumsiness",
		"squelched",
		"shyness",
		"slickness",
		"stupidity",
		"anorexia",
		"sensitivity",
		"haemophilia",
		"recklessness",
		"weariness",
		"voyria",
		"dizziness"

		}

    cecho("&lt;yellow&gt; Affs: "..#snd.target_has)


    if mp &gt;= 70 and gmcp.Char.Vitals.hp &lt; gmcp.Char.Vitals.mp and cansip == false then
        string = "nimbleness"..snd.sep.."shift"
    end	

    --Absolve check
    if snd.mana_percent &lt; 40 and not snd.used.shield then
      string = "osso fragment " .. snd.target
    end

      --Battle aff pick
      if snd.balance.battle then
        for i in pairs(snd.giving_battle) do
          if not snd.checkAff(snd.giving_battle[i]) and battle == "none" then
            battle = snd.giving_battle[i]
          end
        end
      end	  
      	
      --Chasten aff pick
      for i in pairs(snd.giving_chasten) do
        if not snd.checkAff(snd.giving_chasten[i]) and chasten == "none" and snd.giving_chasten[i] ~= battle then
          chasten = snd.giving_chasten[i]
        end
      end
	  
      --Shield aff pick
      if snd.used.shield then
        shield = "shield raze"
        -- If they are prone/psuedo prone and have 5 affs, smack them
      elseif #snd.target_has &gt;= 5 and snd.proned() then
        if not string.find(gmcp.Char.Vitals.wield_left, "tower") then
           shield = "quickwield left tower"..snd.sep.."shield deface " .. snd.target
        else
           shield = "quickwield left buckler"..snd.sep.."shield deface " .. snd.target
        end
        -- We need to build up disrupt/affs.
      else
        for i in pairs(snd.giving_shield) do
          if not snd.checkAff(snd.giving_shield[i]) and shield == "none" then
            shield = snd.subjugation_attacks[snd.giving_shield[i]]
          end
        end
      end
    	  
      if snd.used.rebounding then
        if snd.checkAff("confusion") or #snd.target_has &lt; 3 then
          shield = "shield raze"
        else
          shield = "dirge hysteria"
        end
      end

    if snd.infiltrate == false or snd.infiltrate == "nil" then		
       string = "osso infiltrate "..snd.target..snd.sep

    elseif snd.checksomeAffs({"agony", "accursed"}, 1) and not snd.checkAff("faulted") then
       string = "tectonic fault "..snd.target..snd.sep  
       
--    elseif snd.checkAff("accursed") and not snd.checkAff("hellsight") then
--       string = "dirge reckoning "..snd.target..snd.sep     
    end
 
      if battle ~= "none" then
        string = string .. "osso spur " .. battle .. " " .. snd.target .. snd.sep
      end
      --Add shield/tectonics/dirge attacks
      string = string .. shield .. " " .. snd.target .. snd.sep
	  
      --Add chasten choice
      if not shield:find("slam") or shield:find("transfix") or shield:find("hysteria") or shield:find("crash") then
        if chasten == "none" then
          string = string .. "subdue " .. snd.target
        else
          if snd.toggles.affcalling and not snd.target_gone then
            string = string .. "wt Subdue " .. snd.target .. ": " .. chasten .. snd.sep
          end
          string = string .. "subdue " .. snd.target .. " " .. chasten..snd.sep.."contemplate "..snd.target
        end
      end

    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end
end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^gdmg$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Executor</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>mouse mode</name>
									<script>if snd.class == "Executor" then
snd.giving = {
"sight",
"paresis",
"clumsiness",
"asthma",
"sensitivity",
"vomiting",
"allergies",
"haemophilia",
"slickness",
--"anorexia",
--"stupidity",
--"recklessness",
--"weariness",
--"dizziness",
--"voyria",
}
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  call = ""
  left = "none"
  right = "none"
  for i in pairs(snd.giving) do
   if not table.contains(snd.target_has, snd.giving[i]) then
	 if snd.giving[i] ~= "paresis" or not table.contains(snd.target_has, "paralysis") then
     if right == "none" then
      right = snd.effects[snd.giving[i]]
     elseif left == "none" then
      left = snd.effects[snd.giving[i]]
		end
    end
   end
  end
  if left == "none" then
   left = "epseth"
  end
  if right == "none" then
   right = "epseth"
  end
  if snd.used.rebounding and snd.used.shield then
   string = "ringblade twinraze "..snd.target
  elseif snd.used.shield or snd.used.rebounding then
	 string = "ringblade dance "..snd.target.." shave beguile "..right
	if snd.toggles.affcalling and not snd.target_gone then
	 call = "wt Afflicting "..snd.target..": "..right..snd.sep
	end
  else
   string = "ringblade dance "..snd.target.." contrive beguile "..left.." "..right
	if snd.toggles.affcalling and not snd.target_gone then
	 call = "wt Afflicting "..snd.target..": "..left..", "..right..snd.sep
	end
  end
	string = call..string
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ms$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Venom Lock</name>
									<script>if snd.class == "Executor" then
snd.current_offense = "SentVLock"


snd.starting_attack()
function snd.attack_function()
  local second_attack = ""

		if not snd.waiting.queue then
    snd.giving = {
		  "clumsiness",
			"asthma",
			"slickness",
			"confusion",
      "slickness",
      "anorexia",
			"left_leg_crippled",
			"right_leg_crippled",
      "heartflutter",
			"vomiting",
			"dizziness",
			"sight",
			"hearing",
			"sensitivity",}

	call = ""
	left = "none"
	right = "none"

	 left, right = Executor_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "inveigle"
		else
			second_attack = "beguile"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "ringblade twinraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "ringblade stifle "..snd.target
			
		elseif snd.ringblade_attacks[left] == "accost" or snd.ringblade_attacks[left] == "rimestalker" then
			left = snd.accost_accomplices[left]
			string = left..snd.target..snd.sep.."ringblade brandish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.ringblade_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.ringblade_attacks[left].." "..snd.ringblade_attacks[right]
				else
					string = snd.ringblade_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.ringblade_affs, right) then
				string = "contrive "..snd.ringblade_attacks[right].." "..snd.effects[left]
			else
				string = "contrive "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "ringblade dance "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "ringblade terminate "..snd.target
		end
		
		if string:find("brutalise") or string:find("saw") or string:find("stifle") or string:find("twinraze") or string:find("terminate") then
			call = ""
		end

		string = "wipe ringblade"..snd.sep..call..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	--snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Transfix + Sensitivity</name>
									<script>if snd.class == "Executor" then
snd.current_offense = "SentLumiSupport"


snd.starting_attack()
function snd.attack_function()
  local second_attack = ""
  if snd.target_locked() then
			snd.giving = {
			"left_leg_crippled",
			"right_leg_crippled",
      "confusion",
      "impairment",
			"weariness",
			"dizziness",
			"hearing",
			"sensitivity",}
		else
      snd.giving = {
      "clumsiness",
      "hearing",
      "sight",
      "asthma",
      "slickness",
      "anorexia",
			"left_leg_crippled",
			"right_leg_crippled",
      "confusion",
      "weariness",
      "vomiting",
      "shyness",
      "dizziness",
      }
		end
		if not snd.waiting.queue then

	call = ""
	left = "none"
	right = "none"

	 left, right = Executor_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "inveigle"
		else
			second_attack = "beguile"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "ringblade twinraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "ringblade stifle "..snd.target
			
		elseif snd.ringblade_attacks[left] == "accost" or snd.ringblade_attacks[left] == "rimestalker" then
			left = snd.accost_accomplices[left]
			string = left..snd.target..snd.sep.."ringblade brandish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.ringblade_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.ringblade_attacks[left].." "..snd.ringblade_attacks[right]
				else
					string = snd.ringblade_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.ringblade_affs, right) then
				string = "contrive "..snd.ringblade_attacks[right].." "..snd.effects[left]
			else
				string = "contrive "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "ringblade dance "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "ringblade terminate "..snd.target
		end
		
		if string:find("brutalise") or string:find("saw") or string:find("stifle") or string:find("twinraze") or string:find("terminate") then
			call = ""
		end

		string = "wipe ringblade"..snd.sep..call..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lumi$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Mentals</name>
									<script>if snd.class == "Executor" then
snd.current_offense = "SentMental"

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then
  local second_attack = ""
  
  snd.giving = {
  
  "impatience",
  "stupidity",
  "agoraphobia",
  "claustrophobia",
  "weariness",
  "clumsiness",
  "asthma",
  "slickness",
  "confusion",
  "left_leg_crippled",
  "right_leg_crippled",
  "anorexia",
  "heartflutter",
  "sight",
  "hearing",
  "sensitivity",
  }
  
  call = ""
	left = "none"
	right = "none"

	 left, right = Executor_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "inveigle"
		else
			second_attack = "beguile"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "ringblade twinraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "ringblade stifle "..snd.target
			
		elseif snd.ringblade_attacks[left] == "accost" or snd.ringblade_attacks[left] == "rimestalker" then
			left = snd.accost_accomplices[left]
			string = left..snd.target..snd.sep.."ringblade brandish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.ringblade_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.ringblade_attacks[left].." "..snd.ringblade_attacks[right]
				else
					string = snd.ringblade_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.ringblade_affs, right) then
				string = "contrive "..snd.ringblade_attacks[right].." "..snd.effects[left]
			else
				string = "contrive "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "ringblade dance "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "ringblade terminate "..snd.target
		end
		
		if string:find("brutalise") or string:find("saw") or string:find("stifle") or string:find("twinraze") or string:find("terminate") then
			call = ""
		end

		string = "wipe ringblade"..snd.sep..call..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ment$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Bleeding</name>
									<script>if snd.class == "Executor" then
snd.current_offense = "bleed"

snd.starting_attack()
function snd.attack_function()

		if not snd.waiting.queue then
		if snd.target_locked() then
			snd.giving = {
			"impairment",
			"confusion",
			"left_leg_crippled",
			"right_leg_crippled",
			"weariness",
			"dizziness",
      }
		else
			snd.giving = {
			"paresis",
		  "clumsiness",
			"haemophilia",
			"hearing",
			"sensitivity",
      "asthma",
      "weariness",
      "slickness",

      }
		end
    local second_attack = "wile"

  call = ""
	left = "none"
	right = "none"

	 left, right = Executor_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "inveigle"
		else
			second_attack = "beguile"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "ringblade twinraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "ringblade stifle "..snd.target
			
		elseif snd.ringblade_attacks[left] == "accost" or snd.ringblade_attacks[left] == "rimestalker" then
			left = snd.accost_accomplices[left]
			string = left..snd.target..snd.sep.."ringblade brandish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.ringblade_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.ringblade_attacks[left].." "..snd.ringblade_attacks[right]
				else
					string = snd.ringblade_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.ringblade_affs, right) then
				string = "contrive "..snd.ringblade_attacks[right].." "..snd.effects[left]
			else
				string = "contrive "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "ringblade dance "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "ringblade terminate "..snd.target
		end
		
		if string:find("brutalise") or string:find("saw") or string:find("stifle") or string:find("twinraze") or string:find("terminate") then
			call = ""
		end

		string = "wipe ringblade"..snd.sep..call..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bleed$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limbs / Salves</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Impale/Frozen</name>
									<script>if snd.class == "Executor" then -- Requires Raloth and Icewyrm
snd.current_offense = "SentImpale"


snd.starting_attack()
function snd.attack_function()
  local second_attack = ""
  snd.giving = {
    "frozen",
    "left_leg_crippled",
    "right_leg_crippled",
    "left_arm_crippled",
    "right_arm_crippled",
    "asthma",
    "slickness",
    "paresis",
    "confusion",
    "vomiting",
    "dizziness",
    "sight",
    "hearing",
    "sensitivity",
  }
	if not snd.waiting.queue then

	string = ""
	call = ""
	left = "none"
	right = "none"

	left, right = Executor_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "inveigle"
		else
			second_attack = "beguile"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "ringblade twinraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "ringblade stifle "..snd.target
			
		elseif snd.target_impaled then
			string = "ringblade saw "..snd.target
			
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("left_leg_crippled") and snd.limb_status["left leg"] == "healed" and (snd.parried_limb ~= "left leg" or snd.no_parry()) then
			string = "ringblade incise "..snd.target.." left"
		
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("right_leg_crippled") and snd.limb_status["right leg"] == "healed" and (snd.parried_limb ~= "right leg" or snd.no_parry()) then
			string = "ringblade incise "..snd.target.." right"

  	elseif snd.proned() then         
      if not snd.checkAff("writhe_impaled") then
      	string = "ringblade brutalise "..snd.target
       else
        string = "qdmount"..snd.sep.."qmount "..snd.my_raloth..snd.sep.."order "..snd.my_raloth.." rampage "..snd.target
      end	
			
		elseif snd.ringblade_attacks[left] == "accost" or snd.ringblade_attacks[left] == "rimestalker" then
			left = snd.accost_accomplices[left]
			string = left..snd.target..snd.sep.."ringblade brandish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.ringblade_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.ringblade_attacks[left].." "..snd.ringblade_attacks[right]
				else
					string = snd.ringblade_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.ringblade_affs, right) then
				string = "contrive "..snd.ringblade_attacks[right].." "..snd.effects[left]
			else
				string = "contrive "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "ringblade dance "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "ringblade terminate "..snd.target
		end
		
		if string:find("brutalise") or string:find("saw") or string:find("stifle") or string:find("twinraze") or string:find("terminate") then
			call = ""
		end

		string = "wipe ringblade"..snd.sep..call..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gimp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Salves</name>
									<script>if snd.class == "Executor" then -- Requires Raloth and Icewyrm
snd.current_offense = "SentSalve"

local second_attack = ""

snd.starting_attack()
function snd.attack_function()

	if not snd.waiting.queue then

    if snd.checkAff("destroyed_throat") then
    snd.giving = {
    "slickness",
    "asthma",
    "left_leg_crippled",
    "right_leg_crippled",
    "paresis",
    "confusion",
    "vomiting",
    "dizziness",
    "sight",
    "hearing",
    "sensitivity",
    }
    else
    snd.giving = {
    
    "frozen",
    "left_leg_crippled",
    "right_leg_crippled",
    "left_arm_crippled",
    "right_arm_crippled",
    "anorexia",
    "stupidity",
    "asthma",
    "slickness",
    "paresis",
    "confusion",
    "vomiting",
    "dizziness",
    "sight",
    "hearing",
    "sensitivity",
    }
    end	

	string = ""
	call = ""
	left = "none"
	right = "none"

	 left, right = Executor_Attack_Choice(snd.giving, left, right) -- we send our aff list to a function to get our attacks.

		if left  == "none" then left  = "epseth" end
		if right == "none" then right = "epseth" end
	
		if snd.no_parry() then 
			second_attack = "inveigle"
		else
			second_attack = "beguile"
		end

		if snd.used.rebounding and snd.used.shield then
			string = "ringblade twinraze "..snd.target
			
		elseif left == "destroyed_throat" then
			string = "ringblade stifle "..snd.target
			
		elseif snd.target_impaled then
			string = "ringblade saw "..snd.target
			
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("left_leg_crippled") and snd.limb_status["left leg"] == "healed" and (snd.parried_limb ~= "left leg" or snd.no_parry()) then
			string = "ringblade incise "..snd.target.." left"
		
		elseif not snd.used.rebounding and not snd.used.shield and snd.checkAff("right_leg_crippled") and snd.limb_status["right leg"] == "healed" and (snd.parried_limb ~= "right leg" or snd.no_parry()) then
			string = "ringblade incise "..snd.target.." right"

  	elseif snd.proned() then         
      if not snd.checkAff("writhe_impaled") then
      	string = "ringblade brutalise "..snd.target
       else
        string = "qdmount"..snd.sep.."qmount "..snd.my_raloth..snd.sep.."order "..snd.my_raloth.." rampage "..snd.target
      end	
			
		elseif snd.ringblade_attacks[left] == "accost" or snd.ringblade_attacks[left] == "rimestalker" then
			left = snd.accost_accomplices[left]
			string = left..snd.target..snd.sep.."ringblade brandish "..snd.target.." "..snd.effects[right]
			
		else
			if table.contains(snd.ringblade_affs, left) then
				if not table.contains(snd.effects, right) then
					string = snd.ringblade_attacks[left].." "..snd.ringblade_attacks[right]
				else
					string = snd.ringblade_attacks[left].." "..second_attack.." "..snd.effects[right]
				end
			elseif table.contains(snd.ringblade_affs, right) then
				string = "contrive "..snd.ringblade_attacks[right].." "..snd.effects[left]
			else
				string = "contrive "..second_attack.." "..snd.effects[left].." "..snd.effects[right]
			end
			
			string = "ringblade dance "..snd.target.." "..string
		end
		
		if snd.toggles.affcalling and not snd.target_gone then
			if table.contains(snd.effects, left) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[left]
				if table.contains(snd.effects, right) then 
					call = call..", "..snd.effects[right]
				end
				call = call..snd.sep
			elseif table.contains(snd.effects, right) then 
				call = "wt Afflicting "..snd.target..": "..snd.effects[right]..snd.sep
			end
		end

		if snd.checksomeAffs({"confusion", "left_leg_crippled", "right_leg_crippled", "fallen", "heartflutter"}, 5) then
			string = "ringblade terminate "..snd.target
		end
		
		if string:find("brutalise") or string:find("saw") or string:find("stifle") or string:find("twinraze") or string:find("terminate") then
			call = ""
		end

		string = "wipe ringblade"..snd.sep..call..string
    
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end

	snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^salve$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Indorani</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Indorani" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
  if snd.used.shield then
		string = "touch hammer "..snd.target
  else
   	string = "decay "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Affliction</name>
									<script>if snd.class == "Indorani" then

  snd.giving = {
  "asthma",
  "aeon",
  "perplexed",
  "impatience",
  "clumsiness",
  "weariness",
  "stupidity",
  "anorexia",
  "epilepsy",
  "sensitivity",
  "vomiting",
  "lethargy",
  "confusion",
  "recklessness",	
  "superstition",
  "hypersomnia",
}
  
  snd.starting_attack()
  
  function snd.attack_function() 
   local string = ""
   local raw_affs_to_fling = {}
   local cards = {one = {affliction = "", card = ""}, two = {affliction = "", card = ""}}
   
   if not snd.waiting.queue then -- all instakill conditions(deform/vivi) or other add ons should go here as elseif.
   
    if snd.used.shield then
  		string = "touch hammer "..snd.target
    -- vivi/deform checks would prolly go here
    
    elseif snd.aff_count_all() &gt; 10 then
      string = "deform "..snd.target
      
    else -- No special attacks, time to run through our aff list defined above and see what we want to give most.
  		for i in pairs(snd.giving) do
  			if not snd.checkAff(snd.giving[i]) then
          if snd.giving[i] == "aeon" then
            if snd.balance.aeon then
              table.insert(raw_affs_to_fling, snd.giving[i])
            end
  				elseif not table.contains(raw_affs_to_fling, snd.giving[i]) then
  					table.insert(raw_affs_to_fling, snd.giving[i]) -- insert into a raw aff list that they don't have, based on priority chosen above
  				end
  			end
  		end
     
      for k, v in ipairs(raw_affs_to_fling) do -- run through the raw affs
        if cards.one.affliction == "" then -- fill in card one, could start with card two if you want to work around dodge CD
          if snd.cardshapes.indorani[v].card == "adder" then
            if not snd.adder_attached then-- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.indorani[v].card
            end
          else
            cards.one.affliction = v
            cards.one.card = snd.cardshapes.indorani[v].card
          end
        elseif cards.one.card ~= snd.cardshapes.indorani[v].card and cards.two.affliction == "" then -- if card types are different and haven't already set card two
          if snd.cardshapes.indorani[v].card == "adder" then
            if not snd.adder_attached then -- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.indorani[v].card
            end
          else
            cards.two.affliction = v
            cards.two.card = snd.cardshapes.indorani[v].card
          end
        end
      end

      -- If the card is an adder venom affliction, convert the affliction to the venom.
      if cards.one.card == "adder" then cards.one.affliction = snd.effects[cards.one.affliction] end
      if cards.two.card == "adder" then cards.two.affliction = snd.effects[cards.two.affliction] end
      
      if snd.need_leech_aura then
  	    string = "leech "..snd.target
      end
      
      if snd.adder_ready then
        string = string..snd.sep.."activate adder "..snd.target
      end
      
      -- Syntax should be the same unless you have arti deck/regular deck, change next line as necessary
  		string = string..snd.sep.."outc blank as "..cards.one.card..snd.sep.."outc blank as "..cards.two.card..snd.sep.."fling "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
  
  	end
    
    	if snd.toggles.affcalling and not snd.target_gone then
    	 call = "wt [Indorani] Afflicting "..snd.target..": "..cards.one.affliction..", "..cards.two.affliction..snd.sep
       string = call..string
    	end
  
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Indorani" then

  snd.giving = {"left_leg_crippled", "right_leg_crippled","left_arm_crippled", "right_arm_crippled",}
  
  snd.starting_attack()
  
  function snd.attack_function()
    local string = ""
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer "..snd.target
      elseif snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled", "leeched_aura"}, 5) then
        string = "vivsect "..snd.target
      elseif not snd.checksomeAffs(snd.giving, 4) then
        for v in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[v])  then
            string = "shrivel "..snd.target.." "..snd.giving[v]:gsub("_", " "):gsub("crippled", "")
            break
          end
        end
      else
        string = "decay "..snd.target
      end
      
      if snd.need_leech_aura then
        string = "leech "..snd.target..snd.sep..string
      end 

      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
  
    end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Indorani Group Affs</name>
									<script>if snd.class == "Indorani" then

  snd.giving = {
  "asthma",
  "aeon",
  "perplexed",
  "impatience",
  "clumsiness",
  "weariness",
  "stupidity",
  "anorexia",
  "epilepsy",
  "sensitivity",
  "vomiting",
  "lethargy",
  "confusion",
  "recklessness",	
}
  
  snd.starting_attack()
  
  function snd.attack_function()

    local command = ""
    local call = ""
    local touse = {}
    local cstring = ""
    local slstring = ""
    local lstring = ""
    local astring = ""
    local tohit = {}
    local missing = snd.missingAff("stupidity/paresis/anorexia/asthma", "/")  
    local string = ""
    local raw_affs_to_fling = {}
    local cards = {one = {affliction = "", card = ""}, two = {affliction = "", card = ""}}
   
 cecho("&lt;yellow&gt; Affs: "..#snd.target_has)
  
   if not snd.waiting.queue then -- all instakill conditions(deform/vivi) or other add ons should go here as elseif.
   
    if snd.used.shield then
  		string = "touch hammer "..snd.target
    -- vivi/deform checks would prolly go here
      	  
    elseif snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled", "left_arm_crippled", "right_arm_crippled"}, 4) and snd.checkAff("leeched_aura") then 
        string = "vivisect "..snd.target..snd.sep  
	
	elseif not snd.need_leech_aura and snd.deform and snd.aff_count_all() &gt;= 10 then
        string = string..snd.sep.."deform "..snd.target..snd.sep
      
    elseif not snd.deform and snd.checksomeAffs({"paresis", "stupidity", "fallen", "dizziness"}, 2) then
        string = "decay " ..snd.target..snd.sep
      
  	else -- No special attacks, time to run through our aff list defined above and see what we want to give most.
  		for i in pairs(snd.giving) do
  			if not snd.checkAff(snd.giving[i]) then
          if i == "aeon" then
            if snd.balance.aeon then
              table.insert(raw_affs_to_fling, snd.giving[i])
            end
  				elseif not table.contains(raw_affs_to_fling, snd.giving[i]) then
  					table.insert(raw_affs_to_fling, snd.giving[i]) -- insert into a raw aff list that they don't have, based on priority chosen above
  				end
  			end
  		end
     
      for k, v in ipairs(raw_affs_to_fling) do -- run through the raw affs
        if cards.one.affliction == "" then -- fill in card one, could start with card two if you want to work around dodge CD
          if snd.cardshapes.indorani[v].card == "adder" then
            if not snd.adder_attached then-- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.indorani[v].card
            end
          else
            cards.one.affliction = v
            cards.one.card = snd.cardshapes.indorani[v].card
          end
        elseif cards.one.card ~= snd.cardshapes.indorani[v].card and cards.two.affliction == "" then -- if card types are different and haven't already set card two
          if snd.cardshapes.indorani[v].card == "adder" then
            if not snd.adder_attached then -- Make sure that if we're picking an adder venom, we haven't already thrown adder
              cards.one.affliction = v
              cards.one.card = snd.cardshapes.indorani[v].card
            end
          else
            cards.two.affliction = v
            cards.two.card = snd.cardshapes.indorani[v].card
          end
        end
      end

      -- If the card is an adder venom affliction, convert the affliction to the venom.
      if cards.one.card == "adder" then cards.one.affliction = snd.effects[cards.one.affliction] end
      if cards.two.card == "adder" then cards.two.affliction = snd.effects[cards.two.affliction] end
      
      if snd.need_leech_aura then
  	    string = "leech "..snd.target
      end
	  
      if snd.adder_ready then
        string = string..snd.sep.."activate adder "..snd.target
      end
   

      if snd.balance.envelop == true and snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled", "left_arm_crippled", "right_arm_crippled", "anorexia", "indifference"}, 2) then
        slstring = string.."order slime envelop "..snd.target..snd.sep
	  end
      
      if snd.balance.chimera == true then cstring = string.."order hound kill "..snd.target..snd.sep.."order chimera headbutt "..snd.target..snd.sep

      elseif snd.balance.chimera == false and snd.deformed == true then cstring = string.."order hound kill " ..snd.target..snd.sep

      elseif snd.balance.chimera == true and snd.deformed == false then cstring = string.."order chimera roar " ..snd.target..snd.sep
	  
	  end

      -- Syntax should be the same unless you have arti deck/regular deck, change next line as necessary
--  		string = string..snd.sep.."outc blank as "..cards.one.card..snd.sep.."outc blank as "..cards.two.card..snd.sep.."fling "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
      string = slstring..cstring..string..snd.sep.."outc blank as "..cards.one.card..snd.sep.."outc blank as "..cards.two.card..snd.sep.."fling "..cards.one.card.." "..cards.one.affliction.." and "..cards.two.card.." "..cards.two.affliction.." at "..snd.target
      
      call = "wt [Indorani] Afflicting "..snd.target..": "..cards.one.affliction..", "..cards.two.affliction
  
  	end
  
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Praenomen</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
   	string = "frenzy "..snd.target
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Mes feast</name>
									<script>if snd.class == "Praenomen" then
snd.giving_whisper = {
			"impatience",
			"lovers",
			"berserking",
			"stupidity",
			"confusion",
			"recklessness",
			"masochism",
			"anorexia",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"paranoia",
	}
	snd.akkari_lovers(snd.giving_whisper)
snd.starting_attack()
function snd.attack_function()
  local string = ""
  local corpus = "none"
  local touse = {}
  if not table.contains(snd.target_has, "writhe_transfix") then
 		string = "mesmerize "..snd.target
	elseif not table.contains(snd.target_has, "feast") then
		string = "blood feast "..snd.target
	else
    for i in pairs(snd.giving_whisper) do
      if not snd.checkAff(snd.giving_whisper[i]) then
        if not table.contains(touse, snd.giving_whisper[i]) then
      	  table.insert(touse, snd.giving_whisper[i])
        end
      end
    end
  
		string = "feed "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
	end
	
  string = "contemplate "..snd.target..snd.sep..string
 
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^feast$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Praenomen Group Dmg</name>
									<script>if snd.class == "Praenomen" then
    snd.giving_whisper = {
        "lovers",
        "impatience",
        "stupidity",
        "recklessness",
        "epilepsy",
        "anorexia",
        "confusion",
        "dementia",
        "berserking",
        "masochism",
        "peace",
        "vertigo",
        "indifference",
        "agoraphobia",
    }
	snd.akkari_lovers(snd.giving_whisper)

    snd.starting_attack()

    function snd.attack_function()

        local string = ""
        local corpus = "none"
        local touse = {}
        local call = ""

        if snd.mana_percent &lt; 35 and not snd.used.shield then --Checking if we could annihilate the last time we contemplated, and trying if we can. Need to add logic to announce mana calls
            string = "annihilate "..snd.target
        else
            for i in pairs(snd.giving_whisper) do
                if not snd.checkAff(snd.giving_whisper[i]) then
                    if not table.contains(touse, snd.giving_whisper[i]) then
                    table.insert(touse, snd.giving_whisper[i])
                    end
                end
            end
        
            string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
        end

    string = "contemplate "..snd.target..snd.sep.."order loyals attack "..snd.target..snd.sep..string --Contemplate target and order loyal to attack it before attacking
    call = "wt Afflicting "..touse[1].." "..touse[2]

    if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
    end

    snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^gdmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Afflictions</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 local touse = {}
 snd.giving_whisper = {
			"impatience",
			"lovers",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",

	}
  	snd.akkari_lovers(snd.giving_whisper)

			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end
			
	if not snd.waiting.queue then
		string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
	end
	
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Annhilate and Mesmerize</name>
									<script>if snd.class == "Praenomen" then
snd.giving_whisper = {
			"impatience",
			"lovers",
			"stupidity",
			"anorexia",
			"confusion",
			"recklessness",
			"agoraphobia",
			"vertigo",
			"indifference",
			"peace",
			"masochism",
			"paranoia",
	}
	snd.akkari_lovers(snd.giving_whisper)

snd.starting_attack()
function snd.attack_function()
  local string = ""
  local corpus = "none"
  local touse = {}
  if snd.mana_percent &lt; 35 and not snd.used.shield then
 		string = "annihilate "..snd.target
  elseif snd.proned() then
 		string = "siphon "..snd.target
  elseif table.contains(snd.target_has, "sight") then
 		string = "mesmerize "..snd.target
	else
    for i in pairs(snd.giving_whisper) do
      if not snd.checkAff(snd.giving_whisper[i]) then
        if not table.contains(touse, snd.giving_whisper[i]) then
      	  table.insert(touse, snd.giving_whisper[i])
        end
      end
    end
  
		string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
	end

  string = "contemplate "..snd.target..snd.sep..string
 
 if string ~= snd.last_attack and not snd.waiting.queue then
  snd.last_attack = string
  snd.attack(snd.last_attack)
  snd.waiting.queue = true
  tempTimer(snd.delay(), [[snd.waiting.queue = false]])
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^mez$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Praenomen Group Affs</name>
									<script>if snd.class == "Praenomen" then
snd.starting_attack()

function snd.attack_function()
 local string = ""
 local touse = {}
 local gashaff = {}
 local call = ""
 
 snd.giving_whisper = {
 		"lovers",
		"impatience",
 		"recklessness",
		"stupidity", 
 		"masochism",
		"agoraphobia",
 		"confusion",
		"epilepsy",
 		"anorexia",
		"berserking",
 		"vertigo",
 		"dementia",
 		"peace",
		"paranoia",
 		"indifference",

		}
		
snd.scythe_gash = {
		"paralysis",
		"asthma",
		"slickness",
		"anorexia",
		"clumsiness",
		"dizziness",
		"stupidity",
		"weariness",
		
	    }
			snd.akkari_lovers(snd.giving_whisper)


			for i in pairs(snd.giving_whisper) do
				if not snd.checkAff(snd.giving_whisper[i]) then
					if not table.contains(touse, snd.giving_whisper[i]) then
						table.insert(touse, snd.giving_whisper[i])
					end
				end
			end

			for i in pairs(snd.scythe_gash) do
				if not snd.checkAff(snd.scythe_gash[i]) then
					if not table.contains(gashaff, snd.scythe_gash[i]) then
						table.insert(gashaff, snd.scythe_gash[i])
					end
				end
			end

        if snd.mana_percent &lt; 35 and not snd.used.shield then 
            string = "annihilate "..snd.target
        else
		       if snd.used.shield or snd.used.rebounding then
              string = "frenzy "..snd.target..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target
              call = "Afflicting "..snd.target..": "..touse[1]..snd.sep..", "..touse[2]		   
           else
			        string = "wipe weapon "..snd.sep.."gash "..snd.target.." "..gashaff[1].." lightly"..snd.sep.."whisper "..touse[1].." "..touse[2].." "..snd.target..snd.sep
			        call = "Afflicting "..snd.target..": " ..gashaff[1]..". Whispering: "..touse[1]..", "..touse[2]
			     end
        end

	if snd.toggles.affcalling and not snd.target_gone and (call ~= nil or call ~= "") then
		string = call..snd.sep.."contemplate "..snd.target..snd.sep.."order loyals attack "..snd.target..snd.sep..string
	end

    if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end
    snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Ravager</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Immolation support</name>
									<script>if snd.class == "Ravager" then
  snd.starting_attack()

  function snd.attack_function()
    -- This checks for a present Firefist defense. This is used later during a Firefist check.
    local firefist = false
    if snd.defenses.def_ravage.state == "deffed" then
      firefist = true
    end
    -- This checks for a present Zenith defense. It is used later in Zenith/Flow Handling.
    local zenith = false
    if snd.defenses.def_delirium.state == "deffed" then
      zenith = true
    end
    -- This is a failsafe to take crispy off of a target that has cured ablaze.
    if snd.checkAff("crispy") then
      if not snd.checkaff("ablaze") then
        snd.target_cured("crispy")
      end
    end
    -- This uses crispy to check if they're at the right flame level.
    local immolation_ready = false
    if snd.checkAff("ablaze") then
      if snd.checkAff("crispy") then
        immolation_ready = true
      end
    end
    -- In this mode, we're going to only rely on Purification. It's built to support a quick Immolate.
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer " .. snd.target
        -- OK, so if immolation is ready... we should cast it!	
      elseif immolation_ready then
        string = "invoke extinguish " .. snd.target
        -- OK, so if immolation isn't ready, what next? Heatspear!
      elseif not snd.checkAff("heatspear") and snd.checkAff("ablaze") then
        string = "invoke lance " .. snd.target
      else
        string = "invoke torment " .. snd.target
      end

      if zenith then
        if snd.used.shield then
          string = "touch hammer " .. snd.target
        elseif snd.parried_limb ~= "torso" then
          string = "onslaught " .. snd.target .. " plexus plexus" .. snd.sep .. string
        elseif snd.parried_limb ~= "left arm" then
          string = "onslaught " .. snd.target .. " bully left bully left" .. snd.sep .. string
        else
          string = "onslaught " .. snd.target .. " bully right bully right" .. snd.sep .. string
        end
      end
	
      if gmcp.Char.Vitals.ability_bal == "1" then
        string = "assail " .. snd.target .. " tenderise " .. snd.sep .. string
      end
    end

    if not firefist then
      if snd.checksomeAffs({"ablaze", "heatspear"}, 2) then
        if zenith then
          string = "invoke ravage"
        else
          string = "invoke delirium" .. snd.sep .. string
        end
      end
    end

    if immolation_ready then
      string = "invoke extinguish " .. snd.target
    end
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fire$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Bleed/Damage</name>
									<script>if snd.class == "Ravager" then
  snd.starting_attack()

  function snd.attack_function()
    local firefist = false
    if snd.defenses.def_ravage.state == "deffed" then
      firefist = true
    end
    local zenith = false
    if snd.defenses.def_delirium.state == "deffed" then
      zenith = true
    end
    if snd.checkAff("crispy") then
      if not snd.checkaff("ablaze") then
        snd.target_cured("crispy")
      end
    end
    local immolation_ready = false
    if snd.checkAff("ablaze") then
      if snd.checkAff("crispy") then
        immolation_ready = true
      end
    end
    
    if not snd.waiting.queue then
      if snd.used.shield then
        string = "touch hammer " .. snd.target
      elseif snd.parried_limb ~= "torso" then
        string = "onslaught " .. snd.target .. " plexus plexus"
      elseif snd.parried_limb ~= "head" then
        if not snd.checkAff("crippled_throat") then
          string = "onslaught " .. snd.target .. " windpipe overpower head"
        else
          string = "onslaught " .. snd.target .. " concussion overpower head"
        end
      elseif snd.parried_limb ~= "left leg" and snd.parried_limb ~= "right leg" then
        string = "onslaught " .. snd.target .. " kneecap left kneecap right"
      elseif snd.parried_limb ~= "left leg" and snd.parried_limb == "right leg" then
        string = "onslaught " .. snd.target .. " kneecap left kneecap left"
      elseif snd.parried_limb ~= "right leg" and snd.parried_limb == "left leg" then
        string = "onslaught " .. snd.target .. " kneecap right kneecap right"
      else
        if snd.parried_limb ~= "left arm" then
          string = "onslaught " .. snd.target .. " bully left bully left"
        end
      end
      
      
      if gmcp.Char.Vitals.ability_bal == "1" then
        if snd.parried_limb ~= "head" and not snd.checkAff("stuttering") then
          string = "assail " .. snd.target .. " slug " .. snd.sep .. string
        else
          string = "assail " .. snd.target .. " butcher " .. snd.sep .. string
        end
      end
      
      
      if zenith then
        if not snd.checkAff("heatspear") and snd.checkAff("ablaze") then
          string = string .. snd.sep .. "invoke lance " .. snd.target
        elseif snd.checkAff("ablaze") then
          string = string .. snd.sep .. "invoke intensify " .. snd.target
        else
          string = string .. snd.sep .. "invoke torment " .. snd.target
        end
      end
      
      if not firefist then
        if snd.checksomeAffs({"ablaze", "heatspear"}, 2) then
          if zenith then
            string = "invoke ravage"
          else
            string = "invoke delirium" .. snd.sep .. string
          end
        end
      end
    
      if immolation_ready then
        string = "invoke extinguish " .. snd.target
      end
      
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Revenant</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Wielding</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>wield bashing</name>
									<script>if snd.class == "Revenant" then
snd.send("quickwield both longsword shield")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wbsh$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield zeal</name>
									<script>if snd.class == "Revenant" then
snd.send("quickwield both warhammer")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wzl$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield pvp</name>
									<script>if snd.class == "Revenant" then
snd.send("quickwield both shortsword shortsword.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wpvp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield limbs</name>
									<script>if snd.class == "Revenant" then
snd.send("quickwield both mace mace.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wlb$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield longswords</name>
									<script>if snd.class == "Revenant" then
snd.send("quickwield both longsword longsword.2")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wls$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>wield damage</name>
									<script>if snd.class == "Revenant" then
snd.send("quickwield both bastard")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^wdmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Righteousness</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>deliver</name>
									<script>if snd.class == "Revenant" then
snd.send("qeb get monolith"..snd.sep.."phantasm retrieve "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^del (.*)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>resurrection</name>
									<script>if snd.class == "Revenant" then
if snd.toggles.attacking then snd.toggle("attacking") end
snd.send("qeb phantasm reanimate "..matches[2])
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^rez (\w+)$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>pilgrimage</name>
									<script>if snd.class == "Revenant" then
  if snd.toggles.attacking then snd.toggle("attacking") end
  if snd.toggles.bashing then snd.toggle("bashing") end
  if snd.toggles.fasthunt then snd.toggle("fasthunt") end
  if snd.have_aff("paresis") then
   snd.send("firstaid elevate paresis")
  end
  snd.send("undefend")
  snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."phantasm sidestep")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^pilg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>latency</name>
									<script>if snd.class == "Revenant" then
  if snd.toggles.attacking then snd.toggle("attacking") end
  if snd.toggles.bashing then snd.toggle("bashing") end
  if snd.toggles.fasthunt then snd.toggle("fasthunt") end
  if snd.have_aff("paresis") then
   snd.send("firstaid elevate paresis")
  end
  snd.send("undefend")
  snd.send("qeb get monolith"..snd.sep.."get monolith"..snd.sep.."phantasm sidestep")
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^pil$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>retribution stack</name>
									<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "sacrifice"
		-- let's determine how many affs we are away from locking
		local missing = snd.missingAff("stupidity/paresis/anorexia/asthma/slickness", "/")
		local vorpal = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			vorpal = true -- yesssssss
		end
		-- we're going to use a different affliction stack if the target is locked
		if snd.target_locked() then
			snd.giving = {
			"left_leg_crippled",
			"right_leg_crippled",
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			"sensitivity",
			"clumsiness",
			"weariness",
			}
		else
		-- and this one if they're not
			snd.giving = {
			"conviction",
			"asthma",
			"clumsiness",
			"paresis",
			"slickness",
			"stupidity",
			"anorexia",
			"crippled",
			"mental_disruption",
			"physical_disruption",
			"crippled_body",
			--deathblow!
			"weariness",
			"haemophilia",
			"allergies",
			"sensitivity",
			"vomiting",
			"recklessness",
			"dizziness"
			}
		end
		-- first and foremost, check if we can retri!
		if snd.checksomeAffs({"paralysis", "crippled_body", "mental_disruption","physical_disruption" },4) then
			string = "cull "..snd.target
		else -- if not...
			-- see if we can lock this round, in any of three possible ways
			if vorpal and #missing == 3 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 2 and not snd.used.shield and not snd.used.rebounding then
				touse = missing
			elseif #missing == 1 and not snd.used.shield then
				touse = missing
			end
			-- any aff we're not using to lock, we'll pick from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield and snd.used.rebounding then
				string = "deceive "..snd.target.." wasi"
      elseif snd.used.shield or snd.used.rebounding then
				string = "deceive "..snd.target.." "..snd.rev_empower(tohit[1])
				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
			elseif vorpal and not snd.target_locked() and #missing &gt; 2 then
				string = "blade scribe right atdum "..snd.target.." "..snd.rev_empower(tohit[1])..snd.sep.."dpl "..snd.target.." "..snd.rev_empower(tohit[3]).." "..snd.rev_empower(tohit[2])
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "dpl "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ret$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>legs</name>
									<script>if snd.class == "Revenant" then
  snd.starting_attack()
  function snd.attack_function()
  	if not snd.waiting.queue then
  		local string = "" -- we'll load this with our attack string
  		local call = "" -- and this with our affliction call
  		-- next, the afflictions we want to give
  		local touse = {}
  		local tohit = {}
  		-- and in case we don't find enough of them
  		local extraaff = "hemorrhage" 
  		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 100 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 100 then
  			telvi = true
  		end
  		-- set the affs we want to use
  			snd.giving = {
  			"left_arm_crippled",
  			"right_arm_crippled",    
  			"left_leg_crippled",
  			"right_leg_crippled",
        "stupidity",
  			"anorexia",
  			"slickness",
  			"asthma",
  			"paresis",
        "clumsiness",
        "weariness",
  			}
  			
  		-- pick affs from the list above
  		for i in pairs(snd.giving) do
  			-- make sure not to double up paresis and paralysis
  			if not snd.checkAff(snd.giving[i]) then
  				-- and don't add an aff we've already got in the list!
  				if not table.contains(touse, snd.giving[i]) then
  					table.insert(touse, snd.giving[i])
  				end
  			end
  		end
  			
  		-- first and foremost, check if we can retri!
  		if snd.target_impaled then
  			string = "extirpate "..snd.target
  		elseif snd.proned() and not snd.checkAff("writhe_impaled") then 
  			string = "lurk "..snd.target..snd.sep.."transpierce "..snd.target
  		else 
  			-- now let's convert affs to venoms/empowerments
  			for aff in pairs(touse) do
  				table.insert(tohit, snd.effects[touse[aff]])
  			end
  			-- if we didn't find enough stuff to hit with, stick in our filler
  			while #tohit &lt; 3 do
  				table.insert(tohit, extraaff)
  			end
  			-- now to decide what attack to use!
  			if snd.used.shield and snd.used.rebounding then
  				string = "deceive "..snd.target.." wasi"
        elseif snd.used.shield or snd.used.rebounding then
  				string = "deceive "..snd.target.." "..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
  			elseif telvi then
  				string = "blade scribe right telvi "..snd.target..snd.sep.."blade scribe left telvi "..snd.target..snd.sep.."dpl "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
  			else
  				string = "dpl "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
  			end
  		end
  		-- prepend our affliction call, if we need one
  		if snd.toggles.affcalling and not snd.target_gone then
  			string = call..string
  		end
  		-- handle anti-spam and the actual attacking now
  		if string ~= snd.last_attack and not snd.waiting.queue then
  			snd.last_attack = string
  			snd.attack(snd.last_attack)
  			snd.waiting.queue = true
  			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  		end
  	end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lgs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>impale mode</name>
									<script>
if snd.class == "Revenant" then
  snd.starting_attack()
  function snd.attack_function()
  	if not snd.waiting.queue then
  		local string = "" -- we'll load this with our attack string
  		local call = "" -- and this with our affliction call
  		local physcount = 0
  		for aff in pairs(snd.physical_affs) do
  			if table.contains(snd.target_has, snd.physical_affs[aff]) then
  				physcount = physcount + 1
  			end
  		end
  		-- next, the afflictions we want to give
  		local touse = {}
  		local tohit = {}
  		-- and in case we don't find enough of them
  		local extraaff = "duskosa"
  		local atdum = false -- can we use atdum?
  		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
  			atdum = true -- yesssssss
  		end
  		-- set the affs we want to use
  			snd.giving = {
        "paresis",
        "clumsiness",
        "asthma",
        "sensitivity",
        "vomiting",
        "allergies",
        "haemophilia",
        "slickness",
        "left_leg_crippled",
  			"right_leg_crippled",
        "anorexia",
        "stupidity",
        --"recklessness",
        --"weariness",
        --"dizziness",
        --"voyria",
        }
  		-- first and foremost, check if we can disembowel!
  		if snd.target_impaled then
  			string = "extirpate "..snd.target
  		-- otherwise, see if we can impale
  		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and physcount &gt;= 4 and atdum then
  			string = "blade scribe left lawid "..snd.target..snd.sep.."blade scribe right lawid "..snd.target..snd.sep.."lurk "..snd.target..snd.sep.."transpierce "..snd.target
  		else -- if not...
  			-- pick affs from the list above
  			for i in pairs(snd.giving) do
  				-- make sure not to double up paresis and paralysis
  				if not snd.checkAff(snd.giving[i]) then
  					-- and don't add an aff we've already got in the list!
  					if not table.contains(touse, snd.giving[i]) then
  						table.insert(touse, snd.giving[i])
  					end
  				end
  			end
  			-- now let's convert affs to venoms/empowerments
  			for aff in pairs(touse) do
  				table.insert(tohit, snd.effects[touse[aff]])
  			end
  			-- if we didn't find enough stuff to hit with, stick in our filler
  			while #tohit &lt; 3 do
  				table.insert(tohit, extraaff)
  			end
  			-- now to decide what attack to use!
  			if snd.used.shield and snd.used.rebounding then
  				string = "deceive "..snd.target.." wasi"
        elseif snd.used.shield or snd.used.rebounding then
  				string = "deceive "..snd.target.." "..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
  			elseif atdum then -- vorpal equiv
  				string = "blade scribe right atdum "..snd.target.." "..snd.rev_empower(tohit[1])..snd.sep.."dpl "..snd.target.." "..snd.rev_empower(tohit[3]).." "..snd.rev_empower(tohit[2])
  				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
  			else
  				string = "dpl "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
  			end
  		end
  		-- prepend our affliction call, if we need one
  		if snd.toggles.affcalling and not snd.target_gone then
  			string = call..string
  		end
  		-- handle anti-spam and the actual attacking now
  		if string ~= snd.last_attack and not snd.waiting.queue then
  			snd.last_attack = string
  			snd.attack(snd.last_attack)
  			snd.waiting.queue = true
  			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  		end
  	end
  end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^im$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>newbie mode</name>
									<script>if snd.class == "Revenant" then
  snd.starting_attack()
  function snd.attack_function()
  	if not snd.waiting.queue then
  		local string = "" -- we'll load this with our attack string
  		local call = "" -- and this with our affliction call
  		-- next, the afflictions we want to give
  		local touse = {}
  		local tohit = {}
  		-- and in case we don't find enough of them
  		local extraaff = "duskosa" -- sacrifice
  		-- set the affs we want to use
  			snd.giving = {
        "oculus",
        "paresis",
        "clumsiness",
        "asthma",
        "sensitivity",
        "vomiting",
        "allergies",
        "haemophilia",
        "slickness",
        "anorexia",
        "stupidity",
        "recklessness",
        "weariness",
        "dizziness",
        "voyria",
        }
  		-- first and foremost, check if we can disembowel!
  		if snd.target_impaled then
  			string = "extirpate "..snd.target
  		-- otherwise, see if we can impale
  		elseif not snd.checkAff("writhe_impaled") and snd.proned() and not snd.checksomeAffs({"writhe_thighlock", "writhe_necklock", "writhe_armpitlock"}, 1) then
  			string = "transpierce "..snd.target
  		else -- if not...
  			-- pick affs from the list above
  			for i in pairs(snd.giving) do
  				-- make sure not to double up paresis and paralysis
  				if not snd.checkAff(snd.giving[i]) then
  					-- and don't add an aff we've already got in the list!
  					if not table.contains(touse, snd.giving[i]) then
  						table.insert(touse, snd.giving[i])
  					end
  				end
  			end
  			-- now let's convert affs to venoms/empowerments
  			for aff in pairs(touse) do
  				table.insert(tohit, snd.effects[touse[aff]])
  			end
  			-- if we didn't find enough stuff to hit with, stick in our filler
  			while #tohit &lt; 3 do
  				table.insert(tohit, extraaff)
  			end
  			-- now to decide what attack to use!
  			if snd.used.shield and snd.used.rebounding then
  				string = "deceive "..snd.target.." wasi"
        elseif snd.used.shield or snd.used.rebounding then
  				string = "deceive "..snd.target.." "..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[1]..snd.sep
  			else
  				string = "dpl "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
  				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
  			end
  		end
  		-- prepend our affliction call, if we need one
  		if snd.toggles.affcalling and not snd.target_gone then
  			string = call..string
  		end
  		-- handle anti-spam and the actual attacking now
  		if string ~= snd.last_attack and not snd.waiting.queue then
  			snd.last_attack = string
  			snd.attack(snd.last_attack)
  			snd.waiting.queue = true
  			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  		end
  	end
  end
  snd.attack_function()
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^newb$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>damage</name>
									<script>if snd.class == "Revenant" then
  snd.starting_attack()
  function snd.attack_function()
  	if not snd.waiting.queue then
  		local string = ""
  		if snd.used.rebounding or snd.used.shield then
  			string = "raze "..snd.target
  		elseif tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 then
  			string = "blade scribe left lawid "..snd.target
      end
  			string = string..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."harrow "..snd.target
  		if string ~= snd.last_attack and not snd.waiting.queue then
  			snd.last_attack = string
  			snd.attack(snd.last_attack)
  			snd.waiting.queue = true
  			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  		end
  	end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>iceblast</name>
									<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  if snd.used.rebounding and snd.used.shield then
--   snd.send("deceive "..snd.target.." wasi")
   string = "raze "..snd.target
  elseif snd.used.rebounding or snd.used.shield then
   string = "deceive "..snd.target.." duskosa"
  else
   string = "blade scribe left telvi "..snd.target..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."actuate left with duskosa"..snd.sep.."harrow "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
--snd.send("engage "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^ib$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Bleed/Hemm</name>
									<script>if snd.class == "Revenant" then
  snd.starting_attack()

  function snd.attack_function()
    local string = ""-- we'll load this with our attack string
    local call = ""  -- and this with our affliction call
    
                     -- next, the afflictions we want to give
    local touse = {}
    local tohit = {}
    local extraaff = "wilave" -- and in case we don't find enough of them
    
    local left_crescent = ""
    if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 85 then left_crescent = "blade scribe left lawid "..snd.target end
    
    local right_crescent = "" 
    if tonumber(gmcp.Char.Vitals.charge_right) &gt;= 85 then right_crescent = "blade scribe right lawid "..snd.target end

    
    if not snd.waiting.queue then
      
      snd.giving = {   -- set the affs we want to use
      "hearing", 
      --"haemophilia", 
      "clumsiness",
      "sensitivity"}
       
      -- We really only care about the sensitivity/haemophilia
      -- If they have both, go straight into damage
      if snd.checksomeAffs({"haemophilia", "sensitivity"}, 2) then
        table.insert(touse, "wilave")
        table.insert(touse, "wilave")
        
      else
        -- If that condition isn't met, pick affs from the list above
        for i in pairs(snd.giving) do
          if not snd.checkAff(snd.giving[i]) then
            -- Don't add an aff we've already got in the list!
            if not table.contains(touse, snd.giving[i]) then
              table.insert(touse, snd.giving[i])
            end
          end
        end
      end
      
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end
      
      -- if we didn't find enough stuff to hit with, stick in hemorrhage.
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end

      if (snd.used.shield and snd.used.rebounding) then -- Double barrier, try to break through both with rsk/wasi.
        string = "deceive " .. snd.target .. " wasi"
        
      elseif (snd.used.shield or snd.used.rebounding) then -- One layer of barrier, rsk w/venom.
        string = "deceive " .. snd.target .. " " .. snd.rev_empower(tohit[1])
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[1]
        
      else -- Send 2 hits with venoms/empowerments
        string = "dpl " .. snd.target .. " " .. snd.rev_empower(tohit[2]) .. " " .. snd.rev_empower(tohit[1])
        call = "wt Afflicting " .. snd.target .. ": " .. tohit[2] .. ", " .. tohit[1]
        
        if left_crescent ~= "" and snd.checkAff("sensitivity") then string = left_crescent..snd.sep..string end
        if right_crescent ~= "" and snd.checkAff("sensitivity") then string = right_crescent..snd.sep..string end 
      end
      
    end
    
    -- prepend our affliction call, if we need one
    if snd.toggles.affcalling and not snd.target_gone then
      string = call .. snd.sep .. string
    end
    
    -- handle anti-spam and the actual attacking now
    if string ~= snd.last_attack and not snd.waiting.queue then
      snd.last_attack = string
      snd.attack(snd.last_attack)
      snd.waiting.queue = true
      tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^bleed$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb Offenses</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>limbs</name>
									<script>if snd.class == "Revenant" then
  snd.starting_attack()
  function snd.attack_function()
   if not snd.waiting.queue then
    local string = ""
    -- list what limbs to hit
    local limbs = {"left leg", "right leg", "left arm", "right arm"}
  	-- check if we can rupture now!
    local rupture = "none"
  	local atdum = false
  	local call = ""
    local left = "nothing"
  	local right = "nothing"
  
    for limb in ipairs(limbs) do
     if snd.limb_bruising[limbs[limb]] &gt;= 3 then
      rupture = limbs[limb]
     end
    end
    if rupture ~= "none" and not snd.used.shield then -- if rupture is go
     string = "lurk "..snd.target..snd.sep.."hemoclysm "..snd.target.." "..rupture
    else -- can't rupture, needs logic
     -- but can we atdum tho!
     if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
      atdum = true
  	 else
  	  atdum = false
  	 end

  	 if snd.proned() then -- focus legs hard on prone
  	  if snd.parried_limb == "right leg" then
  	   right = "left leg"
  	  elseif snd.parried_limb == "left leg" then
  	   right = "right leg"
  	  else
  	   right = "right leg"
  		 left = "left leg"
  	  end
  	 else -- target not prone
  	  for limb in pairs(limbs) do
  		 -- ignore last parried, last hit, and any limbs being resto'd
  	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
  		  -- if it's a leg that's about to break
  	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
  		   -- if we have atdum and can use it with impunity
  			 if atdum and not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
  			  if right == "nothing" then
  			   right = limbs[limb]
  			  elseif left == "nothing" then
  			   left = limbs[limb]
  			  end
  				-- otherwise leave the prepped leg alone!
  		   end
  			 -- if it's not a leg about to break, go for it
  		  elseif right == "nothing" then
  		   right = limbs[limb]
  	    elseif left == "nothing" and limbs[limb] ~= right then
  	     left = limbs[limb]
  		  end
  	   end
  	  end
  	 end
  	 if left == "nothing" then -- we only found one limb to hit
  	  left = right -- double up!
  	 end
  	 -- end limb picking logic
  	 -- on to attacking logic!
  	 if snd.used.shield and snd.used.rebounding then -- baddie is turtling
      string = "raze "..snd.target -- raze has static balance cost
  	 elseif snd.used.shield or snd.used.rebounding then
      string = "target nothing with left"..snd.sep.."target "..right.." with right"..snd.sep.."deceive "..snd.target.." lura"
  	 -- here's the tricky part, we're checking for optimal conditions
  	 -- we need atdum ready, a leg about to break, and resto poultice off balance
  	 elseif atdum and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
  	  if left == "left leg" then right = "right leg" end
  	  if left == "right leg" then right = "left leg" end
  	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."actuate right with adil"..snd.sep.."blade scribe right atdum "..snd.target..snd.sep.."dpl "..snd.target.." lura baludu"
  	 -- we could also meet the same conditions, but on the other limb we picked
  	 elseif atdum and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
  	  if right == "left leg" then left = "right leg" end
  	  if right == "right leg" then left = "left leg" end
  	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."actuate right with adil"..snd.sep.."blade scribe right atdum "..snd.target..snd.sep.."dpl "..snd.target.." baludu lura"
  	 else -- we can't do a Big Bad Break, run normal logic
  	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dpl "..snd.target.." lura lura"
     end
  	end
    if string ~= snd.last_attack and not snd.waiting.queue then
     snd.last_attack = string
     snd.attack(snd.last_attack)
     snd.waiting.queue = true
     tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    end
   end
  end
  snd.attack_function()
  snd.send("engage "..snd.target)
end
</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>ice blast limbs</name>
									<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  -- list what limbs to hit
  local limbs = {"left leg", "right leg", "left arm", "right arm"}
	-- check if we can rupture now!
  local rupture = "none"
	local atdum = false
	local call = ""
  local left = "nothing"
	local right = "nothing"
  
  for limb in ipairs(limbs) do
   if snd.limb_bruising[limbs[limb]] &gt;= 3 then
    rupture = limbs[limb]
   end
  end
  if rupture ~= "none" and not snd.used.shield then -- if rupture is go
   string = "lurk "..snd.target..snd.sep.."hemoclysm "..snd.target.." "..rupture
  else -- can't rupture, needs logic
   -- but can we atdum tho!
   if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
    atdum = true
	 else
	  atdum = false
	 end

	 if snd.proned() then -- focus legs hard on prone
	  if snd.parried_limb == "right leg" then
	   right = "left leg"
	  elseif snd.parried_limb == "left leg" then
	   right = "right leg"
	  else
	   right = "right leg"
		 left = "left leg"
	  end
	 else -- target not prone
	  for limb in pairs(limbs) do
		 -- ignore last parried, last hit, and any limbs being resto'd
	   if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and (limbs[limb] ~= snd.resto_limb or snd.limb_dmg[limbs[limb]] &gt;= 33.33) then
		  -- if it's a leg that's about to break
	    if (limbs[limb] == "left leg" or limbs[limb] == "right leg") and (snd.limb_dmg[limbs[limb]]+snd.limb_dmg_done &gt;= 33.3) then
		   -- if we have atdum and can use it with impunity
			 if atdum and not snd.used.shield and not snd.used.rebounding and snd.resto_limb ~= "none" then
			  if right == "nothing" then
			   right = limbs[limb]
			  elseif left == "nothing" then
			   left = limbs[limb]
			  end
				-- otherwise leave the prepped leg alone!
		   end
			 -- if it's not a leg about to break, go for it
		  elseif right == "nothing" then
		   right = limbs[limb]
	    elseif left == "nothing" and limbs[limb] ~= right then
	     left = limbs[limb]
		  end
	   end
	  end
	 end
	 if left == "nothing" then -- we only found one limb to hit
	  left = right -- double up!
	 end
	 -- end limb picking logic
	 -- on to attacking logic!
	 if snd.used.shield and snd.used.rebounding then -- baddie is turtling
    string = "raze "..snd.target -- raze has static balance cost
	 elseif snd.used.shield or snd.used.rebounding then
    string = "target nothing with left"..snd.sep.."target "..right.." with right"..snd.sep.."deceive "..snd.target.." lura"
	 -- here's the tricky part, we're checking for optimal conditions
	 -- we need atdum ready, a leg about to break, and resto poultice off balance
	 elseif atdum and snd.resto_limb ~= "none" and (snd.limb_dmg[left]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[left] &lt; 33.33 and string.find(left, "leg") then
	  if left == "left leg" then right = "right leg" end
	  if left == "right leg" then right = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."actuate right with adil"..snd.sep.."blade scribe right atdum "..snd.target..snd.sep.."dpl "..snd.target.." lura baludu"
	 -- we could also meet the same conditions, but on the other limb we picked
	 elseif atdum and snd.resto_limb ~= "none" and (snd.limb_dmg[right]+snd.limb_dmg_done &gt;= 33.3) and snd.limb_dmg[right] &lt; 33.33 and string.find(right, "leg") then
	  if right == "left leg" then left = "right leg" end
	  if right == "right leg" then left = "left leg" end
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."actuate right with adil"..snd.sep.."blade scribe right atdum "..snd.target..snd.sep.."dpl "..snd.target.." baludu lura"
	 else -- we can't do a Big Bad Break, run normal logic
	  string = "target "..left.." with left"..snd.sep.."target "..right.." with right"..snd.sep.."dpl "..snd.target.." lura lura"
   end
	end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
snd.send("engage "..snd.target)
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^lb$</regex>
								</Alias>
							</AliasGroup>
							<Alias isActive="yes" isFolder="no">
								<name>Revenant Group Dmg Stun (Get Vardrax Venom)</name>
								<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local physcount = 0
		for aff in pairs(snd.physical_affs) do
			if table.contains(snd.target_has, snd.physical_affs[aff]) then
				physcount = physcount + 1
			end
		end
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "wilave"
		local atdum = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			atdum = true -- yesssssss
		end
		-- set the affs we want to use
			snd.giving = {
      "clumsiness",
      "paresis",     
      "sensitivity",
      "left_leg_crippled",
      "right_leg_crippled",      
      "asthma",      
      "vomiting",
      "allergies",
      "sensitivity",
      "haemophilia",
      "slickness",

      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "extirpate"
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and physcount &gt;= 4 and atdum then
			string = "chirography blade scribe left lawid "..snd.target..snd.sep.."chirography blade scribe right lawid "..snd.target..snd.sep.."chirography lurk "..snd.target..snd.sep.."transpierce "..snd.target
		elseif snd.balance.anguish and not snd.checksomeAffs({"deadening", "hearing"}, 2) then
      string = "DPL "..snd.target.." prefarar vardrax"..snd.sep.."anguish " ..snd.target
        
        else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "deceive "..snd.target.. " "..snd.rev_empower(tohit[1])
			elseif snd.used.rebounding then
				string = "DPL "..snd.target.." wasi "..snd.rev_empower(tohit[1])
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": wasi, "..tohit[1]..snd.sep
			elseif atdum then
				string = "blade scribe right atdum "..snd.target.." "..snd.rev_empower(tohit[1])..snd.sep.."DPL "..snd.target.." "..snd.rev_empower(tohit[3]).." "..snd.rev_empower(tohit[2])
				call = "wt Afflicting "..snd.target..": "..tohit[1]..", "..tohit[3]..", "..tohit[2]..snd.sep
			else
				string = "DPL "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
			end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gdmg$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Revenant Group Dmg Stun (No Vardrax Venom)</name>
								<script>if snd.class == "Revenant" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local physcount = 0
		for aff in pairs(snd.physical_affs) do
			if table.contains(snd.target_has, snd.physical_affs[aff]) then
				physcount = physcount + 1
			end
		end
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}
		-- and in case we don't find enough of them
		local extraaff = "wilave"
		local atdum = false -- can we use vorpal?
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 140 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 140 then
			atdum = true -- yesssssss
		if tonumber(gmcp.Char.Vitals.charge_left) &gt;= 90 and tonumber(gmcp.Char.Vitals.charge_right) &gt;= 90 then
			iyedlo = true -- yesssssss      
		end
          
		end
		-- set the affs we want to use
			snd.giving = {
      "clumsiness",
      "paresis",     
      "sensitivity",
      "asthma",      
      "vomiting",
      "allergies",
      "sensitivity",
      "haemophilia",
      "slickness",
      "left_leg_crippled",
      "right_leg_crippled",
      --"anorexia",
      --"stupidity",
      --"recklessness",
      --"weariness",
      --"dizziness",
      --"voyria",
      }
		-- first and foremost, check if we can disembowel!
		if snd.target_impaled then
			string = "extirpate"
		-- otherwise, see if we can impale
		elseif not snd.checkAff("writhe_impaled") and snd.proned() and snd.checkAff("sensitivity") and physcount &gt;= 4 and atdum then
			string = "chirography blade scribe left lawid "..snd.target..snd.sep.."chirography blade scribe right lawid "..snd.target..snd.sep.."chirography lurk "..snd.target..snd.sep.."transpierce "..snd.target
		elseif snd.balance.anguish and not snd.checkAff("hearing") then
      string = "DPL "..snd.target.." prefarar prefarar"..snd.sep.."anguish " ..snd.target
        
        else -- if not...
			-- pick affs from the list above
			for i in pairs(snd.giving) do
				-- make sure not to double up paresis and paralysis
				if not snd.checkAff(snd.giving[i]) then
					-- and don't add an aff we've already got in the list!
					if not table.contains(touse, snd.giving[i]) then
						table.insert(touse, snd.giving[i])
					end
				end
			end
			-- now let's convert affs to venoms/empowerments
			for aff in pairs(touse) do
				table.insert(tohit, snd.effects[touse[aff]])
			end
			-- if we didn't find enough stuff to hit with, stick in our filler
			while #tohit &lt; 3 do
				table.insert(tohit, extraaff)
			end
			-- now to decide what attack to use!
			if snd.used.shield then
				string = "deceive "..snd.target.. " "..snd.rev_empower(tohit[1])
			elseif snd.used.rebounding then
				string = "DPL "..snd.target.." wasi "..snd.rev_empower(tohit[1])
				snd.blazing = true
				call = "wt Afflicting "..snd.target..": wasi, "..tohit[1]..snd.sep
			elseif iyedlo then      
				string = "blade scribe iyedlo"..snd.sep.."DPL "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])..snd.sep   
      else
				string = "DPL "..snd.target.." "..snd.rev_empower(tohit[2]).." "..snd.rev_empower(tohit[1])
				call = "wt Afflicting "..snd.target..": "..tohit[2]..", "..tohit[1]..snd.sep
      end
		end
		-- prepend our affliction call, if we need one
		if snd.toggles.affcalling and not snd.target_gone then
			string = call..string
		end
		-- handle anti-spam and the actual attacking now
		if string ~= snd.last_attack and not snd.waiting.queue then
			snd.last_attack = string
			snd.attack(snd.last_attack)
			snd.waiting.queue = true
			tempTimer(snd.delay(), [[snd.waiting.queue = false]])
		end
	end
end
snd.attack_function()
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^gimp$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Blender Alias (Wield a 2-handed)</name>
								<script>if snd.class == "Revenant" then
   snd.send("riving umbrage wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave wilave")
end
   
</script>
								<command></command>
								<packageName></packageName>
								<regex>^arc$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Sciomancer</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Affliction</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group Affliction</name>
									<script>if snd.class == "Sciomancer" then
  snd.starting_attack()
    function snd.attack_function()
     if not snd.waiting.queue then
      local string = ""
      local gstring = ""
      local call = ""
      local astring = ""
      local paystring = ""
    	local health = 100*(gmcp.Char.Vitals.maxhp)
      
      cecho("&lt;red&gt;\n"..snd.gravity.." " ..tonumber(gmcp.Char.Vitals.shadowprice))
    		
    	if not snd.checksomeAffs({"impede","imbued"}, 2) and not snd.used.shield then 
        gstring = "gravity imbue " ..snd.target..snd.sep.."gravity impede " ..snd.target..snd.sep 
      else 
        gstring = "" 
      end
      if snd.repay  &lt; 2 and tonumber(gmcp.Char.Vitals.shadowprice) &gt;= 3 and not snd.checkAff("gloom") then 
        paystring = "cast repay"..snd.sep 
      elseif snd.repay &lt; 1 and tonumber(gmcp.Char.Vitals.shadowprice) == 4 then
        paystring = "cast repay"..snd.sep
      else 
        paystring = "" 
      end
    
    	if snd.used.shield then
        if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
          astring = astring.."shadowprice hew "..snd.target..snd.sep
          else
       	astring = astring.."cast hew "..snd.target..snd.sep
        end
    	elseif not snd.checkAff("voidgaze") and tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
          astring = astring.."shadowprice voidgaze "..snd.target..snd.sep
      elseif not snd.checksomeAffs({"nyctophobia","haemophilia"},2) then
          astring = astring.."cast falter " ..snd.target..snd.sep     
      elseif not snd.checksomeAffs({"vomiting","haemophilia"},1) then
        if not snd.checkAff("gloom") and tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
          astring = astring.."shadowprice gloom " ..snd.target..snd.sep.."cast fever " ..snd.target..snd.sep
        else
          astring = astring.."cast fever " ..snd.target..snd.sep
        end
      elseif not snd.checksomeAffs({"clumsiness","weariness","lethargy","paresis"},2) then
        if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 3 and not snd.checkAff("gloom") then
          astring = astring.."shadowprice gloom " ..snd.target..snd.sep.."shadowprice ruin " ..snd.target..snd.sep
        elseif tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
          astring = astring.."shadowprice ruin " ..snd.target..snd.sep
        else
          astring = astring.."cast ruin " ..snd.target..snd.sep
        end
       else
        if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
          astring = astring.."shadowprice falter " ..snd.target..snd.sep
          else
          string = astring.."cast falter " ..snd.target..snd.sep
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
      string = paystring..gstring..astring
       snd.last_attack = string
       snd.attack(snd.last_attack)
       snd.waiting.queue = true
       tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
     end
  end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Afflictions</name>
									<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."cast hew "..snd.target
  elseif not snd.checkAff("gloom") then
		if hasSkill("Fever") then
			if gmcp.Char.Vitals.shadowprice &lt; "2" then
				string = string.."shadowprice gloom "..snd.target..snd.sep.."cast fever "..snd.target
			else
				string = string.."cast gloom "..snd.target
			end
		else
			if gmcp.Char.Vitals.shadowprice &lt; "2" then
				string = string.."shadowprice gloom "..snd.target
			else
				string = string.."cast gloom "..snd.target
			end
		end
	elseif not snd.checksomeAffs({"clumsiness", "weariness", "lethargy", "paresis"}, 1) then
		if gmcp.Char.Vitals.shadowprice &lt; "2" then
			string = string.."shadowprice ruin "..snd.target
		else
			string = string.."cast ruin "..snd.target
		end
  elseif snd.checkAff("sight") and not snd.checkAff("voidtrapped") then
		string = string.."cast voidgaze " ..snd.target..snd.sep
	elseif not snd.checksomeAffs({"vomiting", "haemophilia"}, 1) and hasSkill("Fever") then
		string = string.."cast fever "..snd.target
  else
   	string = string.."cast scourge "..snd.target
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Sciomancer Group Dmg</name>
									<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 if not snd.waiting.queue then
  local string = ""
  local gstring = ""
  local call = ""
  local astring = ""
  local paystring = ""
	local health = 100*(gmcp.Char.Vitals.maxhp)
  
  	cecho("&lt;red&gt;\n"..snd.gravity.." " ..tonumber(gmcp.Char.Vitals.shadowprice))
		
--			if not snd.checksomeAffs({"impede","imbued"}, 2) and not snd.used.shield then gstring = "gravity imbue " ..snd.target..snd.sep.."gravity impede " ..snd.target..snd.sep else gstring = "" end
      if snd.repay  &lt; 2 and tonumber(gmcp.Char.Vitals.shadowprice) &gt;= 3 and not snd.checkAff("gloom") then paystring = "cast repay"..snd.sep elseif snd.repay&lt;1 and tonumber(gmcp.Char.Vitals.shadowprice) == 4 then paystring = "cast repay"..snd.sep else paystring = "" end

	if snd.used.shield then
    if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
      astring = astring.."shadowprice hew "..snd.target..snd.sep
      else
   	astring = astring.."cast hew "..snd.target..snd.sep
    end
	elseif not snd.checkAff("voidgaze") and tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
      astring = astring.."shadowprice voidgaze "..snd.target..snd.sep
  elseif not snd.checksomeAffs({"nyctophobia","haemophilia"},2) then
      astring = astring.."cast falter " ..snd.target..snd.sep     
  elseif not snd.checksomeAffs({"vomiting","haemophilia"},1) then
    if not snd.checkAff("gloom") and tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
      astring = astring.."shadowprice gloom " ..snd.target..snd.sep.."cast fever " ..snd.target..snd.sep
    else
      astring = astring.."cast fever " ..snd.target..snd.sep
    end
  elseif not snd.checksomeAffs({"clumsiness","weariness","lethargy","paresis"},2) then
    if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 3 and not snd.checkAff("gloom") then
      astring = astring.."shadowprice gloom " ..snd.target..snd.sep.."shadowprice ruin " ..snd.target..snd.sep
    elseif tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
      astring = astring.."shadowprice ruin " ..snd.target..snd.sep
    else
      astring = astring.."cast ruin " ..snd.target..snd.sep
    end
   else
    if tonumber(gmcp.Char.Vitals.shadowprice) &lt; 4 then
      astring = astring.."shadowprice falter " ..snd.target..snd.sep
      else
      string = astring.."cast falter " ..snd.target..snd.sep
  end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
  string = paystring..astring
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gdmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Basic Damage</name>
									<script>if snd.class == "Sciomancer" then
snd.starting_attack()
function snd.attack_function()
 local string = ""
 if not snd.waiting.queue then
	if snd.used.shield then
   	string = string.."cast hew "..snd.target
  elseif snd.checkAff("writhe_transfix") then
		if not snd.checkAff("gloom") then
			if hasSkill("Fever") then
				if gmcp.Char.Vitals.shadowprice &lt; "2" then
					string = string.."shadowprice gloom "..snd.target..snd.sep.."cast fever "..snd.target
				else
					string = string.."cast gloom "..snd.target
				end
			else
				if gmcp.Char.Vitals.shadowprice &lt; "2" then
					string = string.."shadowprice gloom "..snd.target
				else
					string = string.."cast gloom "..snd.target
				end
			end
		end
  else
   		if hasSkill("Transfix") then
				string = string.."cast transfix "..snd.target
			else
				string = string.."cast rot "..snd.target
			end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limb</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Limbs</name>
									<script>if snd.class == "Sciomancer" then
  snd.starting_attack()
  function snd.attack_function()
    local string = ""
    if not snd.waiting.queue then
      limbs = {"left leg", "right leg", "left arm", "right arm"}
      for limb in pairs(limbs) do
      -- ignore last hit and any limbs being resto'd
        if
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == "nothing" then
            targ = limbs[limb]
          end
        end
      end

	if snd.used.shield then
   string = string.."cast hew "..snd.target
	elseif gmcp.Char.Vitals.singularity == "" then
		if hasSkill("Genesis") then
			string = string.."gravity genesis tether"
		else
			string = string.."gravity singularity"
		end
  elseif snd.gravity &lt; 5 then
		string = string.."gravity grip "..snd.target
  else
		if not snd.checkAff(targ:gsub(" ","_").."_crippled") then
			string = string.."gravity erupt "..snd.target..targ
		else
			if hasSkill("Transfix") then
				string = string.."cast transfix "..snd.target
			else
				string = string.."cast chill "..snd.target
			end
		end
  end
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Teradrim</name>
							<script>--If checking for sand in room use the following 

-- table.contains(gmcp.Room.Info.details, "sandy")</script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Afflictions</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic Aff</name>
									<script>if snd.class == "Teradrim" then
  snd.starting_attack()

  function snd.attack_function()
    local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm)
    local string = ""
    
    if not snd.waiting.queue then
      if not table.contains(gmcp.Room.Info.details, "sandy") then
        string = "sand flood"
      -- If you don't have sandstorm up, let's do it.
      elseif sandstorm == 0 and hasSkill("Sandstorm") then
        string = "sand storm"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."earth impale "..snd.target
      -- If shielded or rebounding, strip it.
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Slice") then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          if snd.used.shield and snd.used.rebounding then
            string = "sand slice "..snd.target.." storm"..snd.sep.."sand slice "..snd.target
          else
            string = "sand slice "..snd.target.." storm"..snd.sep.."earth batter " .. snd.target
          end
        else
          string = "sand slice " .. snd.target
        end
      -- Let's get slough going to limit usage of poultices.
      elseif not snd.checkAff("slough") and hasSkill("Curse") then -- slough prevents poultices from being applied, like slickness
        -- Let's try to give heartflutter and stun if we can. 
        -- If we have sandstorm, let's give some affs and damage torso.
        -- If all else fails, let's just give those affs.
        if (snd.balance.earthenwill and hasSkill("Engulf")) and (sandstorm &gt;= 3 and hasSkill("Sandstorm")) and hasSkill("Gutsmash") then
          string = "prepare earthenwill heartpunch"..snd.sep.."sand curse "..snd.target.." storm"..snd.sep.."earth gutsmash "..snd.target
        elseif (sandstorm &gt;= 3 and hasSkill("Sandstorm")) and hasSkill("Gutsmash") then
          string = "sand curse "..snd.target.." storm"..snd.sep.."earth gutsmash "..snd.target
        else
          string = "sand curse "..snd.target
        end
      -- if they are proned, let's go ahead and try to give collapsed lung to punish for smoking
      elseif (snd.proned() and hasSkill("Pulp")) and not snd.checkAff("collapsed_lung") then
         string = string.."earth pulp "..snd.target
      -- If we get slough up, let's throw out some useful group affs going.
      elseif snd.checksomeAffs({"recklessness", "dizziness", "sensitivity", "epilepsy", "stupidity"},4) and hasSkill("Whip") then
        string = "sand whip "..snd.target
      -- If we have gotten slough on the target, let's break some limbs. Those are affs too.
      elseif not snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},4) and hasSkill("Scourge") then
        string = "sand scourge " .. snd.target
      -- All else, let's just smack
      else
        string = "earth  batter " .. snd.target
      end
    
      -- If your golem isn't attacking, get it attacking.
      if not snd.loyalsattacking then
        string = "order loyals kill "..snd.target..snd.sep..string
      end
      
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^aff$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic Group Damage</name>
									<script>if snd.class == "Teradrim" then
  snd.starting_attack()
  
  function snd.attack_function()
    local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm)
    local string = ""
    
    if not snd.waiting.queue then
      -- if they are impaled, let's do some damage
      if snd.target_impaled and hasSkill("Stonevice") then
        string = "earth stonevice"
      -- If there is no fog, let's get it going.
      elseif not table.contains(gmcp.Room.Info.details, "sandy") then
        string = "sand flood"
      -- If you don't have sandstorm up, let's do it.
      elseif sandstorm == 0 and hasSkill("Sandstorm") then
        string = "sand storm"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."earth impale "..snd.target
      -- If shielded or rebounding, strip it.
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Slice") then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          if snd.used.shield and snd.used.rebounding then
            string = "sand slice "..snd.target.." storm"..snd.sep.."sand slice "..snd.target
          elseif snd.used.shield or snd.used.rebounding then
            string = "sand slice "..snd.target.." storm"..snd.sep.."earth overhand " .. snd.target            
          end
        else
          string = "sand slice " .. snd.target
        end
      -- Did you happen to strip their lev and they are not proned? Let's prone them!
      elseif not snd.proned() and snd.lev_gone and hasSkill("Shockwave") then
         string = string.."earth shockwave "..snd.target      
    	-- If you can impale them, let's do it, so long as no one else has.
      elseif not snd.target_impaled and snd.proned() and hasSkill("Impale") then
        if sandstorm &gt;= 3 then
          string = "sand scourge "..snd.target.." storm"..snd.sep.."earth impale"
        else
          string = "earth impale"
        end
      -- They prone and have two limbs broken? Cool, let's try to damage some limbs more and generally damage them cause of it.
      elseif snd.proned() and snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},2) and hasSkill("Quake") then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          string = "sand scourge "..snd.target.." storm"..snd.sep.."earth quake"
        else
          string = "earth quake"
        end
      -- Let's go ahead and start damaging their head if they aren't parrying it.
      elseif snd.parried_limb ~= "head" and hasSkill("Shred") then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          string = "sand shred "..snd.target.." head storm"..snd.sep.."earth batter "..snd.target
        else
          string = "sand shred "..snd.target.." head"
        end
      -- Otherwise, let's just batter them.
      else
        string = "earth batter "..snd.target
      end
  
    -- If your golem isn't attacking, get it attacking.
    if not snd.loyalsattacking then
      string = "order loyals kill "..snd.target..snd.sep..string
    end
    
    if snd.balance.earthenwill and hasSkill("Earthenwill") then
      string = "prepare earthenwill"..snd.sep..string
    end
  
    if snd.balance.momentum and hasSkill("Momentum") then
      string = "earth momentum"..snd.sep..string
    end
  
  
  if string ~= snd.last_attack and not snd.waiting.queue then
   snd.last_attack = string
   snd.attack(snd.last_attack)
   snd.waiting.queue = true
   tempTimer(snd.delay(), [[snd.waiting.queue = false]])
  end
 end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Limbs</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Basic Group Limbs</name>
									<script>if snd.class == "Teradrim" then -- Note that this is intended for groups, not 1v1
  snd.starting_attack()
  
  function snd.attack_function()
    local sandstorm = tonumber(gmcp.Char.Vitals.sandstorm)
    local string = ""
    
    if not snd.waiting.queue then
    
      -- If target is impaled, let's do some damage.
 		  if snd.target_impaled and hasSkill("Stonevice") then
        string = "earth stonevice"
      -- If there is no fog, let's get it going.
      elseif not table.contains(gmcp.Room.Info.details, "sandy") then
        string = "sand flood"
      -- If you don't have sandstorm up, let's do it.
      elseif sandstorm == 0 and hasSkill("Sandstorm") then
        string = "sand storm"
      -- Are they tumbling? Let's impale them if they haven't been yet.
      elseif not snd.target_impaled and snd.theytumbling then
         string = string.."earth impale "..snd.target
      -- They shielded and rebounded? Try to remove both. But if they only have one, strip it and then strip levitation. 
      elseif (snd.used.shield or snd.used.rebounding) and hasSkill("Slice") then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          if snd.used.shield and snd.used.rebounding then
            string = "sand slice "..snd.target.." storm"..snd.sep.."sand slice "..snd.target
          elseif snd.used.shield or snd.used.rebounding then
            string = "sand slice "..snd.target.." storm"..snd.sep.."earth overhand " .. snd.target            
          end
        else
          string = "sand slice " .. snd.target
        end
      -- We want levitation gone for more damage. Let's try quicksand to make it so they can't put it up fast if it's not gone yet.
      -- If we can't quicksand, roll with overhand.
      elseif not snd.lev_gone then
        if hasSkill("Quicksand") and snd.proned() then
          string = string.."sand quicksand "..snd.target
        elseif hasSkill("Overhand") then
         string = string.."earth overhand "..snd.target
        end
      -- If they are not prone and no levitation, capsize them. This'll break 3 limbs regardless of bruises.
      elseif (not snd.proned() and snd.lev_gone) and hasSkill("Shockwave") then
         string = string.."earth shockwave "..snd.target      
    	-- Let's try to give them slough, that way it's harder to heal limbs. Also, batter if you can storm it.
    	elseif (not snd.checkAff("slough") and hasSkill("Curse")) then
        if sandstorm &gt;= 3 and hasSkill("Sandstorm") then
          string = string.."sand curse "..snd.target.." storm"..snd.sep.."earth batter "..snd.target
        else
          string = string.."sand curse "..snd.target
        end
      -- Straight try to break all four limbs to help support limbs in the group.
      elseif not snd.checksomeAffs({"left_arm_crippled", "right_arm_crippled", "left_leg_crippled", "right_leg_crippled"},4) and hasSkill("Scourge") then
        string = string.."sand scourge " .. snd.target
      else 
        string = "earth batter "..snd.target
  	  end
  
      -- If your synth isn't attacking, get it attacking.
      if not snd.loyalsattacking then
        string = "order loyals kill "..snd.target..snd.sep..string
      end
    
      if snd.balance.earthenwill and hasSkill("Earthenwill") then
        string = "prepare earthenwill"..snd.sep..string
      end
  
      if snd.balance.momentum and hasSkill("Momentum") then
        string = "earth momentum"..snd.sep..string
      end
		
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end
  
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^limbs$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Bloodborn</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Damage Offense</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>order loyals aggro</name>
									<script>send("order cholerisk kill "..snd.target)</script>
									<command></command>
									<packageName></packageName>
									<regex>^ock$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>order loyals passive</name>
									<script>send("order loyals passive")</script>
									<command></command>
									<packageName></packageName>
									<regex>^ocp$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Freeze</name>
									<script>if snd.class == "Bloodborn" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      -- next, the afflictions we want to give
      local touse = {}
      local tohit = {}
      local stalled = false
      if snd.defenses.def_arrhythmia.state == "deffed" then
        stalled = true
      end

      local extraaff = ""
      snd.giving = {"anorexia"}
      for i in pairs(snd.giving) do
        -- make sure not to double up paresis and paralysis
        if not snd.checkAff(snd.giving[i]) then
          -- and don't add an aff we've already got in the list!
          if not table.contains(touse, snd.giving[i]) then
            table.insert(touse, snd.giving[i])
          end
        end
      end
      -- now let's convert affs to venoms/empowerments
      for aff in pairs(touse) do
        table.insert(tohit, snd.effects[touse[aff]])
      end
      -- if we didn't find enough stuff to hit with, stick in our filler
      while #tohit &lt; 3 do
        table.insert(tohit, extraaff)
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("excess_phlegm") then
        string = "well imbrue "
      elseif snd.glimpse == "none" and snd.checkAff("excess_phlegm") then
        string = "well actualize " .. snd.target .. " phlegm"
      elseif snd.used.shield or 
			(snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"},1) or snd.limb_status["left leg"] ~= "healed" or snd.limb_status["right leg"] ~= "healed") and not snd.proned() then
				string = "humour perforate " .. snd.target
      elseif snd.glimpse == "phlegm" or snd.glimpse == "yellow" or snd.glimpse == "black" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "well palpitate " .. snd.target
        end
        if gmcp.Char.Vitals.aspect == "phlegm" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "well arrhythmia 3 plunge " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("frostbite") and not snd.checkAff("excess_phlegm") then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            else
              string = string .. snd.sep .. "humour plunge " .. snd.target
						end
          end
        elseif gmcp.Char.Vitals.aspect == "yellow" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            elseif snd.limb_dmg.torso &gt; 0 then
              string = string .. snd.sep .. "well arrhythmia 3 brainfreeze " .. snd.target
            end
          elseif stalled then
            if snd.checkAff("shivering") and not snd.checkAff("frostbite") and not snd.checkAff("excess_phlegm") then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "humour revulsion " .. snd.target .. " euphoriant"
						else
							string = string .. snd.sep .. "humour swathe " .. snd.target
            end
          end
        elseif gmcp.Char.Vitals.aspect == "air" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "well arrhythmia 3 swathe " .. snd.target
            end
          elseif stalled then
           if snd.checkAff("shivering") and not snd.checkAff("frostbite") and not snd.checkAff("excess_phlegm") then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            elseif not snd.checkAff("gorged") then
              string = string .. snd.sep .. "humour revulsion " .. snd.target .. " euphoriant"
						elseif not snd.checkAff("masochism") then
							string = string .. snd.sep .. "humour brainfreeze " ..snd.target
						else
							string = string .. snd.sep .. "humour swathe " ..snd.target
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^freeze$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Damage</name>
									<script>if snd.class == "Bloodborn" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
			
	if snd.glimpse == "none" and snd.checkAff("stormtouched") and not snd.glimpsing then
		string = "well suffocate"
	elseif snd.glimpse == "none" and not snd.checkAff("stormtouched") then
		string = "well profane"
	end

	if snd.checkAff("stormtouched") and not snd.used.shield then
		string = string..snd.sep.."humour synape "..snd.target
  elseif snd.used.shield or snd.checksomeAffs({"left_leg_crippled", "right_leg_crippled"}, 1) or (snd.limb_status["left leg"] ~= "healed" or snd.limb_status["right leg"] ~= "healed") and not snd.proned() then
				string = "humour perforate " .. snd.target
	else
  	if snd.glimpse == "phlegm" or snd.glimpse == "yellow" or snd.glimpse == "black" then
  	
  		if gmcp.Char.Vitals.ability_bal == "1" then
  			string = "well palpitate "..snd.target
  		end
  		
  		if gmcp.Char.Vitals.aspect == "none" or gmcp.Char.Vitals.aspect == "phlegm" then
  			string = string..snd.sep.."well contaminate yellowbile"
  		end
  
  		if gmcp.Char.Vitals.aspect == "yellow" then
  			string = string..snd.sep.."humour perforate "..snd.target
  		end
  
  		if gmcp.Char.Vitals.aspect == "black" then
  			string = string..snd.sep.."humour retch "..snd.target
  		end
	end
end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^dmg$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Single Shatter</name>
									<script>if snd.class == "Bloodborn" then
  snd.starting_attack()

  function snd.attack_function()
    if not snd.waiting.queue then
      local string = ""
      -- we'll load this with our attack string
      local call = ""
      -- and this with our affliction call
      local limbs = {"left leg", "right leg", "left arm", "right arm"}
      local targ = "nothing"
      local stalled = false
      if snd.defenses.def_arrhythmia.state == "deffed" then
        arrhythmia = true
      end
      for limb in pairs(limbs) do
        -- ignore last parried, last hit, and any limbs being resto'd
        if
          limbs[limb] ~= snd.parried_limb and
          limbs[limb] ~= snd.last_hit_limb and
          limbs[limb] ~= snd.resto_limb
        then
          if targ == "nothing" then
            targ = limbs[limb]
          end
        end
      end
      if snd.glimpse == "none" and not snd.glimpsing and not snd.checkAff("frostbite") then
        string = "well imbrue"
      elseif snd.glimpse == "none" and snd.checkAff("frostbite") then
        string = "well actualize " .. snd.target .. " phlegm"
      elseif snd.used.shield == true then
        string = "humour perforate " .. snd.target
      elseif snd.glimpse == "phlegm" or snd.glimpse == "yellow" or snd.glimpse == "black" then
        if gmcp.Char.Vitals.ability_bal == "1" then
          string = "well palpitate " .. snd.target
        end
        if gmcp.Char.Vitals.aspect == "phlegm" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("frostbite") and
              not snd.checkAff("excess_phlegm")
            then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            else
              string = string .. snd.sep .. "humour disgorge " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.aspect == "yellow" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " " .. targ
            end
          elseif stalled then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("frostbite") and
              not snd.checkAff("excess_phlegm")
            then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            else
              string = string .. snd.sep .. "humour disgorge " .. snd.target .. " " .. targ
            end
          end
        elseif gmcp.Char.Vitals.aspect == "black" then
          if not stalled then
            if snd.limb_dmg.torso == 0 and snd.parried_limb ~= "torso" then
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " torso"
            else
              string = string .. snd.sep .. "well arrhythmia 3 disgorge " .. snd.target .. " " .. targ
            end
          elseif stalled then
            --not snd.direfrost and not snd.checkAff("frostbrand") then
            if
              snd.checkAff("no_caloric") and
              not snd.checkAff("frostbite") and
              not snd.checkAff("excess_phlegm")
            then
              string = string .. snd.sep .. "humour frostbite " .. snd.target
            elseif snd.checkAff("frozen") and not snd.checkAff("writhe_impaled") then
              string = string .. snd.sep .. "humour perforate " .. snd.target
            else
              string = string .. snd.sep .. "humour disgorge " .. snd.target .. " " .. targ
            end
          end
        end
      end
      if string ~= snd.last_attack and not snd.waiting.queue then
        snd.last_attack = string
        snd.attack(snd.last_attack)
        snd.waiting.queue = true
        tempTimer(snd.delay(), [[snd.waiting.queue = false]])
      end
    end
  end

  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^sshatter$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Affs</name>
									<script>if snd.class == "Bloodborn" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		-- next, the afflictions we want to give
		local touse = {}
		local tohit = {}

		local extraaff = ""
		
			snd.giving = {
			"clumsiness",
			"paresis",
			"haemophilia",
			"asthma",
			"slickness",
			"anorexia",
			"stupidity",
			}
			
	for i in pairs(snd.giving) do
		-- make sure not to double up paresis and paralysis
		if not snd.checkAff(snd.giving[i]) then
			-- and don't add an aff we've already got in the list!
			if not table.contains(touse, snd.giving[i]) then
				table.insert(touse, snd.giving[i])
			end
		end
	end
	-- now let's convert affs to venoms/empowerments
	for aff in pairs(touse) do
		table.insert(tohit, snd.effects[touse[aff]])
	end
	-- if we didn't find enough stuff to hit with, stick in our filler
	while #tohit &lt; 3 do
		table.insert(tohit, extraaff)
	end
			
	if snd.glimpse == "none" and not snd.checkAff("excess_melancholic") and not snd.glimpsing then
		string = "well suffocate"
	elseif snd.glimpse == "none" and snd.checkAff("excess_melancholic") then
		string = "well actualize "..snd.target.." black"
	end

	if snd.checkAff("stormtouched") then
		string = string..snd.sep.."humour synape "..snd.target
	elseif snd.glimpse == "phlegm" or snd.glimpse == "yellow" or snd.glimpse == "black" then
	
		if snd.checkAff("vertigo") then
			string = "well palpitate "
		end
		
		if gmcp.Char.Vitals.aspect == "" or gmcp.Char.Vitals.aspect == "none" or gmcp.Char.Vitals.aspect == "yellow" then
			string = "well contaminate blackbile"
		end

		if gmcp.Char.Vitals.aspect == "phlegm" then
			if snd.defenses.def_arrhythmia.state ~= "deffed" then
				string = string..snd.sep.."well arrhythmia 3 equilibrium "..snd.target
			elseif snd.defenses.def_arrhythmia.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."humour perforate "..snd.target
				else
					if snd.checksomeAffs({"dizziness", "stupidity"},2) then
						string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."humour synape "..snd.target
					end
				end
			end

		elseif gmcp.Char.Vitals.aspect == "black" then
			if snd.defenses.def_arrhythmia.state ~= "deffed" then
				if snd.checksomeAffs({"dizziness", "stupidity"},2) and not snd.proned then
					string = string..snd.sep.."well arrhythmia 3 flense "..snd.target.." "..tohit[2]
				else
					string = string..snd.sep.."well arrhythmia 3 stupor "..snd.target
				end
			elseif snd.defenses.def_arrhythmia.state == "deffed" then
				if snd.used.shield then
					string = string..snd.sep.."humour perforate "..snd.target
				elseif snd.proned then
					if snd.checksomeAffs({"lethargy", "confusion"},2) then
						string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."humour swathe "..snd.target
					end
				elseif not snd.proned then
					if snd.checksomeAffs({"masochism", "stupidity"},2) then
						string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
					else
						string = string..snd.sep.."humour brainfreeze "..snd.target
					end
				end
			end
		end

end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^affs$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Fire</name>
									<script>if snd.class == "Bloodborn" then
snd.starting_attack()
function snd.attack_function()
	if not snd.waiting.queue then
		local string = "" -- we'll load this with our attack string
		local call = "" -- and this with our affliction call
		local limbs = {"head", "left leg", "torso", "right leg", "left arm", "right arm"}
		local targ = "nothing"
		
		for limb in pairs(limbs) do
			-- ignore last parried, last hit, and any limbs being resto'd
			if limbs[limb] ~= snd.parried_limb and limbs[limb] ~= snd.last_hit_limb and limbs[limb] ~= snd.resto_limb then
				if targ == "nothing" then
					targ = limbs[limb]
				end
			end
		end
			
	if snd.used.shield then
		string = string..snd.sep.."humour perforate "..snd.target
	end
			
	if snd.glimpse == "none" and not snd.glimpsing then
		string = "well profane"
	end

	if snd.glimpse == "phlegm" or snd.glimpse == "yellow" or snd.glimpse == "black" then
	
		if gmcp.Char.Vitals.ability_bal == "1" then
			string = "well palpitate "..snd.target
		end
		
		if gmcp.Char.Vitals.aspect ~= "yellow" then
			string = string..snd.sep.."well contaminate yellow"
		end
		
		if gmcp.Char.Vitals.aspect == "yellow" then
			if snd.defenses.def_arrhythmia.state ~= "deffed" then
				string = string..snd.sep.."well arrhythmia 3 disgorge "..snd.target.." "..targ
			else
				string = string..snd.sep.."humour disgorge "..snd.target.." "..targ
			end
		end

	end

	if string ~= snd.last_attack and not snd.waiting.queue then
		snd.last_attack = string
		snd.attack(snd.last_attack)
		snd.waiting.queue = true
		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
	end
	
end
end
snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^fire$</regex>
								</Alias>
								<Alias isActive="yes" isFolder="no">
									<name>Retch</name>
									<script>send("qeb humour retch "..snd.target..""..snd.sep.."humour retch "..snd.target)</script>
									<command></command>
									<packageName></packageName>
									<regex>^retch$</regex>
								</Alias>
							</AliasGroup>
							<AliasGroup isActive="yes" isFolder="yes">
								<name>Group</name>
								<script></script>
								<command></command>
								<packageName></packageName>
								<regex></regex>
								<Alias isActive="yes" isFolder="no">
									<name>Group</name>
									<script>if snd.class == "Bloodborn" then
  snd.starting_attack()
  function snd.attack_function()
    if not snd.waiting.queue then
  		local string = ""
  		local call = "" 
      local can_we_stall = false; if snd.defenses.def_arrhythmia.state ~= "deffed" then can_we_stall = true end
  		local can_we_flare = false; if gmcp.Char.Vitals.ability_bal ==  "1" then can_we_flare = true end
      local aspect = gmcp.Char.Vitals.aspect
      local random_limb = {"right leg", "right arm", "left leg", "left arm", "head", "torso"}
  		local touse = {}
  		local tohit = {}
      
  		local extraaff = "epseth"
  		
  		snd.giving = {                                             
  			"asthma",
  			"slickness",
  			"anorexia",
  			"stupidity",
        "weariness",
        "dizziness",
        "vomiting",
        "recklessness",
        }
  			
    	for i in pairs(snd.giving) do
    		if not snd.checkAff(snd.giving[i]) then
    			if not table.contains(touse, snd.giving[i]) then
    				table.insert(touse, snd.giving[i])
    			end
    		end
    	end
     
    	for aff in pairs(touse) do
    		table.insert(tohit, snd.effects[touse[aff]])
    	end
     
    	while #tohit &lt; 3 do
    		table.insert(tohit, extraaff)
    	end
    			
    	if snd.glimpse == "none" and not snd.glimpsing then
    		--string = "well suffocate"
    	end
    
    	if snd.glimpse == "none" then
    	
    		if can_we_flare and snd.checkAff("vertigo") and not snd.checkAff("muddled") then
    			string = "well palpitate"
    		end
  
    		if (aspect == "" or aspect == "none" or aspect == "yellow") and snd.balance.enrich then
    			string = "well suffocate"
    		 end
        
        if snd.used.shield then
    			string = string..snd.sep.."cast windlance "..snd.target
          
    		elseif aspect == "phlegm" then
    			if can_we_stall then
            string = string..snd.sep.."well arrhythmia 3 "
            if not snd.checksomeAffs({"vertigo", "confusion"}, 1) and not snd.checkAff("weariness") then
    				  string = string.." humour equilibrium "..snd.target
            elseif not snd.checksomeAffs({"dizziness", "stupidity"}, 2) then
              string = string.."humour stupor "..snd.target
            else  
              string = string.."humour disgorge  "..snd.target..random_limb[math.random(#random_limb)]
            end 
    			else
  					if not snd.checksomeAffs({"dizziness", "stupidity"},2) then
            	string = string..snd.sep.."humour synape "..snd.target
  					else
  						string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
  					end
    			end
    
    		elseif aspect == "black" then
    			if can_we_stall then
            string = string..snd.sep.."well arrhythmia 3 "
    				if not snd.checksomeAffs({"stupidity, masochism"}, 2) then
              string = string.."humour brainfreeze "..snd.target
    				elseif not snd.checkAff("lethargy") then
    					string = string.."humour swathe "..snd.target
            else
    					string = string.."humour disgorge  "..snd.target..random_limb[math.random(#random_limb)]
    				end
    			else            
    				if not snd.checksomeAffs({"lethargy", "confusion"},2) and snd.proned and snd.stalled_skill ~= "swathe" then
    					string = string..snd.sep.."humour swathe "..snd.target
    				elseif not snd.checksomeAffs({"masochism", "stupidity"},2) and snd.stalled_skill ~= "brainfreeze" then
    					string = string..snd.sep.."humour brainfreeze "..snd.target
            else
              string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
    				end
          end
  			elseif aspect ==  "yellow" then
    			if can_we_stall then
            string = string..snd.sep.."well arrhythmia 3 "
    				if not snd.checksomeAffs({"vertigo", "confusion"},2) and not snd.checkAff("clumsiness") then
    					string = string.."humour equilibrium "..snd.target
    				elseif not snd.checksomeAffs({"stupidity, recklessness"}, 2) then
              string = string.."humour brainfreeze "..snd.target
            else
    					string = string.."humour disgorge  "..snd.target..random_limb[math.random(#random_limb)]
    				end
    			else            
    				if snd.timer_check("restoration", .5) and not snd.checksomeAffs({"anorexia", "indifference"}, 2) then
    					string = string..snd.sep.."humour revulsion "..snd.target
    				elseif not snd.checksomeAffs({"masochism", "stupidity"},2) and snd.stalled_skill ~= "brainfreeze" then
    					string = string..snd.sep.."humour brainfreeze "..snd.target
            else
              string = string..snd.sep.."humour flense "..snd.target.." "..tohit[1]
    				end
          end
    		end
      end
  
    	if string ~= snd.last_attack and not snd.waiting.queue then
    		snd.last_attack = string
    		snd.attack(snd.last_attack)
    		snd.waiting.queue = true
    		tempTimer(snd.delay(), [[snd.waiting.queue = false]])
    	end
      end
    end
  snd.attack_function()
end</script>
									<command></command>
									<packageName></packageName>
									<regex>^gaff$</regex>
								</Alias>
							</AliasGroup>
						</AliasGroup>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Ylem</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>move on</name>
						<script>ylm.active = true
if ylm.next_zone == "none" then
 ylm.next_zone = "1680"
end
snd.moving_to = ylm.next_zone
send(" ")
if ylm.next_zone == "city" then
  ylm.active = false
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^goylem$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>move to next</name>
						<script>ylm.active = true
if ylm.next_zone == "none" then
  ylm.next_zone = "5730"
end
ylm.next_zone = ylm.path["v" .. ylm.next_zone]
snd.moving_to = ylm.next_zone
send(" ")
if ylm.next_zone == "city" then
  ylm.active = false
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^goylem next$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>move on start</name>
						<script>ylm.active = true
ylm.next_zone = "1680"
snd.moving_to = ylm.next_zone
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^goylem start$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>stop ylem</name>
						<script>ylm.next_zone = "city"
snd.moving_to = ylm.next_zone
ylm.active = false
send(" ")</script>
						<command></command>
						<packageName></packageName>
						<regex>^goylem stop$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Utilities</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Toxicology</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>sacs</name>
							<script>snd.send("harvest sac from "..matches[2]..snd.sep.."drop "..matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^sac (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>milking</name>
							<script>snd.send("qeb milk "..matches[2].." into fluidcache")</script>
							<command></command>
							<packageName></packageName>
							<regex>^milk (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>cask</name>
							<script>snd.send("qeb milk "..matches[2].." into cask")</script>
							<command></command>
							<packageName></packageName>
							<regex>^cask (\w+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>unvenom</name>
							<script>local venoms = {
"epteth",
"gecko",
"epseth",
"prefarar",
"delphinium",
"digitalis",
"curare",
"darkshade",
"hepafarin",
"monkshood",
"oculus",
"selarnia",
"kalmia",
"xentio",
"eurypteria",
"aconite",
"vernalius",
"slike",
"euphorbia",
"larkspur",
"oleander",
"voyria",
"vardrax",
}
for venom in pairs(venoms) do
 snd.send("fc consume "..venoms[venom])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^unvenom$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>venoms</name>
							<script>local venoms = {
"epteth",
"gecko",
"epseth",
"prefarar",
"aconite",
"vernalius",
"slike",
"digitalis",
"curare",
"darkshade",
"oculus",
"selarnia",
"kalmia",
"xentio",
"hepafarin",
"monkshood",
"eurypteria",
"delphinium",
"euphorbia",
"larkspur",
"oleander",
"voyria",
"vardrax",
}
for venom in pairs(venoms) do
 snd.send("fc fill "..venoms[venom])
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^venoms$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>rag</name>
							<script>snd.send("qeb craft rag")</script>
							<command></command>
							<packageName></packageName>
							<regex>^rag$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Sunder Shop Aliases</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Buying Fluids</name>
							<script>local fluid_types = {
  venoms = {
  "epteth",
  "gecko",
  "epseth",
  "prefarar",
  "delphinium",
  "digitalis",
  "curare",
  "darkshade",
  "hepafarin",
  "monkshood",
  "oculus",
  "selarnia",
  "kalmia",
  "xentio",
  "eurypteria",
  "aconite",
  "vernalius",
  "slike",
  "euphorbia",
  "larkspur",
  "oleander",
  "voyria",
  },
  
  elixirs = {
  "health",
  "mana",
  "immunity",
  "levitation",
  "antivenin",
  "frost",
  "speed",
  "vigor",
  },
  
  poultices = {
  "mending",
  "mass",
  "restoration",
  "caloric",
  "epidermal",
  },
}
for _, v in ipairs(fluid_types[matches[3]]) do
  currentamount = 0
  while currentamount &lt; tonumber(matches[2]) do
    snd.send("buy refill of " .. v .. " for fluidcache")
    currentamount = currentamount + 1
  end
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^fillcache (\d+) (elixirs|poultices|venoms)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Filling Elixirs!</name>
							<script>local elixirs = {
"health",
"mana",
"immunity",
"levitation",
"antivenin",
"frost",
"speed",
"vigor",
}
for elixir in pairs(elixirs) do
 snd.send("fc fill "..elixirs[elixir])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^fillvials$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Consuming Elixirs</name>
							<script>local elixirs = {
"health",
"mana",
"immunity",
"levitation",
"antivenin",
"frost",
"speed",
"vigor",
}
for elixir in pairs(elixirs) do
 snd.send("fc consume "..elixirs[elixir])
end
</script>
							<command></command>
							<packageName></packageName>
							<regex>^unfillvials$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Filling Poultices</name>
							<script>local poultices = {
"mending",
"mass",
"restoration",
"caloric",
"epidermal",
}
for poultice in pairs(poultices) do
 snd.send("fc fill "..poultices[poultice])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^fillbandages$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Consuming Poultices</name>
							<script>local poultices = {
"mending",
"mass",
"restoration",
"caloric",
"epidermal",
}
for poultice in pairs(poultices) do
 snd.send("fc consume "..poultices[poultice])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^unfillbandages$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>priceall</name>
							<script>snd.shopitem = matches[2]
snd.shopprice = matches[3]
snd.shopshelf = matches[4]
snd.shopih = true
snd.send("ih "..snd.shopitem)</script>
							<command></command>
							<packageName></packageName>
							<regex>^priceall (\w+) (\d+) (\d+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Buying pills</name>
							<script>pills = {
"waterbreathing",
"kawhepill",
"acuity",
"steroid",
"stimulant",
"coagulation",
"thanatonin",
"paste",
"somnium",
"ototoxin",
"decongestant",
"amaurosis",
"depressant",
"antipsychotic",
"panacea",
"euphoriant",
"anabiotic",
"opiate",
"eucrasia",
}
for pillname in pairs(pills) do
 snd.send("buy "..matches[2].." "..pills[pillname])
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^buypills (\d+)$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>rockcrush</name>
						<script>snd.send("qeb rockcrush rock for ink")</script>
						<command></command>
						<packageName></packageName>
						<regex>^rc$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>harvest rock</name>
						<script>snd.send("qeb harvest rock")</script>
						<command></command>
						<packageName></packageName>
						<regex>^hr$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Check stuff</name>
						<script>send("pull "..matches[2])
send("look in "..matches[2])
send("push "..matches[2])
send("turn "..matches[2])
send("enter "..matches[2])
send("read "..matches[2])
send("touch "..matches[2])
send("ponder "..matches[2])
send("probe "..matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^check (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Separator changing</name>
						<script>enableTrigger("Separator Check/Update")
if matches[2]~= nil then send("config separator"..matches[2]) else send("config separator") end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^config separator( (.+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Who Parsing</name>
						<script>snd.parse_who()
registerAnonymousEventHandler("sunder_who_parsing_finished", snd.parse_who_groups, true)</script>
						<command></command>
						<packageName></packageName>
						<regex>^who groups$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Easy logging</name>
						<script>local name_table = string.split(matches[3], " ")
local name_string = ""
local city_logging = {["Duiran"] = "Dion", ["Enorian"] = "Enorian", ["Spinesreach"] = "Command", ["Bloodloch"] = "Raiders",}
table.sort(name_table, function(a, b) return a:lower() &lt; b:lower() end)
for _, v in pairs(name_table) do
  if name_string ~= "" then
    name_string = name_string..", "..v
  else
    name_string = v
  end
end
send("writelog "..city_logging[gmcp.Char.Status.city].." "..matches[2]..": "..name_string)</script>
						<command></command>
						<packageName></packageName>
						<regex>^logfoci (\w+) (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>re-show windows</name>
						<script>if matches[2] == "chat" then
  yatcoContainer:load()
  yatcoContainer:show()

elseif matches[2] == "map" then
  mapContainer:load()
  mapContainer:show()

end</script>
						<command></command>
						<packageName></packageName>
						<regex>^reload window (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>gauntlet change</name>
						<script>if matches[3] then
  cecho("&lt;red&gt;You have set your gauntlet level to:&lt;orange_red&gt; "..matches[3].."&lt;red&gt;.")
  snd.toggles.gauntlet_level = tonumber(matches[3])
else
  cecho("&lt;red&gt;You have set your gauntlet level to:&lt;orange_red&gt; "..snd.toggles.gauntlet_level.."&lt;red&gt;.")
end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(mygauntlet|mygauntlet (\d+))$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Sunder Name DB</name>
					<script></script>
					<command></command>
					<packageName>Sunder Name DB</packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Sunder Ndb Aliases</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Configurations</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Toggle Highlighting</name>
								<script>if sndNDB.highlightNames then
	--Remove any highlights, and turn off the toggle.
	sndNDB.highlightNames = false
	sndNDB_Unhighlight()
	snd.message("Disabled name highlighting.")
else
	--Begin highlighting again, and enable them all.
	sndNDB.highlightNames = true
	sndNDB_loadHighlights()
	snd.message("Enabled name highlighting.")
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^sndb hl$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Set Org Colours</name>
								<script>local cities = {"Bloodloch", "Duiran", "Enemies", "Enorian", "Rogues", "Spinesreach"}

local city, colour = "", ""

if table.contains(cities, matches[2]:title()) then
	city = matches[2]:title()
	colour = matches[3]
elseif table.contains(cities, matches[3]:title()) then
	city = matches[3]:title()
	colour = matches[2]
else
	snd.message("That is not a valid option, please choose from: &lt;green&gt;Bloodloch, Duiran, Enemies, Enorian, Rogues or Spinesreach")
end

if city ~= "" then
	if table.contains(color_table, colour) then
		snd.message(city.." will now be highlighted in &lt;"..colour.."&gt;"..colour..".")
		if city ~= "Enemies" then
			sndNDB_updateHighlights(city, colour)
		else
			sndNDB_enemyHighlights()
		end
	else
		snd.message("That is not a valid colour to choose from.")
	end
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^sndb hl (\w+) (\w+)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Show Settings</name>
								<script>local count = 0
for i,v in pairs(sndNDB.players) do
	count = count + 1
end

snd.message("       snd Name Database Settings")
echo("\n ")
snd.message((sndNDB.highlightNames and "&lt;green&gt;We are" or "&lt;red&gt;We are not").."&lt;NavajoWhite&gt; currently highlighting names.")
cecho("\n       &lt;NavajoWhite&gt;      Total of &lt;white&gt;"..count.."&lt;NavajoWhite&gt; names!\n\n")

snd.message("       Highlight settings:")
for city, colour in pairs(sndNDB.highlighting) do
	cecho("\n &lt;"..colour.."&gt;"..city.."&lt;white&gt;"..string.rep(" ", 12-string.len(city)).."citizens will be highlighted in &lt;"..colour.."&gt;"..colour..".")
end

cecho("\n ")
snd.message("       Enemy settings:")
cecho("\n "..(sndNDB.highlightPriority == "enemies" and "&lt;green&gt;Prioritising" or "&lt;red&gt;Not prioritising").."&lt;NavajoWhite&gt; highlighting of enemies.")
cecho("\n &lt;LightSkyBlue&gt;Enemies will be highlighted in &lt;"..sndNDB.highlighting.Enemies.."&gt;"..sndNDB.highlighting.Enemies..".")
cecho("\n    &lt;LightSkyBlue&gt;-Special-")
cecho("\n  "..(sndNDB.enemySettings.bold and "&lt;green&gt;" or "&lt;red&gt;")..string.char(7).." &lt;NavajoWhite&gt;Bolded letters.")
cecho("\n  "..(sndNDB.enemySettings.underline and "&lt;green&gt;" or "&lt;red&gt;")..string.char(7).." &lt;NavajoWhite&gt;Underlined letters.")
cecho("\n  "..(sndNDB.enemySettings.italics and "&lt;green&gt;" or "&lt;red&gt;")..string.char(7).." &lt;NavajoWhite&gt;Italicized letters.")
</script>
								<command></command>
								<packageName></packageName>
								<regex>^sndb settings$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Set Highlight Priority</name>
								<script>local type, colour = matches[2], matches[3]

if sndNDB.highlightPriority ~= matches[2] then
	sndNDB.highlightPriority = matches[2]
	snd.message("Highlighting will give priority to "..sndNDB.highlightPriority..".")
	sndNDB_enemyHighlights()
else
	snd.message("Already prioritising highlighting of that.")
end
</script>
								<command></command>
								<packageName></packageName>
								<regex>^sndb hlprio (enemies|city)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Toggle Highlighting Options For Enemies</name>
								<script>local x = { i = "italics", b = "bold", u = "underline" }
local opt = x[matches[2]]
if not sndNDB.enemySettings[opt] then
	sndNDB.enemySettings[opt] = true
	snd.message("Enemies &lt;green&gt;will now have &lt;NavajoWhite&gt;"..opt.." applied to it.")
else
	sndNDB.enemySettings[opt] = false
	snd.message("Enemies &lt;red&gt;will no longer have &lt;NavajoWhite&gt;"..opt.." applied to it.")
end
sndNDB_enemyHighlights()</script>
								<command></command>
								<packageName></packageName>
								<regex>^sndb ehl (i|u|b)$</regex>
							</Alias>
						</AliasGroup>
						<AliasGroup isActive="yes" isFolder="yes">
							<name>Actions</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
							<Alias isActive="yes" isFolder="no">
								<name>Install</name>
								<script>sndNDB_Install()</script>
								<command></command>
								<packageName></packageName>
								<regex>^sndb install$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Parse Names Online</name>
								<script>if not sndNDB.installed then
	snd.message("Please install name database first.")
else
  ndbCity = ""
	parsingQW = true
	peopleOnline = {}
	if matches[2] then
		parsingCity = matches[2]
	end
	sendGMCP("Comm.Channel.Players")
	send(" ")
	if tonumber(snd.toggles.goggle_level) == 20 then
    snd.true_who = {}
    enableTrigger("QWP for level 20 goggles")
    send("qw")
  else  
    sndNDB_GetOnline()
  end
end
	</script>
								<command></command>
								<packageName></packageName>
								<regex>^qwp(?: (\w+)|)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Honours Person</name>
								<script>checkingPlayerCity = tempTimer(2, [[; checkingPlayerCity = nil;]])
ndbCity = ""
sndNDB_Acquire(matches[2]:title(),false)
send(matches[1])</script>
								<command></command>
								<packageName></packageName>
								<regex>^honou?r?s (\w+)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Whois Person</name>
								<script>local name = matches[2]:title()
local x, c
if not sndNDB_Exists(name) then
	snd.message(name.." isn't tracked by database.")
else
	x = sndNDB.players[name]
	c = sndNDB_getColour(name)

	cecho("\n&lt;blue&gt;- &lt;NavajoWhite&gt;"..x.title.." &lt;blue&gt;"..string.rep("-", 70-(string.len(x.title)+3)).."\n")
	cecho("\n&lt;DimGrey&gt; City :   &lt;"..c.."&gt;"..x.city..string.rep(" ", 31-string.len(x.city)).."&lt;DimGrey&gt; Tether:  &lt;white&gt;"..x.tether)
	cecho("\n\n&lt;blue&gt;"..string.rep("-", 70))
	cecho("\n ")
	send(" ",false)
end	</script>
								<command></command>
								<packageName></packageName>
								<regex>^whois (\w+)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Remove Low/Unranked</name>
								<script>local remove = {}

for i,v in pairs(sndNDB.players) do
	if v.xp_rank == nil or v.level &lt; 50 or v.xp_rank == 0 then
		table.insert(remove, v.name)
		sndNDB.players[v.name] = nil
	end
end
table.sort(remove)

snd.message("Removed a total of &lt;green&gt;"..#remove.."&lt;NavajoWhite&gt; unranked people from the database:\n - "..
	table.concat(remove, ", ")..".")
send(" ")
</script>
								<command></command>
								<packageName></packageName>
								<regex>^sndb clearout$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Remove single person</name>
								<script>local remove = (matches[2]:lower()):title()

sndNDB.players[remove] = nil

snd.message("Removed &lt;NavajoWhite&gt;from the database:\n - "..remove..".")

</script>
								<command></command>
								<packageName></packageName>
								<regex>^sndb remove (\w+)$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Re-honours everyone</name>
								<script>local count = 0
ndbCity = ""
snd.message("Updating everyone who's currently in the database.")
for i,v in pairs(sndNDB.players) do
	count = count + 1
	sndNDB_Acquire(v.name:title(),false)
end
snd.message("This may take a minute or two. Total of "..count.." people are being re-checked.")</script>
								<command></command>
								<packageName></packageName>
								<regex>^sndb redo$</regex>
							</Alias>
							<Alias isActive="yes" isFolder="no">
								<name>Individual Update</name>
								<script>-- Allow users to update names individually
local valid_fields = {"guild","city",}
local name = (matches[3]:lower()):title()
local field = matches[4]:lower()
local value = (matches[5]:lower()):title()
local tether = ""

if table.contains(valid_fields, field) then
  if field == "city" then
    local valid_cities = {"Enorian","Spinesreach","Bloodloch","Duiran","None"}
    if not table.contains(valid_cities, value) then
      snd.message("Invalid city. Your options are: "..table.concat(valid_cities, ", "))
      return
    end
  end
  sndNDB.players[name][field] = value

  if sndNDB.players[name].city == "Duiran" or sndNDB.players[name].city == "Enorian" then 
    tether2 = "Spirit"
  elseif sndNDB.players[name].city == "Spinesreach" or sndNDB.players[name].city == "Bloodloch" then 
    tether2 = "Shadow" 
  else
    tether2 = "none"
  end

  sndNDB.players[name]["tether"] = tether2

  snd.message("Changed "..field.." to "..value.." for "..name..". You may check WHOIS &lt;name&gt; to confirm.")
  sndNDB_saveSettings(false)
end</script>
								<command></command>
								<packageName></packageName>
								<regex>^(U|u)pdate (\w+) (\w+) (\w+)$</regex>
							</Alias>
						</AliasGroup>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>War</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Set Division</name>
						<script>snd.current_division = matches[2]
snd.message("Current Division is "..matches[2], "atk")</script>
						<command></command>
						<packageName></packageName>
						<regex>^war division (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>March Troops</name>
						<script>snd.send("order "..snd.current_division.." march " .. matches[2])
snd.send("qeb " .. matches[2]..snd.sep.."path find "..snd.marching_destination)
</script>
						<command></command>
						<packageName></packageName>
						<regex>^mt (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Set March Destination</name>
						<script>snd.marching_destination = matches[2]
snd.message("New troop destination is: "..matches[2], "atk")</script>
						<command></command>
						<packageName></packageName>
						<regex>^war destination (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Fortify</name>
						<script>snd.send("order " .. snd.current_division .. " fortify")</script>
						<command></command>
						<packageName></packageName>
						<regex>^war fort$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Attack Division</name>
						<script>snd.send("order " .. snd.current_division .. " attack "..matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^war kill (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Order Division</name>
						<script>snd.send("order "..snd.current_division.." "..matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^war order (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Sunder Help War</name>
						<script>cecho("\n&lt;CadetBlue&gt;Sunder War")
cecho("\n&lt;MediumSeaGreen&gt;---------------")
cecho("\n")
cecho("\n&lt;MediumTurquoise&gt;The commands are as follows")
cecho("\n")
cecho("\n&lt;DeepSkyBlue&gt;war division &lt;divisionNumber&gt;  &lt;ForestGreen&gt;Set your tracked division")
cecho("\n&lt;DeepSkyBlue&gt;war destination &lt;vNum&gt;         &lt;ForestGreen&gt;Set the room number for your division's destination")
cecho("\n&lt;DeepSkyBlue&gt;mt &lt;dir&gt;                       &lt;ForestGreen&gt;March division in direction")
cecho("\n&lt;DeepSkyBlue&gt;war kill &lt;enemyDivision&gt;       &lt;ForestGreen&gt;Start the slaughter")
cecho("\n&lt;DeepSkyBlue&gt;war fort                       &lt;ForestGreen&gt;Order your division to fortify")
cecho("\n&lt;DeepSkyBlue&gt;war order &lt;order&gt;              &lt;ForestGreen&gt;General catchall, will order your division anything you give it")
cecho("\n&lt;DeepSkyBlue&gt;War package created by &lt;purple&gt;Teflin Vyktaire")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(S|s)under (H|h)elp (W|w)ar$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Vermin</name>
					<script></script>
					<command></command>
					<packageName>Vermin</packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Vermin Basher</name>
						<script>snd.send("vermin")
if snd.toggles.vermin then
	snd.toggles.vermin = false
	bot.going = false
  disableTimer("moveroom")
	cecho("&lt;red&gt;----------------\n   &lt;red&gt;VERMIN OFF\n&lt;red&gt;----------------")
else
	snd.toggles.vermin = true
	local area = gmcp.Room.Info.area 
  if not sunder_areaPaths then
    snd.message("No area path list found, please check it is in the correct directory.")
  elseif not sunder_areaPaths[area] then
    snd.message("Path not found for current area.")
  else
    snd.message("Let's kill some vermin in: "..area.."!")
    bot.going = true
    bot.path = sunder_areaPaths[area]
  end
	cecho("\n&lt;green&gt;----------------\n   &lt;green&gt;VERMIN ON\n&lt;green&gt;----------------")
	enableTimer("moveroom")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^toggle vermin$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Auto Targeting</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Add Target List</name>
						<script>local list = matches[2]:gsub(" ", ", ")

snd.addTargetList(list)
snd.callTargetList()</script>
						<command></command>
						<packageName></packageName>
						<regex>^atl (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Add Target Position</name>
						<script>local tar = matches[2]:title()
local pos = matches[3] or nil

snd.addSingleTarget(tar, pos)

if snd.toggles.calling then
	if pos then
		send("wt Target priority: " .. tar .. " " .. pos)
	else
		send("wt Target priority: " .. tar)
	end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^atp (\w+)(?:\s)?(\d+)?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>List Targets</name>
						<script>snd.displayTargetList()
snd.callTargetList()</script>
						<command></command>
						<packageName></packageName>
						<regex>^tlist$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Clear Target List</name>
						<script>snd.clearTargetList()</script>
						<command></command>
						<packageName></packageName>
						<regex>^atlc$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Remove Target</name>
						<script>local who = matches[2]:title()

snd.removeTarget(who)

if snd.toggles.calling then 
	send("wt Target removed: " .. who)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^atr (\w+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Skip current target</name>
						<script>snd.targeting.skip = true
snd.get_new_target()</script>
						<command></command>
						<packageName></packageName>
						<regex>^nt$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Snd Autopaths</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Using Paths</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Bash areas of your choice</name>
							<script>snd_bashAreas(matches[2])</script>
							<command></command>
							<packageName></packageName>
							<regex>^bashpath (.+)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Single Area Path</name>
							<script> snd_bashArea() </script>
							<command></command>
							<packageName></packageName>
							<regex>^goarea$</regex>
						</Alias>
					</AliasGroup>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Creating</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>Compile Pather</name>
							<script> snd_patherCompile() </script>
							<command></command>
							<packageName></packageName>
							<regex>^path compile$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Add Path Room</name>
							<script> snd_patherAdd() </script>
							<command></command>
							<packageName></packageName>
							<regex>^path addroom$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Start Pather</name>
							<script> snd_createPather() </script>
							<command></command>
							<packageName></packageName>
							<regex>^path create$</regex>
						</Alias>
					</AliasGroup>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Fishing</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>FishingGo</name>
						<script>local results = get_fishing_holes(matches[2], true)
if #results == 1 then
    echo("Pathing to " .. results[1].name .. ".\n")
    results[1].rooms = results[1].rooms or {}
    if #results[1].rooms &lt;= 0 then
      echo("That fishing hole has no rooms saved. Aborting.\n")
      return
    else
      send("path find " .. results[1].rooms[1])
    end
    if snd.toggles.gallop == true then
      send("path go gallop")
    elseif gmcp.Char.Vitals.mounted == "0" then
      send("path go dash")
    else
      send("path go")
    end
else
    echo("Please specify a unique fishing location.\n")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^fgo (.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>FishSearch</name>
						<script>get_fishing_holes(matches[3], true, (matches[2] ~= ""))</script>
						<command></command>
						<packageName></packageName>
						<regex>^fishing search\s*(full|info)*\s*(.+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>ToggleAutoFish</name>
						<script>if auto_fish then
	snd.fishmsg("&lt;red&gt;Autofishing disabled.")
	auto_fish = false
	if currently_fishing then snd.send("qeb fishing cut") end
	currently_fishing = false
  snd.fishmsg("&lt;red&gt;CUTTING LINE!")
else
	snd.fishmsg("&lt;green&gt;Autofishing enabled.")
  fishbucket = fishbucket or {}
  expandAlias("sunder maxfish", false)
  expandAlias("sunder fishbucket", false)
	auto_fish = true
	if not currently_fishing then snd.send("qeb fishing cast") end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^afish$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Fishing Bucket</name>
						<script>if not snd.fishinginfo then
  load_fishinginfo_db()
end

if matches[3] then
  snd.fishmsg("&lt;SeaGreen&gt;You have set your fishing bucket capacity to:&lt;green&gt; "..matches[3].."&lt;SeaGreen&gt;.")
  snd.fishinginfo.bucket_capacity = tonumber(matches[3])
else
  snd.fishinginfo.bucket_capacity = snd.fishinginfo.bucket_capacity or {}
  snd.fishmsg("&lt;SeaGreen&gt;You have set your fishing bucket capacity to:&lt;green&gt; "..snd.fishinginfo.bucket_capacity.."&lt;SeaGreen&gt;.")
end

save_fishinginfo_db()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(sunder maxfish|sunder maxfish (\d+))$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Bucket Amount</name>
						<script>if not snd.fishinginfo then
  load_fishinginfo_db()
end

if matches[3] == "clear" then
  snd.fishinginfo.currentfish = "0"
  snd.fishmsg("&lt;SeaGreen&gt;Fishing bucket(s) CLEARED!")
  snd.fishmsg("&lt;SeaGreen&gt;You have &lt;green&gt;"..snd.fishinginfo.currentfish.." &lt;SeaGreen&gt;fish in your bucket(s)!")
elseif matches[3] then
  snd.fishmsg("&lt;SeaGreen&gt;You have &lt;green&gt;"..matches[3].."&lt;SeaGreen&gt; fish in your bucket(s)!")
  snd.fishinginfo.currentfish = tonumber(matches[3])
else
  snd.fishinginfo.currentfish = snd.fishinginfo.currentfish or {}
  snd.fishmsg("&lt;SeaGreen&gt;You have &lt;green&gt;"..snd.fishinginfo.currentfish.. "&lt;SeaGreen&gt; fish in your bucket(s)!")
--  demonnic.chat:cecho("Misc", "&lt;LightSeaGreen&gt;FISHBUCKET: &lt;SeaGreen&gt;You have &lt;green&gt;" ..snd.fishinginfo.currentfish.. "&lt;SeaGreen&gt; fish in your bucket(s)!\n")
end


save_fishinginfo_db()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(sunder fishbucket|sunder fishbucket (.+))$</regex>
					</Alias>
				</AliasGroup>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
</MudletPackage>
