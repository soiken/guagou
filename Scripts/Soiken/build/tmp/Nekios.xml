<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
  <ScriptPackage>
    <ScriptGroup isActive="yes" isFolder="yes">
  <name>Bashing</name>
      <script/>
  <packageName/>
<eventHandlerList>
</eventHandlerList>
      <Script isActive="yes" isFolder="no">
  <name>paths</name>
        <script>snd.paths = snd.paths or {}
snd.paths.high = {
  "Luzith's Lair",
  "Tiyen Esityi",
  "Dovan Hollow",
  "Xaanhal",
  "Spiral of the Corrupt",
  "Forgotten Dome",
  "Nal'jin Depths",
  "the Squal",
}
snd.paths.low = {
  "Temple of Sonn",
  "Caverns of Mor",
  "a Snake Pit",
  "Saliltul Swamp",
  "Sparklight Rift",
  "Maghuir Fissure",
  "Kalydian Forest",
  "Ayhesa Cliffs",
  "Fractal Bloom",
  "Three Rock Outpost",
  "Augerweald",
  "Mamashi Tunnels",
  "Isle of Ollin",
  "The Torturers' Caverns",
  "Drakuum",
  "Teshen Caldera",
}
snd.paths.duiran = {
  "duiran"
}
snd.paths.spinesreach = {
  "spinesreach"
}
snd.paths.bloodloch = {
  "bloodloch"
}
function snd.runPath(pathname)
  pathname = string.lower(pathname)
  if not snd.paths[pathname] then
    snd.message(pathname.." is not a valid path. Options: "..table.concat(table.keys(snd.paths), ", "))
    return
  end
  snd.message("Now running: "..pathname)
  snd_bashAreas(table.concat(snd.paths[pathname], ", "):lower())
end
</script>
  <packageName/>
<eventHandlerList>
</eventHandlerList>
</Script>
</ScriptGroup>
    <ScriptGroup isActive="yes" isFolder="yes">
  <name>progressDisplayinator</name>
      <script>ProgressDisplay = ProgressDisplay or {
  font = "Ubuntu Mono",
  fontSize = 10,
  height = 200,
  width = 400,
  goldLog = {},
  expLog = {},
}

-- Inventory management
inv = inv or {}

local function itemList(_, _)
  local event = gmcp.Char.Items.List
  if event.location ~= "inv" then
    return
  end
  inv = {}
  for _, item in pairs(event.items) do
    inv[item.id] = item
  end
  sortedItems = {}
  for id, item in pairs(inv) do
    table.insert(sortedItems, {name = item.name, id = id})
  end
  table.sort(sortedItems, function(a, b) return a.name &lt; b.name end)
  raiseEvent("inventory updated")
  display(sortedItems)
end


local function itemRemove()
  local event = gmcp.Char.Items.Remove
  if event.location ~= "inv" then
    return
  end
  inv[event.item.id] = nil
  raiseEvent("inventory updated")
end

local function itemAdd()
  local event = gmcp.Char.Items.Add
  if event.location ~= "inv" then
    return
  end
  inv[event.item.id] = event.item
  raiseEvent("inventory updated")
end

local function itemUpdate()
  local event = gmcp.Char.Items.Update
  if event.location ~= "inv" then
    return
  end
  inv[event.item.id] = event.item
  raiseEvent("inventory updated")
end

-- Register the event handler
registerAnonymousEventHandler("gmcp.Char.Items.List", "itemList")


-- Register the event handler
registerAnonymousEventHandler("gmcp.Char.Items.List", "itemList")


function ProgressDisplay:reset()
  self.goldLog = {}
  self.expLog = {}
  self.startTime = os.time()
end

function ProgressDisplay.format_int(number)
  number = math.floor(number)
  local i, j, minus, int, fraction = tostring(number):find('([-]?)(%d+)([.]?%d*)')
  -- reverse the int-string and append a comma to all blocks of 3 digits
  int = int:reverse():gsub("(%d%d%d)", "%1,")
  -- reverse the int-string back remove an optional comma and put the 
  -- optional minus and fractional part back
  return minus .. int:reverse():gsub("^,", "") .. fraction
end

function ProgressDisplay.breakdownTime(time)
  local hours, minutes, seconds = shms(time)
  hours = tonumber(hours)
  minutes = tonumber(minutes)
  seconds = tonumber(seconds)
  local days = math.floor(hours / 24)
  hours = hours % 24
  return days, hours, minutes, seconds
end

function ProgressDisplay:create()
  self.container = Adjustable.Container:new({
    name = "Progress Display",
    x = 0,
    y = 0,
    height = self.height,
    width = self.width,
  })
  self.console = Geyser.MiniConsole:new({
    name = "progress displayinator gold console",
    x = 0,
    y = 0,
    height = "100%",
    width = "100%",
    font = self.font,
    fontSize = self.fontSize,
    color = "black",
  }, self.container)
  self:update()
end

function ProgressDisplay:show()
  self.container:show()
  self:update()
end

function ProgressDisplay:hide()
  self.container:hide()
end

function ProgressDisplay:update()
  if self.container.hidden then return end
  self:expCheck()
  self:goldCheck()
  self:displayInventory()
end

function ProgressDisplay:goldUpdate(amount)
  local goldLog = self.goldLog
  local where = gmcp.Room.Info
  local when = os.time()
  local logEntry = {
    ["where"] = {
      ["roomNum"] = where.num,
      ["area"] = where.area,
    },
    ["when"] = when,
    ["amount"] = amount,
  }
  goldLog[#goldLog+1] = logEntry
  self:update()
end

function ProgressDisplay:expUpdate(amount)
  local expLog = self.expLog
  local where = gmcp.Room.Info
  local when = os.time()

  local entry = {
    ["where"] = {
      ["roomNum"] = where.num,
      ["area"] = where.area,
    },
    ["when"] = when,
    ["amount"] = amount,
  }
  expLog[#expLog+1] = entry
  self:update()
end

function ProgressDisplay:expCheck()
  local console = self.console
  local total = 0
  if not self.startTime then
    self.startTime = os.time()
  end
  local startTime = self.startTime
  local endTime = os.time()
  local thisArea, thisRoom = "Unknown", "Unknown"
  if gmcp.Room and gmcp.Room.Info then
    thisArea = gmcp.Room.Info.area
    thisRoom = gmcp.Room.Info.num
  end
  local areaExp = 0
  local roomExp = 0
  console:clear()
  for _, log in ipairs(self.expLog) do
    if log.where.area == thisArea then
      areaExp = areaExp + log.amount
    end
    if log.where.roomNum == thisRoom then
      roomExp = roomExp + log.amount
    end
    total = total + log.amount
  end
  local duration = endTime - startTime
  local days, hours, minutes, seconds = self.breakdownTime(duration)
  local timeString = string.format("%d days %d hours %d minutes %d seconds", days, hours, minutes, seconds)

  local xph = total / (duration / 60 / 60)
  local xpToLevel, xpPercentGained = "Unknown", "Unknown"
  if gmcp.Char and gmcp.Char.Vitals then
    xpToLevel = tonumber(gmcp.Char.Vitals.maxxp) - tonumber(gmcp.Char.Vitals.xp)
    xpPercentGained = string.format("%.2f", (total*100)/tonumber(gmcp.Char.Vitals.maxxp))
  end
  local timeToLevel = "Infinity"
  if xph &gt; 1 then
    timeToLevel = string.format("%.2f", xpToLevel / xph)
  end

  local readable_total = self.format_int(total)
  local readable_xph = self.format_int(xph)

  console:cecho(string.format([[
&lt;white&gt;Area        : &lt;green&gt;%s
&lt;white&gt;Time Period : &lt;green&gt;%s
&lt;LightSlateBlue&gt;Exp change  : %s%s &lt;green&gt;(%s%%)
&lt;LightSlateBlue&gt;Exp/Hour    : %s%s &lt;green&gt;(hours)
]], thisArea, timeString, total &lt; 0 and "&lt;red&gt;" or "&lt;green&gt;", readable_total, xpPercentGained, total &lt; 0 and "&lt;red&gt;" or "&lt;green&gt;", readable_xph))
end

function ProgressDisplay:goldCheck()
  local console = self.console
  local goldLog = self.goldLog
  local total = 0
  local startTime = self.startTime
  local endTime = os.time()
  local thisArea = "Unknown"
  if gmcp.Room and gmcp.Room.Info then
    thisArea = gmcp.Room.Info.area:gsub("an unstable section of ","")
  end
  local areaGold = 0
  for _, log in ipairs(goldLog) do
    if log.where.area == thisArea then
      areaGold = areaGold + log.amount
    end
    total = total + log.amount
  end
  local duration = endTime - startTime
  local gps = total / duration
  local gph = total / (duration/60/60)

  console:cecho(string.format([[
&lt;yellow&gt;Gold change : %s%s
&lt;yellow&gt;Gold in area: &lt;green&gt;%s
&lt;yellow&gt;Gold/Second : &lt;green&gt;%.2f
&lt;yellow&gt;Gold/Hour   : &lt;green&gt;%.2f
]], total &lt;= 0 and "&lt;red&gt;" or "&lt;green&gt;", total, areaGold, gps, gph))
end

function ProgressDisplay:displayInventory()
  local console = self.console
  console:cecho("\n&lt;pink&gt;Inventory Items:\n")

  -- Create two tables to store items: one for wearing and one for the rest
  local wearingItems = {}
  local otherItems = {}

  -- Iterate through the inventory and separate items based on wearslot
  for id, item in pairs(inv) do
    if item.wearslot then
      table.insert(wearingItems, {name = item.name, id = id, icon = item.icon})
    else
      table.insert(otherItems, {name = item.name, id = id, icon = item.icon})
    end
  end

  -- Sort both tables alphabetically by name
  table.sort(wearingItems, function(a, b) return a.name &lt; b.name end)
  table.sort(otherItems, function(a, b) return a.name &lt; b.name end)

  -- Display the wearing items first
  console:cecho("\n&lt;yellow&gt;Wearing:\n\n")
  for _, item in pairs(wearingItems) do
    local icon = item.icon or "question-circle" -- Default icon if not provided
    console:cecho(string.format("&lt;white&gt;%s &lt;orange&gt;%s\n", item.id, item.name))
  end

  -- Display the rest of the items
  console:cecho("\n&lt;yellow&gt;Other Items:\n\n")
  for _, item in pairs(otherItems) do
    local icon = item.icon or "question-circle" -- Default icon if not provided
    console:cecho(string.format("&lt;white&gt;%s &lt;orange&gt;%s\n", item.id, item.name))
  end
end





-- Register the event handler for "gmcp.Char.Items.List" only once
registerAnonymousEventHandler("gmcp.Char.Items.List", "itemList")
registerNamedTimer("ProgressDisplay", "regular update", 1, function() ProgressDisplay:update() end, true)
registerNamedEventHandler("inv","login","gmcp.Char.Name", function() sendGMCP("Char.Items.Inv") end)
registerNamedEventHandler("inv","List","gmcp.Char.Items.List", itemList)
registerNamedEventHandler("inv","Add","gmcp.Char.Items.Add", itemAdd)
registerNamedEventHandler("inv","Remove","gmcp.Char.Items.Remove", itemRemove)
registerNamedEventHandler("inv","Update","gmcp.Char.Items.Update", itemUpdate)</script>
  <packageName/>
<eventHandlerList>
</eventHandlerList>
      <Script isActive="yes" isFolder="no">
  <name>progressDisplayinator</name>
        <script>ProgressDisplay = ProgressDisplay or {
  font = "Ubuntu Mono",
  fontSize = 10,
  height = 200,
  width = 400,
  goldLog = {},
  expLog = {},
}

-- Inventory management
inv = inv or {}

local function itemList(_, _)
  local event = gmcp.Char.Items.List
  if event.location ~= "inv" then
    return
  end
  inv = {}
  for _, item in pairs(event.items) do
    inv[item.id] = item
  end
  sortedItems = {}
  for id, item in pairs(inv) do
    table.insert(sortedItems, {name = item.name, id = id})
  end
  table.sort(sortedItems, function(a, b) return a.name &lt; b.name end)
  raiseEvent("inventory updated")
  display(sortedItems)
end


local function itemRemove()
  local event = gmcp.Char.Items.Remove
  if event.location ~= "inv" then
    return
  end
  inv[event.item.id] = nil
  raiseEvent("inventory updated")
end

local function itemAdd()
  local event = gmcp.Char.Items.Add
  if event.location ~= "inv" then
    return
  end
  inv[event.item.id] = event.item
  raiseEvent("inventory updated")
end

local function itemUpdate()
  local event = gmcp.Char.Items.Update
  if event.location ~= "inv" then
    return
  end
  inv[event.item.id] = event.item
  raiseEvent("inventory updated")
end

-- Register the event handler
registerAnonymousEventHandler("gmcp.Char.Items.List", "itemList")


-- Register the event handler
registerAnonymousEventHandler("gmcp.Char.Items.List", "itemList")


function ProgressDisplay:reset()
  self.goldLog = {}
  self.expLog = {}
  self.startTime = os.time()
end

function ProgressDisplay.format_int(number)
  number = math.floor(number)
  local i, j, minus, int, fraction = tostring(number):find('([-]?)(%d+)([.]?%d*)')
  -- reverse the int-string and append a comma to all blocks of 3 digits
  int = int:reverse():gsub("(%d%d%d)", "%1,")
  -- reverse the int-string back remove an optional comma and put the 
  -- optional minus and fractional part back
  return minus .. int:reverse():gsub("^,", "") .. fraction
end

function ProgressDisplay.breakdownTime(time)
  local hours, minutes, seconds = shms(time)
  hours = tonumber(hours)
  minutes = tonumber(minutes)
  seconds = tonumber(seconds)
  local days = math.floor(hours / 24)
  hours = hours % 24
  return days, hours, minutes, seconds
end

function ProgressDisplay:create()
  self.container = Adjustable.Container:new({
    name = "Progress Display",
    x = 0,
    y = 0,
    height = self.height,
    width = self.width,
  })
  self.console = Geyser.MiniConsole:new({
    name = "progress displayinator gold console",
    x = 0,
    y = 0,
    height = "100%",
    width = "100%",
    font = self.font,
    fontSize = self.fontSize,
    color = "black",
  }, self.container)
  self:update()
end

function ProgressDisplay:show()
  self.container:show()
  self:update()
end

function ProgressDisplay:hide()
  self.container:hide()
end

function ProgressDisplay:update()
  if self.container.hidden then return end
  self:expCheck()
  self:goldCheck()
  self:displayInventory()
end

function ProgressDisplay:goldUpdate(amount)
  local goldLog = self.goldLog
  local where = gmcp.Room.Info
  local when = os.time()
  local logEntry = {
    ["where"] = {
      ["roomNum"] = where.num,
      ["area"] = where.area,
    },
    ["when"] = when,
    ["amount"] = amount,
  }
  goldLog[#goldLog+1] = logEntry
  self:update()
end

function ProgressDisplay:expUpdate(amount)
  local expLog = self.expLog
  local where = gmcp.Room.Info
  local when = os.time()

  local entry = {
    ["where"] = {
      ["roomNum"] = where.num,
      ["area"] = where.area,
    },
    ["when"] = when,
    ["amount"] = amount,
  }
  expLog[#expLog+1] = entry
  self:update()
end

function ProgressDisplay:expCheck()
  local console = self.console
  local total = 0
  if not self.startTime then
    self.startTime = os.time()
  end
  local startTime = self.startTime
  local endTime = os.time()
  local thisArea, thisRoom = "Unknown", "Unknown"
  if gmcp.Room and gmcp.Room.Info then
    thisArea = gmcp.Room.Info.area
    thisRoom = gmcp.Room.Info.num
  end
  local areaExp = 0
  local roomExp = 0
  console:clear()
  for _, log in ipairs(self.expLog) do
    if log.where.area == thisArea then
      areaExp = areaExp + log.amount
    end
    if log.where.roomNum == thisRoom then
      roomExp = roomExp + log.amount
    end
    total = total + log.amount
  end
  local duration = endTime - startTime
  local days, hours, minutes, seconds = self.breakdownTime(duration)
  local timeString = string.format("%d days %d hours %d minutes %d seconds", days, hours, minutes, seconds)

  local xph = total / (duration / 60 / 60)
  local xpToLevel, xpPercentGained = "Unknown", "Unknown"
  if gmcp.Char and gmcp.Char.Vitals then
    xpToLevel = tonumber(gmcp.Char.Vitals.maxxp) - tonumber(gmcp.Char.Vitals.xp)
    xpPercentGained = string.format("%.2f", (total*100)/tonumber(gmcp.Char.Vitals.maxxp))
  end
  local timeToLevel = "Infinity"
  if xph &gt; 1 then
    timeToLevel = string.format("%.2f", xpToLevel / xph)
  end

  local readable_total = self.format_int(total)
  local readable_xph = self.format_int(xph)

  console:cecho(string.format([[
&lt;white&gt;Area        : &lt;green&gt;%s
&lt;white&gt;Time Period : &lt;green&gt;%s
&lt;LightSlateBlue&gt;Exp change  : %s%s &lt;green&gt;(%s%%)
&lt;LightSlateBlue&gt;Exp/Hour    : %s%s &lt;green&gt;(hours)
]], thisArea, timeString, total &lt; 0 and "&lt;red&gt;" or "&lt;green&gt;", readable_total, xpPercentGained, total &lt; 0 and "&lt;red&gt;" or "&lt;green&gt;", readable_xph))
end

function ProgressDisplay:goldCheck()
  local console = self.console
  local goldLog = self.goldLog
  local total = 0
  local startTime = self.startTime
  local endTime = os.time()
  local thisArea = "Unknown"
  if gmcp.Room and gmcp.Room.Info then
    thisArea = gmcp.Room.Info.area:gsub("an unstable section of ","")
  end
  local areaGold = 0
  for _, log in ipairs(goldLog) do
    if log.where.area == thisArea then
      areaGold = areaGold + log.amount
    end
    total = total + log.amount
  end
  local duration = endTime - startTime
  local gps = total / duration
  local gph = total / (duration/60/60)

  console:cecho(string.format([[
&lt;yellow&gt;Gold change : %s%s
&lt;yellow&gt;Gold in area: &lt;green&gt;%s
&lt;yellow&gt;Gold/Second : &lt;green&gt;%.2f
&lt;yellow&gt;Gold/Hour   : &lt;green&gt;%.2f
]], total &lt;= 0 and "&lt;red&gt;" or "&lt;green&gt;", total, areaGold, gps, gph))
end

function ProgressDisplay:displayInventory()
  local console = self.console
  console:cecho("\n&lt;pink&gt;Inventory Items:\n")

  -- Create two tables to store items: one for wearing and one for the rest
  local wearingItems = {}
  local otherItems = {}

  -- Iterate through the inventory and separate items based on wearslot
  for id, item in pairs(inv) do
    if item.wearslot then
      table.insert(wearingItems, {name = item.name, id = id, icon = item.icon})
    else
      table.insert(otherItems, {name = item.name, id = id, icon = item.icon})
    end
  end

  -- Sort both tables alphabetically by name
  table.sort(wearingItems, function(a, b) return a.name &lt; b.name end)
  table.sort(otherItems, function(a, b) return a.name &lt; b.name end)

  -- Display the wearing items first
  console:cecho("\n&lt;yellow&gt;Wearing:\n\n")
  for _, item in pairs(wearingItems) do
    local icon = item.icon or "question-circle" -- Default icon if not provided
    console:cecho(string.format("&lt;white&gt;%s &lt;orange&gt;%s\n", item.id, item.name))
  end

  -- Display the rest of the items
  console:cecho("\n&lt;yellow&gt;Other Items:\n\n")
  for _, item in pairs(otherItems) do
    local icon = item.icon or "question-circle" -- Default icon if not provided
    console:cecho(string.format("&lt;white&gt;%s &lt;orange&gt;%s\n", item.id, item.name))
  end
end





-- Register the event handler for "gmcp.Char.Items.List" only once
registerAnonymousEventHandler("gmcp.Char.Items.List", "itemList")
registerNamedTimer("ProgressDisplay", "regular update", 1, function() ProgressDisplay:update() end, true)
registerNamedEventHandler("inv","login","gmcp.Char.Name", function() sendGMCP("Char.Items.Inv") end)
registerNamedEventHandler("inv","List","gmcp.Char.Items.List", itemList)
registerNamedEventHandler("inv","Add","gmcp.Char.Items.Add", itemAdd)
registerNamedEventHandler("inv","Remove","gmcp.Char.Items.Remove", itemRemove)
registerNamedEventHandler("inv","Update","gmcp.Char.Items.Update", itemUpdate)</script>
  <packageName/>
<eventHandlerList>
</eventHandlerList>
</Script>
</ScriptGroup>
    <ScriptGroup isActive="yes" isFolder="yes">
  <name>AutoDef</name>
      <script/>
  <packageName/>
<eventHandlerList>
</eventHandlerList>
      <Script isActive="yes" isFolder="no">
  <name>Def</name>
        <script>echo("Initialization\n")

local commands = {
    "envenom weapon with darkshade",
    "touch Cloak",
    "touch Chameleon Lolita",
    "touch Starburst",
    "touch bell",
    "touch Flame",
    "touch Feather",
    "touch starburst",
    "touch Bell",
    "touch ring",
    "touch bracelet",
    "touch necklace",
    "touch chainmail",
    "fabricate brutaliser",
    "PATH TRACK 12668",
    --"buy 10 design19116",
    "PATH TRACK 12678",
    "buy refill of epidermal for fluidcache",
    "buy 10 thanatonin",
    "PATH TRACK 13032",
    "buy 10 reishi",
    "put reishi in pipe",
    "light pipe",
    "smoke pipe",
    "dodge all",
    "mount brutaliser",
    "fabricate Eviscerator",
    "PATH TRACK 14507",
    "buy refill OF speed FOR fluidcache",
    "buy refill OF speed FOR fluidcache",
    "buy refill OF speed FOR fluidcache",
    "buy refill OF speed FOR fluidcache",
    "buy refill OF speed FOR fluidcache",
    "buy refill of caloric for fluidcache",
    "buy refill of caloric for fluidcache",
    "buy refill of caloric for fluidcache",
    "buy refill of caloric for fluidcache",
    "buy refill of caloric for fluidcache",
    "PATH TRACK 14393",
    "buy refill of mending for fluidcache",
    "buy refill of mending for fluidcache",
    "buy refill of mending for fluidcache",
    "buy refill of mending for fluidcache",
    "buy refill of mending for fluidcache",
    "buy rose",
    "buy rose",
    "buy rose",
    "buy rose",
    "buy rose",
    "PATH TRACK 14395",
    "buy 10 Stimulant",
    "buy 10 amaurosis",
    "buy 10 ototoxin",
    "buy 10 eucrasia",
    "buy 10 steroid",
    "buy 10 stimulant",
    "buy 10 depressant",
    "buy 10 panacea",
    "buy 10 acuity",
    "buy 10 kawhe",
    "buy 10 antipsychotic",
    "buy 10 decongestant",
    "buy 10 coagulation",
    "buy 10 opiate",
    "buy 10 euphoriant",
    "buy refill of darkshade for fluidcache",
    "buy refill of darkshade for fluidcache",
    "buy refill of darkshade for fluidcache",
    "buy refill of darkshade for fluidcache",
    "buy refill of darkshade for fluidcache",
    "buy refill of antivenin for fluidcache",
    "buy refill of antivenin for fluidcache",
    "buy refill of antivenin for fluidcache",
    "buy refill of antivenin for fluidcache",
    "buy refill of antivenin for fluidcache",
    "buy refill of levitation for fluidcache",
    "buy refill of levitation for fluidcache",
    "buy refill of levitation for fluidcache",
    "buy refill of levitation for fluidcache",
    "buy refill of levitation for fluidcache",
    "buy refill of frost for fluidcache",
    "buy refill of frost for fluidcache",
    "buy refill of frost for fluidcache",
    "buy refill of frost for fluidcache",
    "buy refill of frost for fluidcache",
    "buy refill of health for fluidcache",
    "buy refill of health for fluidcache",
    "buy refill of health for fluidcache",
    "buy refill of health for fluidcache",
    "buy refill of health for fluidcache",
    "buy refill of mana for fluidcache",
    "buy refill of mana for fluidcache",
    "buy refill of mana for fluidcache",
    "buy refill of mana for fluidcache",
    "buy refill of mana for fluidcache",
    "buy refill of Mass for fluidcache",
    "buy refill of Mass for fluidcache",
    "buy refill of Mass for fluidcache",
    "buy refill of Mass for fluidcache",
    "buy refill of Mass for fluidcache",
    "buy refill of restoration for fluidcache",
    "buy refill of restoration for fluidcache",
    "buy refill of restoration for fluidcache",
    "buy refill of restoration for fluidcache",
    "buy refill of restoration for fluidcache",
    "BUY RECHARGE OF resistance on ring",
    "BUY RECHARGE OF cold on ring",
    "BUY RECHARGE OF electric on ring",
    "BUY RECHARGE OF fire on ring",
    "BUY RECHARGE OF allsight on necklace",
    "BUY RECHARGE OF waterwalking on bracelet",
    "PATH TRACK 22627",
    "buy refill OF vigor FOR fluidcache",
    "buy refill OF vigor FOR fluidcache",
    "buy refill OF vigor FOR fluidcache",
    "buy refill OF vigor FOR fluidcache",
    "buy refill OF vigor FOR fluidcache",
    "BUY RECHARGE OF purity on chainmail",
    "drink antivenin",
    "drink levitation",
    "drink speed",
    "drink frost",
    "drink vigor",
    "eat thanatonin",
    "eat Stimulant",
    "eat amaurosis",
    "eat ototoxin",
    "lithe on",
    "coagulation on",
    "inspirited on",
    "efficiency on",
    "somersault on",
    "fabricate Rimestalker",
    "hide",
    "PATH TRACK 35199",
    "REMOVE GAUNTLET",
    "GIVE GAUNTLET TO BARAKIN",
    "WEAR GAUNTLET"
}


-- Variable to track whether the automation is running or stopped
local automationRunning = false

-- Variable to store the "PATH TRACK" command and its target number
local pathTrackCommand = nil
local pathTrackTargetNum = nil

-- Function to send the next command in the list
function sendNextCommand()
    if #commands == 0 then
        automationRunning = false
        cecho("&amp;lt;red&amp;gt;Automation completed. No more commands to execute.&amp;lt;reset&amp;gt;\n")
        return
    end

    if not automationRunning then
        cecho("&amp;lt;red&amp;gt;Automation stopped or not started.&amp;lt;reset&amp;gt;\n")
        return
    end

    local command = table.remove(commands, 1) -- Get the next command from the list
    if string.match(command, "PATH TRACK") then
        pathTrackCommand = command
        pathTrackTargetNum = tonumber(string.match(command, "%d+")) -- Extract the target room number
        send(command) -- Send the "PATH TRACK" command immediately
        cecho("&amp;lt;green&amp;gt;Sending PATH TRACK: " .. command .. "&amp;lt;reset&amp;gt;\n")
        tempTimer(1.5, checkPathTrack)
    else
        send(command) -- Send non-"PATH TRACK" command immediately
        cecho("&amp;lt;green&amp;gt;Sending: " .. command .. "&amp;lt;reset&amp;gt;\n")
        tempTimer(3, sendNextCommand) -- Wait for 3 seconds before sending the next command
    end
end

-- Function to check if the current room matches the target room number
function checkPathTrack()
    if not pathTrackCommand then
        sendNextCommand()
        return
    end

    local currentNum = gmcp.Room.Info.num -- Get the current room number from GMCP
    if currentNum == pathTrackTargetNum then
        pathTrackCommand = nil -- Reset the pathTrackCommand variable
        sendNextCommand() -- Proceed to send the next command
    else
        tempTimer(1, checkPathTrack) -- Wait for 1 second and then check again
        cecho("&amp;lt;yellow&amp;gt;Waiting for room match. Current: " .. currentNum .. ", Target: " .. pathTrackTargetNum .. "&amp;lt;reset&amp;gt;\n")
    end
end

-- Function to start the automation
function run_nekiosdef()
    if automationRunning then
        cecho("&amp;lt;yellow&amp;gt;Automation is already running.&amp;lt;reset&amp;gt;\n")
        return
    end

    automationRunning = true
    cecho("&amp;lt;green&amp;gt;Automation started.&amp;lt;reset&amp;gt;\n")
    sendNextCommand() -- Start sending commands
end

-- Function to stop the automation
function stop_nekiosdef()
    automationRunning = false -- Stop the automation
    cecho("&amp;lt;red&amp;gt;Automation stopped.&amp;lt;reset&amp;gt;\n")
end

-- Initialize the GMCP module (if not already done in another part of your script)
if not gmcp then
    enableGMCP()
end</script>
  <packageName/>
<eventHandlerList>
</eventHandlerList>
</Script>
</ScriptGroup>
</ScriptPackage>
  <AliasPackage>
    <AliasGroup isActive="yes" isFolder="yes">
  <name>progressDisplayinator</name>
      <script/>
  <command/>
  <packageName/>
  <regex/>
      <Alias isActive="yes" isFolder="no">
  <name>Display Progress</name>
        <script>ProgressDisplay:show()</script>
  <command/>
  <packageName/>
  <regex>^show progress$</regex>
</Alias>
      <Alias isActive="yes" isFolder="no">
  <name>Reset Progress</name>
        <script>ProgressDisplay:reset()</script>
  <command/>
  <packageName/>
  <regex>^reset progress$</regex>
</Alias>
</AliasGroup>
    <AliasGroup isActive="yes" isFolder="yes">
  <name>AutoDef</name>
      <script/>
  <command/>
  <packageName/>
  <regex/>
      <Alias isActive="yes" isFolder="no">
  <name>Def</name>
        <script>run_nekiosdef()</script>
  <command/>
  <packageName/>
  <regex>nekiosdef</regex>
</Alias>
      <Alias isActive="yes" isFolder="no">
  <name>load_nekiosdef_script</name>
        <script>dofile(getMudletHomeDir() .. "/nekiosdef_script.lua")</script>
  <command/>
  <packageName/>
  <regex>^LOAD$</regex>
</Alias>
      <Alias isActive="yes" isFolder="no">
  <name>Def Stop</name>
        <script/>
  <command/>
  <packageName/>
  <regex>^nekiosdef stop$</regex>
</Alias>
</AliasGroup>
</AliasPackage>
  <TimerPackage>
</TimerPackage>
  <TriggerPackage>
    <TriggerGroup isActive="yes" isFolder="yes" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isColorTrigger="" isColorTriggerFg="" isColorTriggerBg="">
  <name>VerminAuto</name>
      <script/>
  <triggerType>0</triggerType>
  <conditonLineDelta>0</conditonLineDelta>
  <mStayOpen>0</mStayOpen>
  <mCommand/>
  <packageName/>
  <path>VerminAuto</path>
  <mFgColor>#ff0000</mFgColor>
  <mBgColor>#ffff00</mBgColor>
  <mSoundFile/>
  <colorTriggerFgColor>#000000</colorTriggerFgColor>
  <colorTriggerBgColor>#000000</colorTriggerBgColor>
      <regexCodeList>
</regexCodeList>
      <regexCodePropertyList>
</regexCodePropertyList>
      <Trigger isActive="yes" isFolder="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isColorTrigger="" isColorTriggerFg="" isColorTriggerBg="">
  <name>vermin</name>
        <script>if snd.toggles.vermin then
    if snd.toggles.newbie then
      send("k vermin")
    else
    --single attack logic
      snd.bashing.target = "vermin"
      battack = ""
      for k,v in pairs(snd.class_list) do
        if snd.class_list[k].class == snd.class then
        if snd[v.class:lower().."_bash_override"] then
          snd[v.class:lower().."_bash_override"]()
        else
          v.func()
        end
        snd.send("qeb stand"..snd.sep..battack)
        end
      end
    end
  end
  snd.vermin = snd.vermin + 1
  if snd.vermin &gt;= 1 then
   if snd.toggles.vermin == true then
           if bot.going then
        tempTimer(1, snd.move)
      end
          disableTimer("moveroom")
   end
  end</script>
  <triggerType>0</triggerType>
  <conditonLineDelta>0</conditonLineDelta>
  <mStayOpen>0</mStayOpen>
  <mCommand/>
  <packageName/>
  <path>VerminAuto</path>
  <mFgColor>#ff0000</mFgColor>
  <mBgColor>#ffff00</mBgColor>
  <mSoundFile/>
  <colorTriggerFgColor>#000000</colorTriggerFgColor>
  <colorTriggerBgColor>#000000</colorTriggerBgColor>
        <regexCodeList>
<string>Tongue flicking to taste the air, a pebbly black snake comes into view.</string>
<string>The glint of pebbly scales alerts you to the entrance of a black snake.</string>
<string>With a faint slithering noise, a pebbly black snake enters.</string>
<string>^You spy a seagull, rooting around the ground for scraps of anything edible.</string>
<string>The faint clicking of insect legs on stone alerts you to the entrance of a carrion beetle.</string>
<string>A carrion beetle enters, scavenging for flesh.</string>
<string>^A carrion beetle scuttles in, searching for food.</string>
<string>A black rat scurries in, looking for food.</string>
<string>A reticulated planthopper lands on a perch nearby, becoming eerily still.</string>
<string>The faint clicking of insect legs on stone alerts you to the entrance of a giant ugly pincher.</string>
<string>An ugly pincher scuttles in, searching for food.</string>
<string>A tiny pincher scuttles in, searching for food.</string>
<string>The faint clicking of insect legs on stone alerts you to the entrance of an ugly pincher.</string>
<string>A giant ugly pincher enters, scavenging for flesh.</string>
<string>An ugly pincher enters, scavenging for flesh.</string>
<string>A tiny pincher enters, scavenging for flesh.</string>
<string>The faint clicking of insect legs on stone alerts you to the entrance of a tiny pincher.</string>
<string>A giant ugly pincher scuttles in, searching for food.</string>
        </regexCodeList>
        <regexCodePropertyList>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
        </regexCodePropertyList>
</Trigger>
      <Trigger isActive="yes" isFolder="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isColorTrigger="" isColorTriggerFg="" isColorTriggerBg="">
  <name>Sell Vermin</name>
        <script/>
  <triggerType>0</triggerType>
  <conditonLineDelta>0</conditonLineDelta>
  <mStayOpen>0</mStayOpen>
  <mCommand/>
  <packageName/>
  <path>VerminAuto</path>
  <mFgColor>#ff0000</mFgColor>
  <mBgColor>#ffff00</mBgColor>
  <mSoundFile/>
  <colorTriggerFgColor>#000000</colorTriggerFgColor>
  <colorTriggerBgColor>#000000</colorTriggerBgColor>
        <regexCodeList>
<string>A large scientific laboratory</string>
<string>Illuminated cave passage between shops</string>
<string>Entering Bloodloch market district</string>
<string>A dockyard slum</string>
<string>Cabalist Ghada nods curtly at you.</string>
        </regexCodeList>
        <regexCodePropertyList>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
<integer>0</integer>
        </regexCodePropertyList>
</Trigger>
</TriggerGroup>
    <TriggerGroup isActive="yes" isFolder="yes" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isColorTrigger="" isColorTriggerFg="" isColorTriggerBg="">
  <name>progressDisplayinator</name>
      <script/>
  <triggerType>0</triggerType>
  <conditonLineDelta>0</conditonLineDelta>
  <mStayOpen>0</mStayOpen>
  <mCommand/>
  <packageName/>
  <path>progressDisplayinator</path>
  <mFgColor>#ff0000</mFgColor>
  <mBgColor>#ffff00</mBgColor>
  <mSoundFile/>
  <colorTriggerFgColor>#000000</colorTriggerFgColor>
  <colorTriggerBgColor>#000000</colorTriggerBgColor>
      <regexCodeList>
</regexCodeList>
      <regexCodePropertyList>
</regexCodePropertyList>
      <Trigger isActive="yes" isFolder="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isColorTrigger="" isColorTriggerFg="" isColorTriggerBg="">
  <name>Experience</name>
        <script>local num = matches[2]:gsub(",","")
local amount = tonumber(num)
ProgressDisplay:expUpdate(amount)</script>
  <triggerType>0</triggerType>
  <conditonLineDelta>0</conditonLineDelta>
  <mStayOpen>0</mStayOpen>
  <mCommand/>
  <packageName/>
  <path>progressDisplayinator</path>
  <mFgColor>#ff0000</mFgColor>
  <mBgColor>#ffff00</mBgColor>
  <mSoundFile/>
  <colorTriggerFgColor>#000000</colorTriggerFgColor>
  <colorTriggerBgColor>#000000</colorTriggerBgColor>
        <regexCodeList>
<string>^Experience Gained\: (.+) \(</string>
        </regexCodeList>
        <regexCodePropertyList>
<integer>1</integer>
        </regexCodePropertyList>
</Trigger>
      <Trigger isActive="yes" isFolder="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isColorTrigger="" isColorTriggerFg="" isColorTriggerBg="">
  <name>Gold</name>
        <script>local amount = tonumber(matches[3]) * (matches[2] == "lost" and -1 or 1)

ProgressDisplay:goldUpdate(amount)</script>
  <triggerType>0</triggerType>
  <conditonLineDelta>0</conditonLineDelta>
  <mStayOpen>0</mStayOpen>
  <mCommand/>
  <packageName/>
  <path>progressDisplayinator</path>
  <mFgColor>#ff0000</mFgColor>
  <mBgColor>#ffff00</mBgColor>
  <mSoundFile/>
  <colorTriggerFgColor>#000000</colorTriggerFgColor>
  <colorTriggerBgColor>#000000</colorTriggerBgColor>
        <regexCodeList>
<string>^\[Gold\]\: You have (lost|gained) (\d+) gold\.$</string>
        </regexCodeList>
        <regexCodePropertyList>
<integer>1</integer>
        </regexCodePropertyList>
</Trigger>
</TriggerGroup>
    <TriggerGroup isActive="yes" isFolder="yes" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isColorTrigger="" isColorTriggerFg="" isColorTriggerBg="">
  <name>AutoDef</name>
      <script/>
  <triggerType>0</triggerType>
  <conditonLineDelta>0</conditonLineDelta>
  <mStayOpen>0</mStayOpen>
  <mCommand/>
  <packageName/>
  <path>AutoDef</path>
  <mFgColor>#ff0000</mFgColor>
  <mBgColor>#ffff00</mBgColor>
  <mSoundFile/>
  <colorTriggerFgColor>#000000</colorTriggerFgColor>
  <colorTriggerBgColor>#000000</colorTriggerBgColor>
      <regexCodeList>
</regexCodeList>
      <regexCodePropertyList>
</regexCodePropertyList>
      <Trigger isActive="yes" isFolder="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isColorTrigger="" isColorTriggerFg="" isColorTriggerBg="">
  <name>Def</name>
        <script/>
  <triggerType>0</triggerType>
  <conditonLineDelta>0</conditonLineDelta>
  <mStayOpen>0</mStayOpen>
  <mCommand/>
  <packageName/>
  <path>AutoDef</path>
  <mFgColor>#ff0000</mFgColor>
  <mBgColor>#ffff00</mBgColor>
  <mSoundFile/>
  <colorTriggerFgColor>#000000</colorTriggerFgColor>
  <colorTriggerBgColor>#000000</colorTriggerBgColor>
        <regexCodeList>
<string>^nekiosdef*</string>
        </regexCodeList>
        <regexCodePropertyList>
<integer>1</integer>
        </regexCodePropertyList>
</Trigger>
</TriggerGroup>
    <TriggerGroup isActive="yes" isFolder="yes" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isColorTrigger="" isColorTriggerFg="" isColorTriggerBg="">
  <name>ReplyTell</name>
      <script>if snd.toggles.vermin == true then
    local area = gmcp.Room.Info.area
  
    if area == "Spinesreach" then
      snd.send("sell vermin to ghada")
      if snd.toggles.vermin == true then
        snd.send("path track 43846")
        send("path track 43846")
        snd.runPath("duiran")
        snd.send("eat rose")
        if snd.toggles.fasthunt == true then 
          snd.toggle("fasthunt") end
      end
    elseif area == "Duiran" then
      snd.send("sell vermin to nysos")
      if snd.toggles.vermin == true then
        snd.send("path track 9194")
        send("path track 9194")
        snd.runPath("bloodloch")
        snd.send("eat rose")
        if snd.toggles.fasthunt == true then 
          snd.toggle("fasthunt") end
      end
    elseif area == "Bloodloch" then
      snd.send("sell vermin to enzo")
      if snd.toggles.vermin == true then
        snd.send("path track 11687")
        send("path track 11687")
        snd.runPath("spinesreach")
        snd.send("eat rose")
        if snd.toggles.fasthunt == true then 
          snd.toggle("fasthunt") end
      end
    --elseif area == "the City of Enorian" then
      --snd.send("sell vermin to shrift")
      --if snd.toggles.vermin == true then
        --snd.send("TOGGLE VERMIN")
        --snd.send("MPP")
        --snd.send("path track Spinesreach")
        --tempTimer(10, function()
          --if snd.toggles.vermin == false then
            --snd.send("TOGGLE VERMIN")
            --snd.send("MPP")
          --end
          --snd.send("GOAREA") -- Move this command inside the timer function
        --end)
      --end
    end
  end
  </script>
  <triggerType>0</triggerType>
  <conditonLineDelta>0</conditonLineDelta>
  <mStayOpen>0</mStayOpen>
  <mCommand/>
  <packageName/>
  <path>ReplyTell</path>
  <mFgColor>#ff0000</mFgColor>
  <mBgColor>#ffff00</mBgColor>
  <mSoundFile/>
  <colorTriggerFgColor>#000000</colorTriggerFgColor>
  <colorTriggerBgColor>#000000</colorTriggerBgColor>
      <regexCodeList>
</regexCodeList>
      <regexCodePropertyList>
</regexCodePropertyList>
      <Trigger isActive="yes" isFolder="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isColorTrigger="" isColorTriggerFg="" isColorTriggerBg="">
  <name>vermin</name>
        <script/>
  <triggerType>0</triggerType>
  <conditonLineDelta>0</conditonLineDelta>
  <mStayOpen>0</mStayOpen>
  <mCommand/>
  <packageName/>
  <path>ReplyTell</path>
  <mFgColor>#ff0000</mFgColor>
  <mBgColor>#ffff00</mBgColor>
  <mSoundFile/>
  <colorTriggerFgColor>#000000</colorTriggerFgColor>
  <colorTriggerBgColor>#000000</colorTriggerBgColor>
        <regexCodeList>
<string>^(Tells): ([^\s]+) tells you, ".*(?:help|wandering|alright|okay).*"</string>
        </regexCodeList>
        <regexCodePropertyList>
<integer>1</integer>
        </regexCodePropertyList>
</Trigger>
</TriggerGroup>
</TriggerPackage>
  <KeyPackage>
</KeyPackage>
</MudletPackage>
