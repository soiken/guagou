-- Define a queue of commands to be executed
local commandQueue = {
    "envenom weapon with darkshade",
    "touch mindseye",
    "touch cloak",
    "touch shield",
    "touch bell",
    "touch Cloak",
    "touch Chameleon",
    "touch starburst",
    "touch flame",
    "fabricate brutaliser",
    "PATH TRACK 12668",
    "BUY 10 design19116",
    "PATH TRACK 12678",
    "buy refill of epidermal for fluidcache",
    "BUY 10 thanatonin",
    "PATH TRACK 13032",
    "BUY 10 reishi",
    "put reishi in pipe",
    "light pipe",
    "smoke pipe",
    "dodge all",
    "mount brutaliser",
    "fabricate Eviscerator",
    "PATH TRACK 14507",
    "BUY refill OF speed FOR fluidcache",
    "BUY refill OF speed FOR fluidcache",
    "BUY refill OF speed FOR fluidcache",
    "BUY refill OF speed FOR fluidcache",
    "BUY refill OF speed FOR fluidcache",
    "buy refill of caloric for fluidcache",
    "buy refill of caloric for fluidcache",
    "buy refill of caloric for fluidcache",
    "buy refill of caloric for fluidcache",
    "buy refill of caloric for fluidcache",
    "PATH TRACK 14393",
    "buy refill of mending for fluidcache",
    "buy refill of mending for fluidcache",
    "buy refill of mending for fluidcache",
    "buy refill of mending for fluidcache",
    "buy refill of mending for fluidcache",
    "PATH TRACK 14395",
    "BUY 10 Stimulant",
    "BUY 10 amaurosis",
    "BUY 10 ototoxin",
    "BUY 10 eucrasia",
    "BUY 10 steroid",
    "BUY 10 stimulant",
    "BUY 10 depressant",
    "BUY 10 panacea",
    "BUY 10 acuity",
    "BUY 10 kawhe",
    "BUY 10 antipsychotic",
    "BUY 10 decongestant",
    "BUY 10 coagulation",
    "BUY 10 opiate",
    "BUY 10 euphoriant",
    "buy refill of darkshade for fluidcache",
    "buy refill of antivenin for fluidcache",
    "buy refill of levitation for fluidcache",
    "buy refill of frost for fluidcache",
    "buy refill of health for fluidcache",
    "buy refill of mana for fluidcache",
    "buy refill of Mass for fluidcache",
    "buy refill of restoration for fluidcache",
    "buy refill of soothing for fluidcache",
    "PATH TRACK 22627",
    "BUY refill OF vigor FOR fluidcache",
    "BUY refill OF vigor FOR fluidcache",
    "BUY refill OF vigor FOR fluidcache",
    "BUY refill OF vigor FOR fluidcache",
    "BUY refill OF vigor FOR fluidcache",
    "drink antivenin",
    "drink levitation",
    "drink speed",
    "drink frost",
    "drink vigor",
    "eat thanatonin",
    "eat Stimulant",
    "eat amaurosis",
    "eat ototoxin",
    "lithe on",
    "coagulation on",
    "inspirited on",
    "efficiency on",
    "somersault on",
    "fabricate Rimestalker",
    "hide"
}

-- Initialize the current command index
local currentCommandIndex = 1

-- Function to execute the next command in the queue
function executeNextCommand()
    -- Check if there are more commands to execute
    if currentCommandIndex <= #commandQueue then
        local command = commandQueue[currentCommandIndex]
        local delay = 2 -- Default delay

        -- Function to check if a command should be executed based on a pattern
        local function shouldExecute(pattern, commandPattern)
            local charStatus = gmcp.Char.Status or {}
            local charText = charStatus.text or ""
            return string.find(charText:lower(), pattern:lower()) and string.find(command:lower(), commandPattern:lower())
        end
        
        -- Define patterns for each condition
        local patterns = {
            { "The Spirean Marketplace", "PATH TRACK 12668" },
            { "The Tentacle's Grasp", "PATH TRACK 12678" },
            { "The Tundral Temperance", "PATH TRACK 13032" },
            { "Redwood Exports", "PATH TRACK 14507" },
            { "The Riz Biz", "PATH TRACK 14393" },
            { "The Shadow Matrix", "PATH TRACK 14395" },
            { "The Veiled Void.", "PATH TRACK 22627" },
            { "receive 10", "BUY 10" },
            { "sips", "buy refill" }
        }
        
        -- Check for matching patterns and set the delay if a match is found
        for _, pattern in pairs(patterns) do
            local gameTextPattern, commandPattern = unpack(pattern)
            if shouldExecute(gameTextPattern, commandPattern) then
                -- Execute the current command with no delay
                send(command .. "\n")
                -- Move to the next command in the queue
                currentCommandIndex = currentCommandIndex + 1
                -- Schedule a timer to execute the next command with the default delay
                tempTimer(delay, "executeNextCommand()")
                return -- Exit the function to avoid executing multiple commands
            end
        end

        -- If no matching pattern is found, wait and recheck after a short interval
        tempTimer(1, "executeNextCommand()")
    else
        -- All commands have been executed, remove the trigger
        killTrigger("waitForTextTrigger")
    end
end

-- Function called when the waitForTextTrigger is activated
function waitForTextTriggerCallback()
    -- No need to process the game text in this version
    -- The executeNextCommand function handles pattern matching and command execution
end

-- Set up a trigger to wait for any text
waitForTextTrigger = tempRegexTrigger("(.+)", [[waitForTextTriggerCallback()]])

-- Start the script by executing the first command
executeNextCommand()
